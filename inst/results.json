{"CheckResults":[{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":1,"QUERY_TEXT":"\r\n/*********\r\nFIELD_IS_NOT_NULLABLE\r\n\r\nFor each table, check that the fields in which IS_NOT_NULLABLE == TRUE, there are no null values in that field.\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = PERSON\r\ncdmFieldName = person_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'PERSON.person_id' AS violating_field, PERSON.* \r\n\t\t  FROM cdm.PERSON\r\n\t\t WHERE PERSON.person_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.PERSON\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":2,"QUERY_TEXT":"\r\n/*********\r\nFIELD_IS_NOT_NULLABLE\r\n\r\nFor each table, check that the fields in which IS_NOT_NULLABLE == TRUE, there are no null values in that field.\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = PERSON\r\ncdmFieldName = gender_concept_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'PERSON.gender_concept_id' AS violating_field, PERSON.* \r\n\t\t  FROM cdm.PERSON\r\n\t\t WHERE PERSON.gender_concept_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.PERSON\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":3,"QUERY_TEXT":"\r\n/*********\r\nFIELD_IS_NOT_NULLABLE\r\n\r\nFor each table, check that the fields in which IS_NOT_NULLABLE == TRUE, there are no null values in that field.\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = PERSON\r\ncdmFieldName = year_of_birth\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'PERSON.year_of_birth' AS violating_field, PERSON.* \r\n\t\t  FROM cdm.PERSON\r\n\t\t WHERE PERSON.year_of_birth IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.PERSON\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":4,"QUERY_TEXT":"\r\n/*********\r\nFIELD_IS_NOT_NULLABLE\r\n\r\nFor each table, check that the fields in which IS_NOT_NULLABLE == TRUE, there are no null values in that field.\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = PERSON\r\ncdmFieldName = race_concept_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'PERSON.race_concept_id' AS violating_field, PERSON.* \r\n\t\t  FROM cdm.PERSON\r\n\t\t WHERE PERSON.race_concept_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.PERSON\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":5,"QUERY_TEXT":"\r\n/*********\r\nFIELD_IS_NOT_NULLABLE\r\n\r\nFor each table, check that the fields in which IS_NOT_NULLABLE == TRUE, there are no null values in that field.\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = PERSON\r\ncdmFieldName = ethnicity_concept_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'PERSON.ethnicity_concept_id' AS violating_field, PERSON.* \r\n\t\t  FROM cdm.PERSON\r\n\t\t WHERE PERSON.ethnicity_concept_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.PERSON\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":6,"QUERY_TEXT":"\r\n/*********\r\nFIELD_IS_NOT_NULLABLE\r\n\r\nFor each table, check that the fields in which IS_NOT_NULLABLE == TRUE, there are no null values in that field.\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = OBSERVATION_PERIOD\r\ncdmFieldName = observation_period_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'OBSERVATION_PERIOD.observation_period_id' AS violating_field, OBSERVATION_PERIOD.* \r\n\t\t  FROM cdm.OBSERVATION_PERIOD\r\n\t\t WHERE OBSERVATION_PERIOD.observation_period_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.OBSERVATION_PERIOD\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":7,"QUERY_TEXT":"\r\n/*********\r\nFIELD_IS_NOT_NULLABLE\r\n\r\nFor each table, check that the fields in which IS_NOT_NULLABLE == TRUE, there are no null values in that field.\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = OBSERVATION_PERIOD\r\ncdmFieldName = person_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'OBSERVATION_PERIOD.person_id' AS violating_field, OBSERVATION_PERIOD.* \r\n\t\t  FROM cdm.OBSERVATION_PERIOD\r\n\t\t WHERE OBSERVATION_PERIOD.person_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.OBSERVATION_PERIOD\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":8,"QUERY_TEXT":"\r\n/*********\r\nFIELD_IS_NOT_NULLABLE\r\n\r\nFor each table, check that the fields in which IS_NOT_NULLABLE == TRUE, there are no null values in that field.\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = OBSERVATION_PERIOD\r\ncdmFieldName = observation_period_start_date\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'OBSERVATION_PERIOD.observation_period_start_date' AS violating_field, OBSERVATION_PERIOD.* \r\n\t\t  FROM cdm.OBSERVATION_PERIOD\r\n\t\t WHERE OBSERVATION_PERIOD.observation_period_start_date IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.OBSERVATION_PERIOD\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":9,"QUERY_TEXT":"\r\n/*********\r\nFIELD_IS_NOT_NULLABLE\r\n\r\nFor each table, check that the fields in which IS_NOT_NULLABLE == TRUE, there are no null values in that field.\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = OBSERVATION_PERIOD\r\ncdmFieldName = observation_period_end_date\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'OBSERVATION_PERIOD.observation_period_end_date' AS violating_field, OBSERVATION_PERIOD.* \r\n\t\t  FROM cdm.OBSERVATION_PERIOD\r\n\t\t WHERE OBSERVATION_PERIOD.observation_period_end_date IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.OBSERVATION_PERIOD\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":10,"QUERY_TEXT":"\r\n/*********\r\nFIELD_IS_NOT_NULLABLE\r\n\r\nFor each table, check that the fields in which IS_NOT_NULLABLE == TRUE, there are no null values in that field.\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = OBSERVATION_PERIOD\r\ncdmFieldName = period_type_concept_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'OBSERVATION_PERIOD.period_type_concept_id' AS violating_field, OBSERVATION_PERIOD.* \r\n\t\t  FROM cdm.OBSERVATION_PERIOD\r\n\t\t WHERE OBSERVATION_PERIOD.period_type_concept_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.OBSERVATION_PERIOD\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":11,"QUERY_TEXT":"\r\n/*********\r\nFIELD_IS_NOT_NULLABLE\r\n\r\nFor each table, check that the fields in which IS_NOT_NULLABLE == TRUE, there are no null values in that field.\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = VISIT_OCCURRENCE\r\ncdmFieldName = visit_occurrence_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'VISIT_OCCURRENCE.visit_occurrence_id' AS violating_field, VISIT_OCCURRENCE.* \r\n\t\t  FROM cdm.VISIT_OCCURRENCE\r\n\t\t WHERE VISIT_OCCURRENCE.visit_occurrence_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.VISIT_OCCURRENCE\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":12,"QUERY_TEXT":"\r\n/*********\r\nFIELD_IS_NOT_NULLABLE\r\n\r\nFor each table, check that the fields in which IS_NOT_NULLABLE == TRUE, there are no null values in that field.\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = VISIT_OCCURRENCE\r\ncdmFieldName = person_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'VISIT_OCCURRENCE.person_id' AS violating_field, VISIT_OCCURRENCE.* \r\n\t\t  FROM cdm.VISIT_OCCURRENCE\r\n\t\t WHERE VISIT_OCCURRENCE.person_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.VISIT_OCCURRENCE\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":13,"QUERY_TEXT":"\r\n/*********\r\nFIELD_IS_NOT_NULLABLE\r\n\r\nFor each table, check that the fields in which IS_NOT_NULLABLE == TRUE, there are no null values in that field.\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = VISIT_OCCURRENCE\r\ncdmFieldName = visit_concept_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'VISIT_OCCURRENCE.visit_concept_id' AS violating_field, VISIT_OCCURRENCE.* \r\n\t\t  FROM cdm.VISIT_OCCURRENCE\r\n\t\t WHERE VISIT_OCCURRENCE.visit_concept_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.VISIT_OCCURRENCE\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":14,"QUERY_TEXT":"\r\n/*********\r\nFIELD_IS_NOT_NULLABLE\r\n\r\nFor each table, check that the fields in which IS_NOT_NULLABLE == TRUE, there are no null values in that field.\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = VISIT_OCCURRENCE\r\ncdmFieldName = visit_start_date\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'VISIT_OCCURRENCE.visit_start_date' AS violating_field, VISIT_OCCURRENCE.* \r\n\t\t  FROM cdm.VISIT_OCCURRENCE\r\n\t\t WHERE VISIT_OCCURRENCE.visit_start_date IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.VISIT_OCCURRENCE\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":15,"QUERY_TEXT":"\r\n/*********\r\nFIELD_IS_NOT_NULLABLE\r\n\r\nFor each table, check that the fields in which IS_NOT_NULLABLE == TRUE, there are no null values in that field.\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = VISIT_OCCURRENCE\r\ncdmFieldName = visit_end_date\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'VISIT_OCCURRENCE.visit_end_date' AS violating_field, VISIT_OCCURRENCE.* \r\n\t\t  FROM cdm.VISIT_OCCURRENCE\r\n\t\t WHERE VISIT_OCCURRENCE.visit_end_date IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.VISIT_OCCURRENCE\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":16,"QUERY_TEXT":"\r\n/*********\r\nFIELD_IS_NOT_NULLABLE\r\n\r\nFor each table, check that the fields in which IS_NOT_NULLABLE == TRUE, there are no null values in that field.\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = VISIT_OCCURRENCE\r\ncdmFieldName = visit_type_concept_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'VISIT_OCCURRENCE.visit_type_concept_id' AS violating_field, VISIT_OCCURRENCE.* \r\n\t\t  FROM cdm.VISIT_OCCURRENCE\r\n\t\t WHERE VISIT_OCCURRENCE.visit_type_concept_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.VISIT_OCCURRENCE\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":17,"QUERY_TEXT":"\r\n/*********\r\nFIELD_IS_NOT_NULLABLE\r\n\r\nFor each table, check that the fields in which IS_NOT_NULLABLE == TRUE, there are no null values in that field.\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = CONDITION_OCCURRENCE\r\ncdmFieldName = condition_occurrence_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'CONDITION_OCCURRENCE.condition_occurrence_id' AS violating_field, CONDITION_OCCURRENCE.* \r\n\t\t  FROM cdm.CONDITION_OCCURRENCE\r\n\t\t WHERE CONDITION_OCCURRENCE.condition_occurrence_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.CONDITION_OCCURRENCE\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":18,"QUERY_TEXT":"\r\n/*********\r\nFIELD_IS_NOT_NULLABLE\r\n\r\nFor each table, check that the fields in which IS_NOT_NULLABLE == TRUE, there are no null values in that field.\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = CONDITION_OCCURRENCE\r\ncdmFieldName = person_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'CONDITION_OCCURRENCE.person_id' AS violating_field, CONDITION_OCCURRENCE.* \r\n\t\t  FROM cdm.CONDITION_OCCURRENCE\r\n\t\t WHERE CONDITION_OCCURRENCE.person_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.CONDITION_OCCURRENCE\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":19,"QUERY_TEXT":"\r\n/*********\r\nFIELD_IS_NOT_NULLABLE\r\n\r\nFor each table, check that the fields in which IS_NOT_NULLABLE == TRUE, there are no null values in that field.\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = CONDITION_OCCURRENCE\r\ncdmFieldName = condition_concept_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'CONDITION_OCCURRENCE.condition_concept_id' AS violating_field, CONDITION_OCCURRENCE.* \r\n\t\t  FROM cdm.CONDITION_OCCURRENCE\r\n\t\t WHERE CONDITION_OCCURRENCE.condition_concept_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.CONDITION_OCCURRENCE\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":245805,"PCT_VIOLATED_ROWS":1,"CHECK_ID":20,"QUERY_TEXT":"\r\n/*********\r\nFIELD_IS_NOT_NULLABLE\r\n\r\nFor each table, check that the fields in which IS_NOT_NULLABLE == TRUE, there are no null values in that field.\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = CONDITION_OCCURRENCE\r\ncdmFieldName = condition_start_datetime\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'CONDITION_OCCURRENCE.condition_start_datetime' AS violating_field, CONDITION_OCCURRENCE.* \r\n\t\t  FROM cdm.CONDITION_OCCURRENCE\r\n\t\t WHERE CONDITION_OCCURRENCE.condition_start_datetime IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.CONDITION_OCCURRENCE\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":21,"QUERY_TEXT":"\r\n/*********\r\nFIELD_IS_NOT_NULLABLE\r\n\r\nFor each table, check that the fields in which IS_NOT_NULLABLE == TRUE, there are no null values in that field.\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = CONDITION_OCCURRENCE\r\ncdmFieldName = condition_type_concept_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'CONDITION_OCCURRENCE.condition_type_concept_id' AS violating_field, CONDITION_OCCURRENCE.* \r\n\t\t  FROM cdm.CONDITION_OCCURRENCE\r\n\t\t WHERE CONDITION_OCCURRENCE.condition_type_concept_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.CONDITION_OCCURRENCE\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":22,"QUERY_TEXT":"\r\n/*********\r\nFIELD_IS_NOT_NULLABLE\r\n\r\nFor each table, check that the fields in which IS_NOT_NULLABLE == TRUE, there are no null values in that field.\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = DRUG_EXPOSURE\r\ncdmFieldName = drug_exposure_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'DRUG_EXPOSURE.drug_exposure_id' AS violating_field, DRUG_EXPOSURE.* \r\n\t\t  FROM cdm.DRUG_EXPOSURE\r\n\t\t WHERE DRUG_EXPOSURE.drug_exposure_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.DRUG_EXPOSURE\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":23,"QUERY_TEXT":"\r\n/*********\r\nFIELD_IS_NOT_NULLABLE\r\n\r\nFor each table, check that the fields in which IS_NOT_NULLABLE == TRUE, there are no null values in that field.\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = DRUG_EXPOSURE\r\ncdmFieldName = person_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'DRUG_EXPOSURE.person_id' AS violating_field, DRUG_EXPOSURE.* \r\n\t\t  FROM cdm.DRUG_EXPOSURE\r\n\t\t WHERE DRUG_EXPOSURE.person_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.DRUG_EXPOSURE\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":24,"QUERY_TEXT":"\r\n/*********\r\nFIELD_IS_NOT_NULLABLE\r\n\r\nFor each table, check that the fields in which IS_NOT_NULLABLE == TRUE, there are no null values in that field.\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = DRUG_EXPOSURE\r\ncdmFieldName = drug_concept_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'DRUG_EXPOSURE.drug_concept_id' AS violating_field, DRUG_EXPOSURE.* \r\n\t\t  FROM cdm.DRUG_EXPOSURE\r\n\t\t WHERE DRUG_EXPOSURE.drug_concept_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.DRUG_EXPOSURE\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":25,"QUERY_TEXT":"\r\n/*********\r\nFIELD_IS_NOT_NULLABLE\r\n\r\nFor each table, check that the fields in which IS_NOT_NULLABLE == TRUE, there are no null values in that field.\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = DRUG_EXPOSURE\r\ncdmFieldName = drug_exposure_start_date\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'DRUG_EXPOSURE.drug_exposure_start_date' AS violating_field, DRUG_EXPOSURE.* \r\n\t\t  FROM cdm.DRUG_EXPOSURE\r\n\t\t WHERE DRUG_EXPOSURE.drug_exposure_start_date IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.DRUG_EXPOSURE\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":26,"QUERY_TEXT":"\r\n/*********\r\nFIELD_IS_NOT_NULLABLE\r\n\r\nFor each table, check that the fields in which IS_NOT_NULLABLE == TRUE, there are no null values in that field.\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = DRUG_EXPOSURE\r\ncdmFieldName = drug_exposure_end_date\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'DRUG_EXPOSURE.drug_exposure_end_date' AS violating_field, DRUG_EXPOSURE.* \r\n\t\t  FROM cdm.DRUG_EXPOSURE\r\n\t\t WHERE DRUG_EXPOSURE.drug_exposure_end_date IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.DRUG_EXPOSURE\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":27,"QUERY_TEXT":"\r\n/*********\r\nFIELD_IS_NOT_NULLABLE\r\n\r\nFor each table, check that the fields in which IS_NOT_NULLABLE == TRUE, there are no null values in that field.\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = DRUG_EXPOSURE\r\ncdmFieldName = drug_type_concept_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'DRUG_EXPOSURE.drug_type_concept_id' AS violating_field, DRUG_EXPOSURE.* \r\n\t\t  FROM cdm.DRUG_EXPOSURE\r\n\t\t WHERE DRUG_EXPOSURE.drug_type_concept_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.DRUG_EXPOSURE\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":28,"QUERY_TEXT":"\r\n/*********\r\nFIELD_IS_NOT_NULLABLE\r\n\r\nFor each table, check that the fields in which IS_NOT_NULLABLE == TRUE, there are no null values in that field.\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = PROCEDURE_OCCURRENCE\r\ncdmFieldName = procedure_occurrence_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'PROCEDURE_OCCURRENCE.procedure_occurrence_id' AS violating_field, PROCEDURE_OCCURRENCE.* \r\n\t\t  FROM cdm.PROCEDURE_OCCURRENCE\r\n\t\t WHERE PROCEDURE_OCCURRENCE.procedure_occurrence_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.PROCEDURE_OCCURRENCE\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":29,"QUERY_TEXT":"\r\n/*********\r\nFIELD_IS_NOT_NULLABLE\r\n\r\nFor each table, check that the fields in which IS_NOT_NULLABLE == TRUE, there are no null values in that field.\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = PROCEDURE_OCCURRENCE\r\ncdmFieldName = person_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'PROCEDURE_OCCURRENCE.person_id' AS violating_field, PROCEDURE_OCCURRENCE.* \r\n\t\t  FROM cdm.PROCEDURE_OCCURRENCE\r\n\t\t WHERE PROCEDURE_OCCURRENCE.person_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.PROCEDURE_OCCURRENCE\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":30,"QUERY_TEXT":"\r\n/*********\r\nFIELD_IS_NOT_NULLABLE\r\n\r\nFor each table, check that the fields in which IS_NOT_NULLABLE == TRUE, there are no null values in that field.\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = PROCEDURE_OCCURRENCE\r\ncdmFieldName = procedure_concept_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'PROCEDURE_OCCURRENCE.procedure_concept_id' AS violating_field, PROCEDURE_OCCURRENCE.* \r\n\t\t  FROM cdm.PROCEDURE_OCCURRENCE\r\n\t\t WHERE PROCEDURE_OCCURRENCE.procedure_concept_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.PROCEDURE_OCCURRENCE\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":31,"QUERY_TEXT":"\r\n/*********\r\nFIELD_IS_NOT_NULLABLE\r\n\r\nFor each table, check that the fields in which IS_NOT_NULLABLE == TRUE, there are no null values in that field.\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = PROCEDURE_OCCURRENCE\r\ncdmFieldName = procedure_date\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'PROCEDURE_OCCURRENCE.procedure_date' AS violating_field, PROCEDURE_OCCURRENCE.* \r\n\t\t  FROM cdm.PROCEDURE_OCCURRENCE\r\n\t\t WHERE PROCEDURE_OCCURRENCE.procedure_date IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.PROCEDURE_OCCURRENCE\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":32,"QUERY_TEXT":"\r\n/*********\r\nFIELD_IS_NOT_NULLABLE\r\n\r\nFor each table, check that the fields in which IS_NOT_NULLABLE == TRUE, there are no null values in that field.\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = PROCEDURE_OCCURRENCE\r\ncdmFieldName = procedure_type_concept_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'PROCEDURE_OCCURRENCE.procedure_type_concept_id' AS violating_field, PROCEDURE_OCCURRENCE.* \r\n\t\t  FROM cdm.PROCEDURE_OCCURRENCE\r\n\t\t WHERE PROCEDURE_OCCURRENCE.procedure_type_concept_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.PROCEDURE_OCCURRENCE\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":33,"QUERY_TEXT":"\r\n/*********\r\nFIELD_IS_NOT_NULLABLE\r\n\r\nFor each table, check that the fields in which IS_NOT_NULLABLE == TRUE, there are no null values in that field.\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = DEVICE_EXPOSURE\r\ncdmFieldName = device_exposure_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'DEVICE_EXPOSURE.device_exposure_id' AS violating_field, DEVICE_EXPOSURE.* \r\n\t\t  FROM cdm.DEVICE_EXPOSURE\r\n\t\t WHERE DEVICE_EXPOSURE.device_exposure_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.DEVICE_EXPOSURE\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":34,"QUERY_TEXT":"\r\n/*********\r\nFIELD_IS_NOT_NULLABLE\r\n\r\nFor each table, check that the fields in which IS_NOT_NULLABLE == TRUE, there are no null values in that field.\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = DEVICE_EXPOSURE\r\ncdmFieldName = person_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'DEVICE_EXPOSURE.person_id' AS violating_field, DEVICE_EXPOSURE.* \r\n\t\t  FROM cdm.DEVICE_EXPOSURE\r\n\t\t WHERE DEVICE_EXPOSURE.person_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.DEVICE_EXPOSURE\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":35,"QUERY_TEXT":"\r\n/*********\r\nFIELD_IS_NOT_NULLABLE\r\n\r\nFor each table, check that the fields in which IS_NOT_NULLABLE == TRUE, there are no null values in that field.\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = DEVICE_EXPOSURE\r\ncdmFieldName = device_concept_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'DEVICE_EXPOSURE.device_concept_id' AS violating_field, DEVICE_EXPOSURE.* \r\n\t\t  FROM cdm.DEVICE_EXPOSURE\r\n\t\t WHERE DEVICE_EXPOSURE.device_concept_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.DEVICE_EXPOSURE\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":36,"QUERY_TEXT":"\r\n/*********\r\nFIELD_IS_NOT_NULLABLE\r\n\r\nFor each table, check that the fields in which IS_NOT_NULLABLE == TRUE, there are no null values in that field.\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = DEVICE_EXPOSURE\r\ncdmFieldName = device_exposure_start_date\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'DEVICE_EXPOSURE.device_exposure_start_date' AS violating_field, DEVICE_EXPOSURE.* \r\n\t\t  FROM cdm.DEVICE_EXPOSURE\r\n\t\t WHERE DEVICE_EXPOSURE.device_exposure_start_date IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.DEVICE_EXPOSURE\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":37,"QUERY_TEXT":"\r\n/*********\r\nFIELD_IS_NOT_NULLABLE\r\n\r\nFor each table, check that the fields in which IS_NOT_NULLABLE == TRUE, there are no null values in that field.\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = DEVICE_EXPOSURE\r\ncdmFieldName = device_type_concept_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'DEVICE_EXPOSURE.device_type_concept_id' AS violating_field, DEVICE_EXPOSURE.* \r\n\t\t  FROM cdm.DEVICE_EXPOSURE\r\n\t\t WHERE DEVICE_EXPOSURE.device_type_concept_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.DEVICE_EXPOSURE\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":38,"QUERY_TEXT":"\r\n/*********\r\nFIELD_IS_NOT_NULLABLE\r\n\r\nFor each table, check that the fields in which IS_NOT_NULLABLE == TRUE, there are no null values in that field.\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = MEASUREMENT\r\ncdmFieldName = measurement_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'MEASUREMENT.measurement_id' AS violating_field, MEASUREMENT.* \r\n\t\t  FROM cdm.MEASUREMENT\r\n\t\t WHERE MEASUREMENT.measurement_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.MEASUREMENT\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":39,"QUERY_TEXT":"\r\n/*********\r\nFIELD_IS_NOT_NULLABLE\r\n\r\nFor each table, check that the fields in which IS_NOT_NULLABLE == TRUE, there are no null values in that field.\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = MEASUREMENT\r\ncdmFieldName = person_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'MEASUREMENT.person_id' AS violating_field, MEASUREMENT.* \r\n\t\t  FROM cdm.MEASUREMENT\r\n\t\t WHERE MEASUREMENT.person_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.MEASUREMENT\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":40,"QUERY_TEXT":"\r\n/*********\r\nFIELD_IS_NOT_NULLABLE\r\n\r\nFor each table, check that the fields in which IS_NOT_NULLABLE == TRUE, there are no null values in that field.\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = MEASUREMENT\r\ncdmFieldName = measurement_concept_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'MEASUREMENT.measurement_concept_id' AS violating_field, MEASUREMENT.* \r\n\t\t  FROM cdm.MEASUREMENT\r\n\t\t WHERE MEASUREMENT.measurement_concept_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.MEASUREMENT\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":41,"QUERY_TEXT":"\r\n/*********\r\nFIELD_IS_NOT_NULLABLE\r\n\r\nFor each table, check that the fields in which IS_NOT_NULLABLE == TRUE, there are no null values in that field.\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = MEASUREMENT\r\ncdmFieldName = measurement_date\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'MEASUREMENT.measurement_date' AS violating_field, MEASUREMENT.* \r\n\t\t  FROM cdm.MEASUREMENT\r\n\t\t WHERE MEASUREMENT.measurement_date IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.MEASUREMENT\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":42,"QUERY_TEXT":"\r\n/*********\r\nFIELD_IS_NOT_NULLABLE\r\n\r\nFor each table, check that the fields in which IS_NOT_NULLABLE == TRUE, there are no null values in that field.\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = MEASUREMENT\r\ncdmFieldName = measurement_type_concept_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'MEASUREMENT.measurement_type_concept_id' AS violating_field, MEASUREMENT.* \r\n\t\t  FROM cdm.MEASUREMENT\r\n\t\t WHERE MEASUREMENT.measurement_type_concept_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.MEASUREMENT\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":43,"QUERY_TEXT":"\r\n/*********\r\nFIELD_IS_NOT_NULLABLE\r\n\r\nFor each table, check that the fields in which IS_NOT_NULLABLE == TRUE, there are no null values in that field.\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = VISIT_DETAIL\r\ncdmFieldName = visit_detail_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'VISIT_DETAIL.visit_detail_id' AS violating_field, VISIT_DETAIL.* \r\n\t\t  FROM cdm.VISIT_DETAIL\r\n\t\t WHERE VISIT_DETAIL.visit_detail_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.VISIT_DETAIL\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":44,"QUERY_TEXT":"\r\n/*********\r\nFIELD_IS_NOT_NULLABLE\r\n\r\nFor each table, check that the fields in which IS_NOT_NULLABLE == TRUE, there are no null values in that field.\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = VISIT_DETAIL\r\ncdmFieldName = person_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'VISIT_DETAIL.person_id' AS violating_field, VISIT_DETAIL.* \r\n\t\t  FROM cdm.VISIT_DETAIL\r\n\t\t WHERE VISIT_DETAIL.person_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.VISIT_DETAIL\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":45,"QUERY_TEXT":"\r\n/*********\r\nFIELD_IS_NOT_NULLABLE\r\n\r\nFor each table, check that the fields in which IS_NOT_NULLABLE == TRUE, there are no null values in that field.\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = VISIT_DETAIL\r\ncdmFieldName = visit_detail_concept_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'VISIT_DETAIL.visit_detail_concept_id' AS violating_field, VISIT_DETAIL.* \r\n\t\t  FROM cdm.VISIT_DETAIL\r\n\t\t WHERE VISIT_DETAIL.visit_detail_concept_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.VISIT_DETAIL\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":46,"QUERY_TEXT":"\r\n/*********\r\nFIELD_IS_NOT_NULLABLE\r\n\r\nFor each table, check that the fields in which IS_NOT_NULLABLE == TRUE, there are no null values in that field.\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = VISIT_DETAIL\r\ncdmFieldName = visit_detail_start_date\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'VISIT_DETAIL.visit_detail_start_date' AS violating_field, VISIT_DETAIL.* \r\n\t\t  FROM cdm.VISIT_DETAIL\r\n\t\t WHERE VISIT_DETAIL.visit_detail_start_date IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.VISIT_DETAIL\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":47,"QUERY_TEXT":"\r\n/*********\r\nFIELD_IS_NOT_NULLABLE\r\n\r\nFor each table, check that the fields in which IS_NOT_NULLABLE == TRUE, there are no null values in that field.\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = VISIT_DETAIL\r\ncdmFieldName = visit_detail_end_date\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'VISIT_DETAIL.visit_detail_end_date' AS violating_field, VISIT_DETAIL.* \r\n\t\t  FROM cdm.VISIT_DETAIL\r\n\t\t WHERE VISIT_DETAIL.visit_detail_end_date IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.VISIT_DETAIL\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":48,"QUERY_TEXT":"\r\n/*********\r\nFIELD_IS_NOT_NULLABLE\r\n\r\nFor each table, check that the fields in which IS_NOT_NULLABLE == TRUE, there are no null values in that field.\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = VISIT_DETAIL\r\ncdmFieldName = visit_detail_type_concept_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'VISIT_DETAIL.visit_detail_type_concept_id' AS violating_field, VISIT_DETAIL.* \r\n\t\t  FROM cdm.VISIT_DETAIL\r\n\t\t WHERE VISIT_DETAIL.visit_detail_type_concept_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.VISIT_DETAIL\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":49,"QUERY_TEXT":"\r\n/*********\r\nFIELD_IS_NOT_NULLABLE\r\n\r\nFor each table, check that the fields in which IS_NOT_NULLABLE == TRUE, there are no null values in that field.\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = VISIT_DETAIL\r\ncdmFieldName = visit_occurrence_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'VISIT_DETAIL.visit_occurrence_id' AS violating_field, VISIT_DETAIL.* \r\n\t\t  FROM cdm.VISIT_DETAIL\r\n\t\t WHERE VISIT_DETAIL.visit_occurrence_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.VISIT_DETAIL\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":50,"QUERY_TEXT":"\r\n/*********\r\nFIELD_IS_NOT_NULLABLE\r\n\r\nFor each table, check that the fields in which IS_NOT_NULLABLE == TRUE, there are no null values in that field.\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = NOTE\r\ncdmFieldName = note_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'NOTE.note_id' AS violating_field, NOTE.* \r\n\t\t  FROM cdm.NOTE\r\n\t\t WHERE NOTE.note_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.NOTE\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":51,"QUERY_TEXT":"\r\n/*********\r\nFIELD_IS_NOT_NULLABLE\r\n\r\nFor each table, check that the fields in which IS_NOT_NULLABLE == TRUE, there are no null values in that field.\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = NOTE\r\ncdmFieldName = person_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'NOTE.person_id' AS violating_field, NOTE.* \r\n\t\t  FROM cdm.NOTE\r\n\t\t WHERE NOTE.person_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.NOTE\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":52,"QUERY_TEXT":"\r\n/*********\r\nFIELD_IS_NOT_NULLABLE\r\n\r\nFor each table, check that the fields in which IS_NOT_NULLABLE == TRUE, there are no null values in that field.\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = NOTE\r\ncdmFieldName = note_date\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'NOTE.note_date' AS violating_field, NOTE.* \r\n\t\t  FROM cdm.NOTE\r\n\t\t WHERE NOTE.note_date IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.NOTE\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":53,"QUERY_TEXT":"\r\n/*********\r\nFIELD_IS_NOT_NULLABLE\r\n\r\nFor each table, check that the fields in which IS_NOT_NULLABLE == TRUE, there are no null values in that field.\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = NOTE\r\ncdmFieldName = note_type_concept_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'NOTE.note_type_concept_id' AS violating_field, NOTE.* \r\n\t\t  FROM cdm.NOTE\r\n\t\t WHERE NOTE.note_type_concept_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.NOTE\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":54,"QUERY_TEXT":"\r\n/*********\r\nFIELD_IS_NOT_NULLABLE\r\n\r\nFor each table, check that the fields in which IS_NOT_NULLABLE == TRUE, there are no null values in that field.\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = NOTE\r\ncdmFieldName = note_class_concept_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'NOTE.note_class_concept_id' AS violating_field, NOTE.* \r\n\t\t  FROM cdm.NOTE\r\n\t\t WHERE NOTE.note_class_concept_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.NOTE\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":55,"QUERY_TEXT":"\r\n/*********\r\nFIELD_IS_NOT_NULLABLE\r\n\r\nFor each table, check that the fields in which IS_NOT_NULLABLE == TRUE, there are no null values in that field.\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = NOTE\r\ncdmFieldName = note_text\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'NOTE.note_text' AS violating_field, NOTE.* \r\n\t\t  FROM cdm.NOTE\r\n\t\t WHERE NOTE.note_text IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.NOTE\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":56,"QUERY_TEXT":"\r\n/*********\r\nFIELD_IS_NOT_NULLABLE\r\n\r\nFor each table, check that the fields in which IS_NOT_NULLABLE == TRUE, there are no null values in that field.\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = NOTE\r\ncdmFieldName = encoding_concept_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'NOTE.encoding_concept_id' AS violating_field, NOTE.* \r\n\t\t  FROM cdm.NOTE\r\n\t\t WHERE NOTE.encoding_concept_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.NOTE\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":57,"QUERY_TEXT":"\r\n/*********\r\nFIELD_IS_NOT_NULLABLE\r\n\r\nFor each table, check that the fields in which IS_NOT_NULLABLE == TRUE, there are no null values in that field.\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = NOTE\r\ncdmFieldName = language_concept_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'NOTE.language_concept_id' AS violating_field, NOTE.* \r\n\t\t  FROM cdm.NOTE\r\n\t\t WHERE NOTE.language_concept_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.NOTE\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":58,"QUERY_TEXT":"\r\n/*********\r\nFIELD_IS_NOT_NULLABLE\r\n\r\nFor each table, check that the fields in which IS_NOT_NULLABLE == TRUE, there are no null values in that field.\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = NOTE_NLP\r\ncdmFieldName = note_nlp_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'NOTE_NLP.note_nlp_id' AS violating_field, NOTE_NLP.* \r\n\t\t  FROM cdm.NOTE_NLP\r\n\t\t WHERE NOTE_NLP.note_nlp_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.NOTE_NLP\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":59,"QUERY_TEXT":"\r\n/*********\r\nFIELD_IS_NOT_NULLABLE\r\n\r\nFor each table, check that the fields in which IS_NOT_NULLABLE == TRUE, there are no null values in that field.\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = NOTE_NLP\r\ncdmFieldName = note_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'NOTE_NLP.note_id' AS violating_field, NOTE_NLP.* \r\n\t\t  FROM cdm.NOTE_NLP\r\n\t\t WHERE NOTE_NLP.note_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.NOTE_NLP\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":60,"QUERY_TEXT":"\r\n/*********\r\nFIELD_IS_NOT_NULLABLE\r\n\r\nFor each table, check that the fields in which IS_NOT_NULLABLE == TRUE, there are no null values in that field.\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = NOTE_NLP\r\ncdmFieldName = lexical_variant\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'NOTE_NLP.lexical_variant' AS violating_field, NOTE_NLP.* \r\n\t\t  FROM cdm.NOTE_NLP\r\n\t\t WHERE NOTE_NLP.lexical_variant IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.NOTE_NLP\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":61,"QUERY_TEXT":"\r\n/*********\r\nFIELD_IS_NOT_NULLABLE\r\n\r\nFor each table, check that the fields in which IS_NOT_NULLABLE == TRUE, there are no null values in that field.\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = NOTE_NLP\r\ncdmFieldName = nlp_date\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'NOTE_NLP.nlp_date' AS violating_field, NOTE_NLP.* \r\n\t\t  FROM cdm.NOTE_NLP\r\n\t\t WHERE NOTE_NLP.nlp_date IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.NOTE_NLP\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":62,"QUERY_TEXT":"\r\n/*********\r\nFIELD_IS_NOT_NULLABLE\r\n\r\nFor each table, check that the fields in which IS_NOT_NULLABLE == TRUE, there are no null values in that field.\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = OBSERVATION\r\ncdmFieldName = observation_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'OBSERVATION.observation_id' AS violating_field, OBSERVATION.* \r\n\t\t  FROM cdm.OBSERVATION\r\n\t\t WHERE OBSERVATION.observation_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.OBSERVATION\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":63,"QUERY_TEXT":"\r\n/*********\r\nFIELD_IS_NOT_NULLABLE\r\n\r\nFor each table, check that the fields in which IS_NOT_NULLABLE == TRUE, there are no null values in that field.\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = OBSERVATION\r\ncdmFieldName = person_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'OBSERVATION.person_id' AS violating_field, OBSERVATION.* \r\n\t\t  FROM cdm.OBSERVATION\r\n\t\t WHERE OBSERVATION.person_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.OBSERVATION\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":64,"QUERY_TEXT":"\r\n/*********\r\nFIELD_IS_NOT_NULLABLE\r\n\r\nFor each table, check that the fields in which IS_NOT_NULLABLE == TRUE, there are no null values in that field.\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = OBSERVATION\r\ncdmFieldName = observation_concept_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'OBSERVATION.observation_concept_id' AS violating_field, OBSERVATION.* \r\n\t\t  FROM cdm.OBSERVATION\r\n\t\t WHERE OBSERVATION.observation_concept_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.OBSERVATION\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":65,"QUERY_TEXT":"\r\n/*********\r\nFIELD_IS_NOT_NULLABLE\r\n\r\nFor each table, check that the fields in which IS_NOT_NULLABLE == TRUE, there are no null values in that field.\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = OBSERVATION\r\ncdmFieldName = observation_date\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'OBSERVATION.observation_date' AS violating_field, OBSERVATION.* \r\n\t\t  FROM cdm.OBSERVATION\r\n\t\t WHERE OBSERVATION.observation_date IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.OBSERVATION\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":66,"QUERY_TEXT":"\r\n/*********\r\nFIELD_IS_NOT_NULLABLE\r\n\r\nFor each table, check that the fields in which IS_NOT_NULLABLE == TRUE, there are no null values in that field.\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = OBSERVATION\r\ncdmFieldName = observation_type_concept_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'OBSERVATION.observation_type_concept_id' AS violating_field, OBSERVATION.* \r\n\t\t  FROM cdm.OBSERVATION\r\n\t\t WHERE OBSERVATION.observation_type_concept_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.OBSERVATION\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":67,"QUERY_TEXT":"\r\n/*********\r\nFIELD_IS_NOT_NULLABLE\r\n\r\nFor each table, check that the fields in which IS_NOT_NULLABLE == TRUE, there are no null values in that field.\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = SPECIMEN\r\ncdmFieldName = specimen_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'SPECIMEN.specimen_id' AS violating_field, SPECIMEN.* \r\n\t\t  FROM cdm.SPECIMEN\r\n\t\t WHERE SPECIMEN.specimen_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.SPECIMEN\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":68,"QUERY_TEXT":"\r\n/*********\r\nFIELD_IS_NOT_NULLABLE\r\n\r\nFor each table, check that the fields in which IS_NOT_NULLABLE == TRUE, there are no null values in that field.\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = SPECIMEN\r\ncdmFieldName = person_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'SPECIMEN.person_id' AS violating_field, SPECIMEN.* \r\n\t\t  FROM cdm.SPECIMEN\r\n\t\t WHERE SPECIMEN.person_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.SPECIMEN\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":69,"QUERY_TEXT":"\r\n/*********\r\nFIELD_IS_NOT_NULLABLE\r\n\r\nFor each table, check that the fields in which IS_NOT_NULLABLE == TRUE, there are no null values in that field.\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = SPECIMEN\r\ncdmFieldName = specimen_concept_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'SPECIMEN.specimen_concept_id' AS violating_field, SPECIMEN.* \r\n\t\t  FROM cdm.SPECIMEN\r\n\t\t WHERE SPECIMEN.specimen_concept_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.SPECIMEN\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":70,"QUERY_TEXT":"\r\n/*********\r\nFIELD_IS_NOT_NULLABLE\r\n\r\nFor each table, check that the fields in which IS_NOT_NULLABLE == TRUE, there are no null values in that field.\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = SPECIMEN\r\ncdmFieldName = specimen_type_concept_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'SPECIMEN.specimen_type_concept_id' AS violating_field, SPECIMEN.* \r\n\t\t  FROM cdm.SPECIMEN\r\n\t\t WHERE SPECIMEN.specimen_type_concept_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.SPECIMEN\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":71,"QUERY_TEXT":"\r\n/*********\r\nFIELD_IS_NOT_NULLABLE\r\n\r\nFor each table, check that the fields in which IS_NOT_NULLABLE == TRUE, there are no null values in that field.\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = SPECIMEN\r\ncdmFieldName = specimen_date\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'SPECIMEN.specimen_date' AS violating_field, SPECIMEN.* \r\n\t\t  FROM cdm.SPECIMEN\r\n\t\t WHERE SPECIMEN.specimen_date IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.SPECIMEN\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":72,"QUERY_TEXT":"\r\n/*********\r\nFIELD_IS_NOT_NULLABLE\r\n\r\nFor each table, check that the fields in which IS_NOT_NULLABLE == TRUE, there are no null values in that field.\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = FACT_RELATIONSHIP\r\ncdmFieldName = domain_concept_id_1\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'FACT_RELATIONSHIP.domain_concept_id_1' AS violating_field, FACT_RELATIONSHIP.* \r\n\t\t  FROM cdm.FACT_RELATIONSHIP\r\n\t\t WHERE FACT_RELATIONSHIP.domain_concept_id_1 IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.FACT_RELATIONSHIP\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":73,"QUERY_TEXT":"\r\n/*********\r\nFIELD_IS_NOT_NULLABLE\r\n\r\nFor each table, check that the fields in which IS_NOT_NULLABLE == TRUE, there are no null values in that field.\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = FACT_RELATIONSHIP\r\ncdmFieldName = fact_id_1\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'FACT_RELATIONSHIP.fact_id_1' AS violating_field, FACT_RELATIONSHIP.* \r\n\t\t  FROM cdm.FACT_RELATIONSHIP\r\n\t\t WHERE FACT_RELATIONSHIP.fact_id_1 IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.FACT_RELATIONSHIP\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":74,"QUERY_TEXT":"\r\n/*********\r\nFIELD_IS_NOT_NULLABLE\r\n\r\nFor each table, check that the fields in which IS_NOT_NULLABLE == TRUE, there are no null values in that field.\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = FACT_RELATIONSHIP\r\ncdmFieldName = domain_concept_id_2\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'FACT_RELATIONSHIP.domain_concept_id_2' AS violating_field, FACT_RELATIONSHIP.* \r\n\t\t  FROM cdm.FACT_RELATIONSHIP\r\n\t\t WHERE FACT_RELATIONSHIP.domain_concept_id_2 IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.FACT_RELATIONSHIP\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":75,"QUERY_TEXT":"\r\n/*********\r\nFIELD_IS_NOT_NULLABLE\r\n\r\nFor each table, check that the fields in which IS_NOT_NULLABLE == TRUE, there are no null values in that field.\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = FACT_RELATIONSHIP\r\ncdmFieldName = fact_id_2\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'FACT_RELATIONSHIP.fact_id_2' AS violating_field, FACT_RELATIONSHIP.* \r\n\t\t  FROM cdm.FACT_RELATIONSHIP\r\n\t\t WHERE FACT_RELATIONSHIP.fact_id_2 IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.FACT_RELATIONSHIP\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":76,"QUERY_TEXT":"\r\n/*********\r\nFIELD_IS_NOT_NULLABLE\r\n\r\nFor each table, check that the fields in which IS_NOT_NULLABLE == TRUE, there are no null values in that field.\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = FACT_RELATIONSHIP\r\ncdmFieldName = relationship_concept_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'FACT_RELATIONSHIP.relationship_concept_id' AS violating_field, FACT_RELATIONSHIP.* \r\n\t\t  FROM cdm.FACT_RELATIONSHIP\r\n\t\t WHERE FACT_RELATIONSHIP.relationship_concept_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.FACT_RELATIONSHIP\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":77,"QUERY_TEXT":"\r\n/*********\r\nFIELD_IS_NOT_NULLABLE\r\n\r\nFor each table, check that the fields in which IS_NOT_NULLABLE == TRUE, there are no null values in that field.\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = LOCATION\r\ncdmFieldName = location_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'LOCATION.location_id' AS violating_field, LOCATION.* \r\n\t\t  FROM cdm.LOCATION\r\n\t\t WHERE LOCATION.location_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.LOCATION\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":78,"QUERY_TEXT":"\r\n/*********\r\nFIELD_IS_NOT_NULLABLE\r\n\r\nFor each table, check that the fields in which IS_NOT_NULLABLE == TRUE, there are no null values in that field.\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = CARE_SITE\r\ncdmFieldName = care_site_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'CARE_SITE.care_site_id' AS violating_field, CARE_SITE.* \r\n\t\t  FROM cdm.CARE_SITE\r\n\t\t WHERE CARE_SITE.care_site_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.CARE_SITE\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":79,"QUERY_TEXT":"\r\n/*********\r\nFIELD_IS_NOT_NULLABLE\r\n\r\nFor each table, check that the fields in which IS_NOT_NULLABLE == TRUE, there are no null values in that field.\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = PROVIDER\r\ncdmFieldName = provider_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'PROVIDER.provider_id' AS violating_field, PROVIDER.* \r\n\t\t  FROM cdm.PROVIDER\r\n\t\t WHERE PROVIDER.provider_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.PROVIDER\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":80,"QUERY_TEXT":"\r\n/*********\r\nFIELD_IS_NOT_NULLABLE\r\n\r\nFor each table, check that the fields in which IS_NOT_NULLABLE == TRUE, there are no null values in that field.\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = PAYER_PLAN_PERIOD\r\ncdmFieldName = payer_plan_period_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'PAYER_PLAN_PERIOD.payer_plan_period_id' AS violating_field, PAYER_PLAN_PERIOD.* \r\n\t\t  FROM cdm.PAYER_PLAN_PERIOD\r\n\t\t WHERE PAYER_PLAN_PERIOD.payer_plan_period_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.PAYER_PLAN_PERIOD\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":81,"QUERY_TEXT":"\r\n/*********\r\nFIELD_IS_NOT_NULLABLE\r\n\r\nFor each table, check that the fields in which IS_NOT_NULLABLE == TRUE, there are no null values in that field.\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = PAYER_PLAN_PERIOD\r\ncdmFieldName = person_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'PAYER_PLAN_PERIOD.person_id' AS violating_field, PAYER_PLAN_PERIOD.* \r\n\t\t  FROM cdm.PAYER_PLAN_PERIOD\r\n\t\t WHERE PAYER_PLAN_PERIOD.person_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.PAYER_PLAN_PERIOD\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":82,"QUERY_TEXT":"\r\n/*********\r\nFIELD_IS_NOT_NULLABLE\r\n\r\nFor each table, check that the fields in which IS_NOT_NULLABLE == TRUE, there are no null values in that field.\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = PAYER_PLAN_PERIOD\r\ncdmFieldName = payer_plan_period_start_date\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'PAYER_PLAN_PERIOD.payer_plan_period_start_date' AS violating_field, PAYER_PLAN_PERIOD.* \r\n\t\t  FROM cdm.PAYER_PLAN_PERIOD\r\n\t\t WHERE PAYER_PLAN_PERIOD.payer_plan_period_start_date IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.PAYER_PLAN_PERIOD\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":83,"QUERY_TEXT":"\r\n/*********\r\nFIELD_IS_NOT_NULLABLE\r\n\r\nFor each table, check that the fields in which IS_NOT_NULLABLE == TRUE, there are no null values in that field.\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = PAYER_PLAN_PERIOD\r\ncdmFieldName = payer_plan_period_end_date\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'PAYER_PLAN_PERIOD.payer_plan_period_end_date' AS violating_field, PAYER_PLAN_PERIOD.* \r\n\t\t  FROM cdm.PAYER_PLAN_PERIOD\r\n\t\t WHERE PAYER_PLAN_PERIOD.payer_plan_period_end_date IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.PAYER_PLAN_PERIOD\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":84,"QUERY_TEXT":"\r\n/*********\r\nFIELD_IS_NOT_NULLABLE\r\n\r\nFor each table, check that the fields in which IS_NOT_NULLABLE == TRUE, there are no null values in that field.\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = COST\r\ncdmFieldName = cost_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'COST.cost_id' AS violating_field, COST.* \r\n\t\t  FROM cdm.COST\r\n\t\t WHERE COST.cost_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.COST\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":85,"QUERY_TEXT":"\r\n/*********\r\nFIELD_IS_NOT_NULLABLE\r\n\r\nFor each table, check that the fields in which IS_NOT_NULLABLE == TRUE, there are no null values in that field.\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = COST\r\ncdmFieldName = cost_event_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'COST.cost_event_id' AS violating_field, COST.* \r\n\t\t  FROM cdm.COST\r\n\t\t WHERE COST.cost_event_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.COST\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":86,"QUERY_TEXT":"\r\n/*********\r\nFIELD_IS_NOT_NULLABLE\r\n\r\nFor each table, check that the fields in which IS_NOT_NULLABLE == TRUE, there are no null values in that field.\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = COST\r\ncdmFieldName = cost_domain_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'COST.cost_domain_id' AS violating_field, COST.* \r\n\t\t  FROM cdm.COST\r\n\t\t WHERE COST.cost_domain_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.COST\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":87,"QUERY_TEXT":"\r\n/*********\r\nFIELD_IS_NOT_NULLABLE\r\n\r\nFor each table, check that the fields in which IS_NOT_NULLABLE == TRUE, there are no null values in that field.\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = COST\r\ncdmFieldName = cost_type_concept_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'COST.cost_type_concept_id' AS violating_field, COST.* \r\n\t\t  FROM cdm.COST\r\n\t\t WHERE COST.cost_type_concept_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.COST\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":88,"QUERY_TEXT":"\r\n/*********\r\nFIELD_IS_NOT_NULLABLE\r\n\r\nFor each table, check that the fields in which IS_NOT_NULLABLE == TRUE, there are no null values in that field.\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = DRUG_ERA\r\ncdmFieldName = drug_era_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'DRUG_ERA.drug_era_id' AS violating_field, DRUG_ERA.* \r\n\t\t  FROM cdm.DRUG_ERA\r\n\t\t WHERE DRUG_ERA.drug_era_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.DRUG_ERA\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":89,"QUERY_TEXT":"\r\n/*********\r\nFIELD_IS_NOT_NULLABLE\r\n\r\nFor each table, check that the fields in which IS_NOT_NULLABLE == TRUE, there are no null values in that field.\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = DRUG_ERA\r\ncdmFieldName = person_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'DRUG_ERA.person_id' AS violating_field, DRUG_ERA.* \r\n\t\t  FROM cdm.DRUG_ERA\r\n\t\t WHERE DRUG_ERA.person_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.DRUG_ERA\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":90,"QUERY_TEXT":"\r\n/*********\r\nFIELD_IS_NOT_NULLABLE\r\n\r\nFor each table, check that the fields in which IS_NOT_NULLABLE == TRUE, there are no null values in that field.\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = DRUG_ERA\r\ncdmFieldName = drug_concept_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'DRUG_ERA.drug_concept_id' AS violating_field, DRUG_ERA.* \r\n\t\t  FROM cdm.DRUG_ERA\r\n\t\t WHERE DRUG_ERA.drug_concept_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.DRUG_ERA\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":91,"QUERY_TEXT":"\r\n/*********\r\nFIELD_IS_NOT_NULLABLE\r\n\r\nFor each table, check that the fields in which IS_NOT_NULLABLE == TRUE, there are no null values in that field.\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = DRUG_ERA\r\ncdmFieldName = drug_era_start_date\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'DRUG_ERA.drug_era_start_date' AS violating_field, DRUG_ERA.* \r\n\t\t  FROM cdm.DRUG_ERA\r\n\t\t WHERE DRUG_ERA.drug_era_start_date IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.DRUG_ERA\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":92,"QUERY_TEXT":"\r\n/*********\r\nFIELD_IS_NOT_NULLABLE\r\n\r\nFor each table, check that the fields in which IS_NOT_NULLABLE == TRUE, there are no null values in that field.\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = DRUG_ERA\r\ncdmFieldName = drug_era_end_date\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'DRUG_ERA.drug_era_end_date' AS violating_field, DRUG_ERA.* \r\n\t\t  FROM cdm.DRUG_ERA\r\n\t\t WHERE DRUG_ERA.drug_era_end_date IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.DRUG_ERA\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":93,"QUERY_TEXT":"\r\n/*********\r\nFIELD_IS_NOT_NULLABLE\r\n\r\nFor each table, check that the fields in which IS_NOT_NULLABLE == TRUE, there are no null values in that field.\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = DOSE_ERA\r\ncdmFieldName = dose_era_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'DOSE_ERA.dose_era_id' AS violating_field, DOSE_ERA.* \r\n\t\t  FROM cdm.DOSE_ERA\r\n\t\t WHERE DOSE_ERA.dose_era_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.DOSE_ERA\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":94,"QUERY_TEXT":"\r\n/*********\r\nFIELD_IS_NOT_NULLABLE\r\n\r\nFor each table, check that the fields in which IS_NOT_NULLABLE == TRUE, there are no null values in that field.\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = DOSE_ERA\r\ncdmFieldName = person_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'DOSE_ERA.person_id' AS violating_field, DOSE_ERA.* \r\n\t\t  FROM cdm.DOSE_ERA\r\n\t\t WHERE DOSE_ERA.person_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.DOSE_ERA\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":95,"QUERY_TEXT":"\r\n/*********\r\nFIELD_IS_NOT_NULLABLE\r\n\r\nFor each table, check that the fields in which IS_NOT_NULLABLE == TRUE, there are no null values in that field.\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = DOSE_ERA\r\ncdmFieldName = drug_concept_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'DOSE_ERA.drug_concept_id' AS violating_field, DOSE_ERA.* \r\n\t\t  FROM cdm.DOSE_ERA\r\n\t\t WHERE DOSE_ERA.drug_concept_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.DOSE_ERA\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":96,"QUERY_TEXT":"\r\n/*********\r\nFIELD_IS_NOT_NULLABLE\r\n\r\nFor each table, check that the fields in which IS_NOT_NULLABLE == TRUE, there are no null values in that field.\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = DOSE_ERA\r\ncdmFieldName = unit_concept_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'DOSE_ERA.unit_concept_id' AS violating_field, DOSE_ERA.* \r\n\t\t  FROM cdm.DOSE_ERA\r\n\t\t WHERE DOSE_ERA.unit_concept_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.DOSE_ERA\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":97,"QUERY_TEXT":"\r\n/*********\r\nFIELD_IS_NOT_NULLABLE\r\n\r\nFor each table, check that the fields in which IS_NOT_NULLABLE == TRUE, there are no null values in that field.\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = DOSE_ERA\r\ncdmFieldName = dose_value\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'DOSE_ERA.dose_value' AS violating_field, DOSE_ERA.* \r\n\t\t  FROM cdm.DOSE_ERA\r\n\t\t WHERE DOSE_ERA.dose_value IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.DOSE_ERA\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":98,"QUERY_TEXT":"\r\n/*********\r\nFIELD_IS_NOT_NULLABLE\r\n\r\nFor each table, check that the fields in which IS_NOT_NULLABLE == TRUE, there are no null values in that field.\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = DOSE_ERA\r\ncdmFieldName = dose_era_start_date\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'DOSE_ERA.dose_era_start_date' AS violating_field, DOSE_ERA.* \r\n\t\t  FROM cdm.DOSE_ERA\r\n\t\t WHERE DOSE_ERA.dose_era_start_date IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.DOSE_ERA\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":99,"QUERY_TEXT":"\r\n/*********\r\nFIELD_IS_NOT_NULLABLE\r\n\r\nFor each table, check that the fields in which IS_NOT_NULLABLE == TRUE, there are no null values in that field.\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = DOSE_ERA\r\ncdmFieldName = dose_era_end_date\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'DOSE_ERA.dose_era_end_date' AS violating_field, DOSE_ERA.* \r\n\t\t  FROM cdm.DOSE_ERA\r\n\t\t WHERE DOSE_ERA.dose_era_end_date IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.DOSE_ERA\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":100,"QUERY_TEXT":"\r\n/*********\r\nFIELD_IS_NOT_NULLABLE\r\n\r\nFor each table, check that the fields in which IS_NOT_NULLABLE == TRUE, there are no null values in that field.\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = CONDITION_ERA\r\ncdmFieldName = condition_era_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'CONDITION_ERA.condition_era_id' AS violating_field, CONDITION_ERA.* \r\n\t\t  FROM cdm.CONDITION_ERA\r\n\t\t WHERE CONDITION_ERA.condition_era_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.CONDITION_ERA\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":101,"QUERY_TEXT":"\r\n/*********\r\nFIELD_IS_NOT_NULLABLE\r\n\r\nFor each table, check that the fields in which IS_NOT_NULLABLE == TRUE, there are no null values in that field.\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = CONDITION_ERA\r\ncdmFieldName = person_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'CONDITION_ERA.person_id' AS violating_field, CONDITION_ERA.* \r\n\t\t  FROM cdm.CONDITION_ERA\r\n\t\t WHERE CONDITION_ERA.person_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.CONDITION_ERA\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":102,"QUERY_TEXT":"\r\n/*********\r\nFIELD_IS_NOT_NULLABLE\r\n\r\nFor each table, check that the fields in which IS_NOT_NULLABLE == TRUE, there are no null values in that field.\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = CONDITION_ERA\r\ncdmFieldName = condition_concept_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'CONDITION_ERA.condition_concept_id' AS violating_field, CONDITION_ERA.* \r\n\t\t  FROM cdm.CONDITION_ERA\r\n\t\t WHERE CONDITION_ERA.condition_concept_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.CONDITION_ERA\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":103,"QUERY_TEXT":"\r\n/*********\r\nFIELD_IS_NOT_NULLABLE\r\n\r\nFor each table, check that the fields in which IS_NOT_NULLABLE == TRUE, there are no null values in that field.\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = CONDITION_ERA\r\ncdmFieldName = condition_era_start_date\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'CONDITION_ERA.condition_era_start_date' AS violating_field, CONDITION_ERA.* \r\n\t\t  FROM cdm.CONDITION_ERA\r\n\t\t WHERE CONDITION_ERA.condition_era_start_date IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.CONDITION_ERA\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":104,"QUERY_TEXT":"\r\n/*********\r\nFIELD_IS_NOT_NULLABLE\r\n\r\nFor each table, check that the fields in which IS_NOT_NULLABLE == TRUE, there are no null values in that field.\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = CONDITION_ERA\r\ncdmFieldName = condition_era_end_date\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'CONDITION_ERA.condition_era_end_date' AS violating_field, CONDITION_ERA.* \r\n\t\t  FROM cdm.CONDITION_ERA\r\n\t\t WHERE CONDITION_ERA.condition_era_end_date IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.CONDITION_ERA\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":105,"QUERY_TEXT":"\r\n/*********\r\nFIELD_CDM_DATATYPE\r\n\r\nAt a minimum, for each field that is supposed to be an integer, verify it is an integer\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = PERSON\r\ncdmFieldName = person_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'PERSON.person_id' AS violating_field, PERSON.* \r\n\t\t  FROM cdm.PERSON\r\n\t\t WHERE REGEXP_INSTR(PERSON.person_id, '^[\\-\\+]?(\\\\d*\\\\.)?\\\\d+([Ee][\\-\\+]?\\\\d+)?$') = 0\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.PERSON\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":106,"QUERY_TEXT":"\r\n/*********\r\nFIELD_CDM_DATATYPE\r\n\r\nAt a minimum, for each field that is supposed to be an integer, verify it is an integer\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = PERSON\r\ncdmFieldName = gender_concept_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'PERSON.gender_concept_id' AS violating_field, PERSON.* \r\n\t\t  FROM cdm.PERSON\r\n\t\t WHERE REGEXP_INSTR(PERSON.gender_concept_id, '^[\\-\\+]?(\\\\d*\\\\.)?\\\\d+([Ee][\\-\\+]?\\\\d+)?$') = 0\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.PERSON\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":107,"QUERY_TEXT":"\r\n/*********\r\nFIELD_CDM_DATATYPE\r\n\r\nAt a minimum, for each field that is supposed to be an integer, verify it is an integer\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = PERSON\r\ncdmFieldName = year_of_birth\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'PERSON.year_of_birth' AS violating_field, PERSON.* \r\n\t\t  FROM cdm.PERSON\r\n\t\t WHERE REGEXP_INSTR(PERSON.year_of_birth, '^[\\-\\+]?(\\\\d*\\\\.)?\\\\d+([Ee][\\-\\+]?\\\\d+)?$') = 0\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.PERSON\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":108,"QUERY_TEXT":"\r\n/*********\r\nFIELD_CDM_DATATYPE\r\n\r\nAt a minimum, for each field that is supposed to be an integer, verify it is an integer\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = PERSON\r\ncdmFieldName = month_of_birth\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'PERSON.month_of_birth' AS violating_field, PERSON.* \r\n\t\t  FROM cdm.PERSON\r\n\t\t WHERE REGEXP_INSTR(PERSON.month_of_birth, '^[\\-\\+]?(\\\\d*\\\\.)?\\\\d+([Ee][\\-\\+]?\\\\d+)?$') = 0\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.PERSON\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":109,"QUERY_TEXT":"\r\n/*********\r\nFIELD_CDM_DATATYPE\r\n\r\nAt a minimum, for each field that is supposed to be an integer, verify it is an integer\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = PERSON\r\ncdmFieldName = day_of_birth\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'PERSON.day_of_birth' AS violating_field, PERSON.* \r\n\t\t  FROM cdm.PERSON\r\n\t\t WHERE REGEXP_INSTR(PERSON.day_of_birth, '^[\\-\\+]?(\\\\d*\\\\.)?\\\\d+([Ee][\\-\\+]?\\\\d+)?$') = 0\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.PERSON\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":110,"QUERY_TEXT":"\r\n/*********\r\nFIELD_CDM_DATATYPE\r\n\r\nAt a minimum, for each field that is supposed to be an integer, verify it is an integer\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = PERSON\r\ncdmFieldName = race_concept_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'PERSON.race_concept_id' AS violating_field, PERSON.* \r\n\t\t  FROM cdm.PERSON\r\n\t\t WHERE REGEXP_INSTR(PERSON.race_concept_id, '^[\\-\\+]?(\\\\d*\\\\.)?\\\\d+([Ee][\\-\\+]?\\\\d+)?$') = 0\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.PERSON\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":111,"QUERY_TEXT":"\r\n/*********\r\nFIELD_CDM_DATATYPE\r\n\r\nAt a minimum, for each field that is supposed to be an integer, verify it is an integer\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = PERSON\r\ncdmFieldName = ethnicity_concept_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'PERSON.ethnicity_concept_id' AS violating_field, PERSON.* \r\n\t\t  FROM cdm.PERSON\r\n\t\t WHERE REGEXP_INSTR(PERSON.ethnicity_concept_id, '^[\\-\\+]?(\\\\d*\\\\.)?\\\\d+([Ee][\\-\\+]?\\\\d+)?$') = 0\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.PERSON\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":112,"QUERY_TEXT":"\r\n/*********\r\nFIELD_CDM_DATATYPE\r\n\r\nAt a minimum, for each field that is supposed to be an integer, verify it is an integer\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = PERSON\r\ncdmFieldName = location_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'PERSON.location_id' AS violating_field, PERSON.* \r\n\t\t  FROM cdm.PERSON\r\n\t\t WHERE REGEXP_INSTR(PERSON.location_id, '^[\\-\\+]?(\\\\d*\\\\.)?\\\\d+([Ee][\\-\\+]?\\\\d+)?$') = 0\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.PERSON\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":113,"QUERY_TEXT":"\r\n/*********\r\nFIELD_CDM_DATATYPE\r\n\r\nAt a minimum, for each field that is supposed to be an integer, verify it is an integer\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = PERSON\r\ncdmFieldName = provider_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'PERSON.provider_id' AS violating_field, PERSON.* \r\n\t\t  FROM cdm.PERSON\r\n\t\t WHERE REGEXP_INSTR(PERSON.provider_id, '^[\\-\\+]?(\\\\d*\\\\.)?\\\\d+([Ee][\\-\\+]?\\\\d+)?$') = 0\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.PERSON\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":114,"QUERY_TEXT":"\r\n/*********\r\nFIELD_CDM_DATATYPE\r\n\r\nAt a minimum, for each field that is supposed to be an integer, verify it is an integer\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = PERSON\r\ncdmFieldName = care_site_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'PERSON.care_site_id' AS violating_field, PERSON.* \r\n\t\t  FROM cdm.PERSON\r\n\t\t WHERE REGEXP_INSTR(PERSON.care_site_id, '^[\\-\\+]?(\\\\d*\\\\.)?\\\\d+([Ee][\\-\\+]?\\\\d+)?$') = 0\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.PERSON\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":115,"QUERY_TEXT":"\r\n/*********\r\nFIELD_CDM_DATATYPE\r\n\r\nAt a minimum, for each field that is supposed to be an integer, verify it is an integer\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = OBSERVATION_PERIOD\r\ncdmFieldName = observation_period_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'OBSERVATION_PERIOD.observation_period_id' AS violating_field, OBSERVATION_PERIOD.* \r\n\t\t  FROM cdm.OBSERVATION_PERIOD\r\n\t\t WHERE REGEXP_INSTR(OBSERVATION_PERIOD.observation_period_id, '^[\\-\\+]?(\\\\d*\\\\.)?\\\\d+([Ee][\\-\\+]?\\\\d+)?$') = 0\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.OBSERVATION_PERIOD\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":116,"QUERY_TEXT":"\r\n/*********\r\nFIELD_CDM_DATATYPE\r\n\r\nAt a minimum, for each field that is supposed to be an integer, verify it is an integer\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = OBSERVATION_PERIOD\r\ncdmFieldName = person_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'OBSERVATION_PERIOD.person_id' AS violating_field, OBSERVATION_PERIOD.* \r\n\t\t  FROM cdm.OBSERVATION_PERIOD\r\n\t\t WHERE REGEXP_INSTR(OBSERVATION_PERIOD.person_id, '^[\\-\\+]?(\\\\d*\\\\.)?\\\\d+([Ee][\\-\\+]?\\\\d+)?$') = 0\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.OBSERVATION_PERIOD\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":117,"QUERY_TEXT":"\r\n/*********\r\nFIELD_CDM_DATATYPE\r\n\r\nAt a minimum, for each field that is supposed to be an integer, verify it is an integer\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = VISIT_OCCURRENCE\r\ncdmFieldName = visit_occurrence_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'VISIT_OCCURRENCE.visit_occurrence_id' AS violating_field, VISIT_OCCURRENCE.* \r\n\t\t  FROM cdm.VISIT_OCCURRENCE\r\n\t\t WHERE REGEXP_INSTR(VISIT_OCCURRENCE.visit_occurrence_id, '^[\\-\\+]?(\\\\d*\\\\.)?\\\\d+([Ee][\\-\\+]?\\\\d+)?$') = 0\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.VISIT_OCCURRENCE\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":118,"QUERY_TEXT":"\r\n/*********\r\nFIELD_CDM_DATATYPE\r\n\r\nAt a minimum, for each field that is supposed to be an integer, verify it is an integer\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = VISIT_OCCURRENCE\r\ncdmFieldName = person_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'VISIT_OCCURRENCE.person_id' AS violating_field, VISIT_OCCURRENCE.* \r\n\t\t  FROM cdm.VISIT_OCCURRENCE\r\n\t\t WHERE REGEXP_INSTR(VISIT_OCCURRENCE.person_id, '^[\\-\\+]?(\\\\d*\\\\.)?\\\\d+([Ee][\\-\\+]?\\\\d+)?$') = 0\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.VISIT_OCCURRENCE\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":119,"QUERY_TEXT":"\r\n/*********\r\nFIELD_CDM_DATATYPE\r\n\r\nAt a minimum, for each field that is supposed to be an integer, verify it is an integer\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = VISIT_OCCURRENCE\r\ncdmFieldName = visit_concept_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'VISIT_OCCURRENCE.visit_concept_id' AS violating_field, VISIT_OCCURRENCE.* \r\n\t\t  FROM cdm.VISIT_OCCURRENCE\r\n\t\t WHERE REGEXP_INSTR(VISIT_OCCURRENCE.visit_concept_id, '^[\\-\\+]?(\\\\d*\\\\.)?\\\\d+([Ee][\\-\\+]?\\\\d+)?$') = 0\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.VISIT_OCCURRENCE\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":120,"QUERY_TEXT":"\r\n/*********\r\nFIELD_CDM_DATATYPE\r\n\r\nAt a minimum, for each field that is supposed to be an integer, verify it is an integer\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = VISIT_OCCURRENCE\r\ncdmFieldName = provider_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'VISIT_OCCURRENCE.provider_id' AS violating_field, VISIT_OCCURRENCE.* \r\n\t\t  FROM cdm.VISIT_OCCURRENCE\r\n\t\t WHERE REGEXP_INSTR(VISIT_OCCURRENCE.provider_id, '^[\\-\\+]?(\\\\d*\\\\.)?\\\\d+([Ee][\\-\\+]?\\\\d+)?$') = 0\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.VISIT_OCCURRENCE\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":121,"QUERY_TEXT":"\r\n/*********\r\nFIELD_CDM_DATATYPE\r\n\r\nAt a minimum, for each field that is supposed to be an integer, verify it is an integer\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = VISIT_OCCURRENCE\r\ncdmFieldName = care_site_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'VISIT_OCCURRENCE.care_site_id' AS violating_field, VISIT_OCCURRENCE.* \r\n\t\t  FROM cdm.VISIT_OCCURRENCE\r\n\t\t WHERE REGEXP_INSTR(VISIT_OCCURRENCE.care_site_id, '^[\\-\\+]?(\\\\d*\\\\.)?\\\\d+([Ee][\\-\\+]?\\\\d+)?$') = 0\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.VISIT_OCCURRENCE\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":122,"QUERY_TEXT":"\r\n/*********\r\nFIELD_CDM_DATATYPE\r\n\r\nAt a minimum, for each field that is supposed to be an integer, verify it is an integer\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = VISIT_OCCURRENCE\r\ncdmFieldName = visit_source_concept_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'VISIT_OCCURRENCE.visit_source_concept_id' AS violating_field, VISIT_OCCURRENCE.* \r\n\t\t  FROM cdm.VISIT_OCCURRENCE\r\n\t\t WHERE REGEXP_INSTR(VISIT_OCCURRENCE.visit_source_concept_id, '^[\\-\\+]?(\\\\d*\\\\.)?\\\\d+([Ee][\\-\\+]?\\\\d+)?$') = 0\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.VISIT_OCCURRENCE\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":123,"QUERY_TEXT":"\r\n/*********\r\nFIELD_CDM_DATATYPE\r\n\r\nAt a minimum, for each field that is supposed to be an integer, verify it is an integer\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = VISIT_OCCURRENCE\r\ncdmFieldName = admitting_source_concept_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'VISIT_OCCURRENCE.admitting_source_concept_id' AS violating_field, VISIT_OCCURRENCE.* \r\n\t\t  FROM cdm.VISIT_OCCURRENCE\r\n\t\t WHERE REGEXP_INSTR(VISIT_OCCURRENCE.admitting_source_concept_id, '^[\\-\\+]?(\\\\d*\\\\.)?\\\\d+([Ee][\\-\\+]?\\\\d+)?$') = 0\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.VISIT_OCCURRENCE\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":124,"QUERY_TEXT":"\r\n/*********\r\nFIELD_CDM_DATATYPE\r\n\r\nAt a minimum, for each field that is supposed to be an integer, verify it is an integer\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = VISIT_OCCURRENCE\r\ncdmFieldName = discharge_to_concept_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'VISIT_OCCURRENCE.discharge_to_concept_id' AS violating_field, VISIT_OCCURRENCE.* \r\n\t\t  FROM cdm.VISIT_OCCURRENCE\r\n\t\t WHERE REGEXP_INSTR(VISIT_OCCURRENCE.discharge_to_concept_id, '^[\\-\\+]?(\\\\d*\\\\.)?\\\\d+([Ee][\\-\\+]?\\\\d+)?$') = 0\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.VISIT_OCCURRENCE\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":125,"QUERY_TEXT":"\r\n/*********\r\nFIELD_CDM_DATATYPE\r\n\r\nAt a minimum, for each field that is supposed to be an integer, verify it is an integer\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = VISIT_OCCURRENCE\r\ncdmFieldName = preceding_visit_occurrence_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'VISIT_OCCURRENCE.preceding_visit_occurrence_id' AS violating_field, VISIT_OCCURRENCE.* \r\n\t\t  FROM cdm.VISIT_OCCURRENCE\r\n\t\t WHERE REGEXP_INSTR(VISIT_OCCURRENCE.preceding_visit_occurrence_id, '^[\\-\\+]?(\\\\d*\\\\.)?\\\\d+([Ee][\\-\\+]?\\\\d+)?$') = 0\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.VISIT_OCCURRENCE\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":126,"QUERY_TEXT":"\r\n/*********\r\nFIELD_CDM_DATATYPE\r\n\r\nAt a minimum, for each field that is supposed to be an integer, verify it is an integer\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = CONDITION_OCCURRENCE\r\ncdmFieldName = condition_concept_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'CONDITION_OCCURRENCE.condition_concept_id' AS violating_field, CONDITION_OCCURRENCE.* \r\n\t\t  FROM cdm.CONDITION_OCCURRENCE\r\n\t\t WHERE REGEXP_INSTR(CONDITION_OCCURRENCE.condition_concept_id, '^[\\-\\+]?(\\\\d*\\\\.)?\\\\d+([Ee][\\-\\+]?\\\\d+)?$') = 0\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.CONDITION_OCCURRENCE\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":127,"QUERY_TEXT":"\r\n/*********\r\nFIELD_CDM_DATATYPE\r\n\r\nAt a minimum, for each field that is supposed to be an integer, verify it is an integer\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = CONDITION_OCCURRENCE\r\ncdmFieldName = condition_type_concept_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'CONDITION_OCCURRENCE.condition_type_concept_id' AS violating_field, CONDITION_OCCURRENCE.* \r\n\t\t  FROM cdm.CONDITION_OCCURRENCE\r\n\t\t WHERE REGEXP_INSTR(CONDITION_OCCURRENCE.condition_type_concept_id, '^[\\-\\+]?(\\\\d*\\\\.)?\\\\d+([Ee][\\-\\+]?\\\\d+)?$') = 0\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.CONDITION_OCCURRENCE\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":128,"QUERY_TEXT":"\r\n/*********\r\nFIELD_CDM_DATATYPE\r\n\r\nAt a minimum, for each field that is supposed to be an integer, verify it is an integer\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = CONDITION_OCCURRENCE\r\ncdmFieldName = condition_status_concept_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'CONDITION_OCCURRENCE.condition_status_concept_id' AS violating_field, CONDITION_OCCURRENCE.* \r\n\t\t  FROM cdm.CONDITION_OCCURRENCE\r\n\t\t WHERE REGEXP_INSTR(CONDITION_OCCURRENCE.condition_status_concept_id, '^[\\-\\+]?(\\\\d*\\\\.)?\\\\d+([Ee][\\-\\+]?\\\\d+)?$') = 0\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.CONDITION_OCCURRENCE\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":129,"QUERY_TEXT":"\r\n/*********\r\nFIELD_CDM_DATATYPE\r\n\r\nAt a minimum, for each field that is supposed to be an integer, verify it is an integer\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = CONDITION_OCCURRENCE\r\ncdmFieldName = provider_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'CONDITION_OCCURRENCE.provider_id' AS violating_field, CONDITION_OCCURRENCE.* \r\n\t\t  FROM cdm.CONDITION_OCCURRENCE\r\n\t\t WHERE REGEXP_INSTR(CONDITION_OCCURRENCE.provider_id, '^[\\-\\+]?(\\\\d*\\\\.)?\\\\d+([Ee][\\-\\+]?\\\\d+)?$') = 0\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.CONDITION_OCCURRENCE\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":130,"QUERY_TEXT":"\r\n/*********\r\nFIELD_CDM_DATATYPE\r\n\r\nAt a minimum, for each field that is supposed to be an integer, verify it is an integer\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = CONDITION_OCCURRENCE\r\ncdmFieldName = visit_occurrence_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'CONDITION_OCCURRENCE.visit_occurrence_id' AS violating_field, CONDITION_OCCURRENCE.* \r\n\t\t  FROM cdm.CONDITION_OCCURRENCE\r\n\t\t WHERE REGEXP_INSTR(CONDITION_OCCURRENCE.visit_occurrence_id, '^[\\-\\+]?(\\\\d*\\\\.)?\\\\d+([Ee][\\-\\+]?\\\\d+)?$') = 0\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.CONDITION_OCCURRENCE\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":131,"QUERY_TEXT":"\r\n/*********\r\nFIELD_CDM_DATATYPE\r\n\r\nAt a minimum, for each field that is supposed to be an integer, verify it is an integer\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = CONDITION_OCCURRENCE\r\ncdmFieldName = visit_detail_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'CONDITION_OCCURRENCE.visit_detail_id' AS violating_field, CONDITION_OCCURRENCE.* \r\n\t\t  FROM cdm.CONDITION_OCCURRENCE\r\n\t\t WHERE REGEXP_INSTR(CONDITION_OCCURRENCE.visit_detail_id, '^[\\-\\+]?(\\\\d*\\\\.)?\\\\d+([Ee][\\-\\+]?\\\\d+)?$') = 0\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.CONDITION_OCCURRENCE\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":132,"QUERY_TEXT":"\r\n/*********\r\nFIELD_CDM_DATATYPE\r\n\r\nAt a minimum, for each field that is supposed to be an integer, verify it is an integer\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = CONDITION_OCCURRENCE\r\ncdmFieldName = condition_source_concept_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'CONDITION_OCCURRENCE.condition_source_concept_id' AS violating_field, CONDITION_OCCURRENCE.* \r\n\t\t  FROM cdm.CONDITION_OCCURRENCE\r\n\t\t WHERE REGEXP_INSTR(CONDITION_OCCURRENCE.condition_source_concept_id, '^[\\-\\+]?(\\\\d*\\\\.)?\\\\d+([Ee][\\-\\+]?\\\\d+)?$') = 0\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.CONDITION_OCCURRENCE\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":133,"QUERY_TEXT":"\r\n/*********\r\nFIELD_CDM_DATATYPE\r\n\r\nAt a minimum, for each field that is supposed to be an integer, verify it is an integer\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = DRUG_EXPOSURE\r\ncdmFieldName = drug_concept_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'DRUG_EXPOSURE.drug_concept_id' AS violating_field, DRUG_EXPOSURE.* \r\n\t\t  FROM cdm.DRUG_EXPOSURE\r\n\t\t WHERE REGEXP_INSTR(DRUG_EXPOSURE.drug_concept_id, '^[\\-\\+]?(\\\\d*\\\\.)?\\\\d+([Ee][\\-\\+]?\\\\d+)?$') = 0\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.DRUG_EXPOSURE\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":134,"QUERY_TEXT":"\r\n/*********\r\nFIELD_CDM_DATATYPE\r\n\r\nAt a minimum, for each field that is supposed to be an integer, verify it is an integer\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = DRUG_EXPOSURE\r\ncdmFieldName = drug_type_concept_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'DRUG_EXPOSURE.drug_type_concept_id' AS violating_field, DRUG_EXPOSURE.* \r\n\t\t  FROM cdm.DRUG_EXPOSURE\r\n\t\t WHERE REGEXP_INSTR(DRUG_EXPOSURE.drug_type_concept_id, '^[\\-\\+]?(\\\\d*\\\\.)?\\\\d+([Ee][\\-\\+]?\\\\d+)?$') = 0\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.DRUG_EXPOSURE\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":135,"QUERY_TEXT":"\r\n/*********\r\nFIELD_CDM_DATATYPE\r\n\r\nAt a minimum, for each field that is supposed to be an integer, verify it is an integer\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = DRUG_EXPOSURE\r\ncdmFieldName = refills\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'DRUG_EXPOSURE.refills' AS violating_field, DRUG_EXPOSURE.* \r\n\t\t  FROM cdm.DRUG_EXPOSURE\r\n\t\t WHERE REGEXP_INSTR(DRUG_EXPOSURE.refills, '^[\\-\\+]?(\\\\d*\\\\.)?\\\\d+([Ee][\\-\\+]?\\\\d+)?$') = 0\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.DRUG_EXPOSURE\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":136,"QUERY_TEXT":"\r\n/*********\r\nFIELD_CDM_DATATYPE\r\n\r\nAt a minimum, for each field that is supposed to be an integer, verify it is an integer\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = DRUG_EXPOSURE\r\ncdmFieldName = days_supply\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'DRUG_EXPOSURE.days_supply' AS violating_field, DRUG_EXPOSURE.* \r\n\t\t  FROM cdm.DRUG_EXPOSURE\r\n\t\t WHERE REGEXP_INSTR(DRUG_EXPOSURE.days_supply, '^[\\-\\+]?(\\\\d*\\\\.)?\\\\d+([Ee][\\-\\+]?\\\\d+)?$') = 0\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.DRUG_EXPOSURE\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":137,"QUERY_TEXT":"\r\n/*********\r\nFIELD_CDM_DATATYPE\r\n\r\nAt a minimum, for each field that is supposed to be an integer, verify it is an integer\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = DRUG_EXPOSURE\r\ncdmFieldName = route_concept_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'DRUG_EXPOSURE.route_concept_id' AS violating_field, DRUG_EXPOSURE.* \r\n\t\t  FROM cdm.DRUG_EXPOSURE\r\n\t\t WHERE REGEXP_INSTR(DRUG_EXPOSURE.route_concept_id, '^[\\-\\+]?(\\\\d*\\\\.)?\\\\d+([Ee][\\-\\+]?\\\\d+)?$') = 0\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.DRUG_EXPOSURE\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":138,"QUERY_TEXT":"\r\n/*********\r\nFIELD_CDM_DATATYPE\r\n\r\nAt a minimum, for each field that is supposed to be an integer, verify it is an integer\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = DRUG_EXPOSURE\r\ncdmFieldName = provider_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'DRUG_EXPOSURE.provider_id' AS violating_field, DRUG_EXPOSURE.* \r\n\t\t  FROM cdm.DRUG_EXPOSURE\r\n\t\t WHERE REGEXP_INSTR(DRUG_EXPOSURE.provider_id, '^[\\-\\+]?(\\\\d*\\\\.)?\\\\d+([Ee][\\-\\+]?\\\\d+)?$') = 0\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.DRUG_EXPOSURE\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":139,"QUERY_TEXT":"\r\n/*********\r\nFIELD_CDM_DATATYPE\r\n\r\nAt a minimum, for each field that is supposed to be an integer, verify it is an integer\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = DRUG_EXPOSURE\r\ncdmFieldName = visit_occurrence_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'DRUG_EXPOSURE.visit_occurrence_id' AS violating_field, DRUG_EXPOSURE.* \r\n\t\t  FROM cdm.DRUG_EXPOSURE\r\n\t\t WHERE REGEXP_INSTR(DRUG_EXPOSURE.visit_occurrence_id, '^[\\-\\+]?(\\\\d*\\\\.)?\\\\d+([Ee][\\-\\+]?\\\\d+)?$') = 0\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.DRUG_EXPOSURE\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":140,"QUERY_TEXT":"\r\n/*********\r\nFIELD_CDM_DATATYPE\r\n\r\nAt a minimum, for each field that is supposed to be an integer, verify it is an integer\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = DRUG_EXPOSURE\r\ncdmFieldName = visit_detail_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'DRUG_EXPOSURE.visit_detail_id' AS violating_field, DRUG_EXPOSURE.* \r\n\t\t  FROM cdm.DRUG_EXPOSURE\r\n\t\t WHERE REGEXP_INSTR(DRUG_EXPOSURE.visit_detail_id, '^[\\-\\+]?(\\\\d*\\\\.)?\\\\d+([Ee][\\-\\+]?\\\\d+)?$') = 0\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.DRUG_EXPOSURE\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":141,"QUERY_TEXT":"\r\n/*********\r\nFIELD_CDM_DATATYPE\r\n\r\nAt a minimum, for each field that is supposed to be an integer, verify it is an integer\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = DRUG_EXPOSURE\r\ncdmFieldName = drug_source_concept_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'DRUG_EXPOSURE.drug_source_concept_id' AS violating_field, DRUG_EXPOSURE.* \r\n\t\t  FROM cdm.DRUG_EXPOSURE\r\n\t\t WHERE REGEXP_INSTR(DRUG_EXPOSURE.drug_source_concept_id, '^[\\-\\+]?(\\\\d*\\\\.)?\\\\d+([Ee][\\-\\+]?\\\\d+)?$') = 0\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.DRUG_EXPOSURE\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":142,"QUERY_TEXT":"\r\n/*********\r\nFIELD_CDM_DATATYPE\r\n\r\nAt a minimum, for each field that is supposed to be an integer, verify it is an integer\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = PROCEDURE_OCCURRENCE\r\ncdmFieldName = procedure_occurrence_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'PROCEDURE_OCCURRENCE.procedure_occurrence_id' AS violating_field, PROCEDURE_OCCURRENCE.* \r\n\t\t  FROM cdm.PROCEDURE_OCCURRENCE\r\n\t\t WHERE REGEXP_INSTR(PROCEDURE_OCCURRENCE.procedure_occurrence_id, '^[\\-\\+]?(\\\\d*\\\\.)?\\\\d+([Ee][\\-\\+]?\\\\d+)?$') = 0\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.PROCEDURE_OCCURRENCE\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":143,"QUERY_TEXT":"\r\n/*********\r\nFIELD_CDM_DATATYPE\r\n\r\nAt a minimum, for each field that is supposed to be an integer, verify it is an integer\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = PROCEDURE_OCCURRENCE\r\ncdmFieldName = person_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'PROCEDURE_OCCURRENCE.person_id' AS violating_field, PROCEDURE_OCCURRENCE.* \r\n\t\t  FROM cdm.PROCEDURE_OCCURRENCE\r\n\t\t WHERE REGEXP_INSTR(PROCEDURE_OCCURRENCE.person_id, '^[\\-\\+]?(\\\\d*\\\\.)?\\\\d+([Ee][\\-\\+]?\\\\d+)?$') = 0\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.PROCEDURE_OCCURRENCE\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":144,"QUERY_TEXT":"\r\n/*********\r\nFIELD_CDM_DATATYPE\r\n\r\nAt a minimum, for each field that is supposed to be an integer, verify it is an integer\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = PROCEDURE_OCCURRENCE\r\ncdmFieldName = procedure_concept_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'PROCEDURE_OCCURRENCE.procedure_concept_id' AS violating_field, PROCEDURE_OCCURRENCE.* \r\n\t\t  FROM cdm.PROCEDURE_OCCURRENCE\r\n\t\t WHERE REGEXP_INSTR(PROCEDURE_OCCURRENCE.procedure_concept_id, '^[\\-\\+]?(\\\\d*\\\\.)?\\\\d+([Ee][\\-\\+]?\\\\d+)?$') = 0\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.PROCEDURE_OCCURRENCE\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":145,"QUERY_TEXT":"\r\n/*********\r\nFIELD_CDM_DATATYPE\r\n\r\nAt a minimum, for each field that is supposed to be an integer, verify it is an integer\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = PROCEDURE_OCCURRENCE\r\ncdmFieldName = procedure_type_concept_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'PROCEDURE_OCCURRENCE.procedure_type_concept_id' AS violating_field, PROCEDURE_OCCURRENCE.* \r\n\t\t  FROM cdm.PROCEDURE_OCCURRENCE\r\n\t\t WHERE REGEXP_INSTR(PROCEDURE_OCCURRENCE.procedure_type_concept_id, '^[\\-\\+]?(\\\\d*\\\\.)?\\\\d+([Ee][\\-\\+]?\\\\d+)?$') = 0\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.PROCEDURE_OCCURRENCE\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":146,"QUERY_TEXT":"\r\n/*********\r\nFIELD_CDM_DATATYPE\r\n\r\nAt a minimum, for each field that is supposed to be an integer, verify it is an integer\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = PROCEDURE_OCCURRENCE\r\ncdmFieldName = modifier_concept_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'PROCEDURE_OCCURRENCE.modifier_concept_id' AS violating_field, PROCEDURE_OCCURRENCE.* \r\n\t\t  FROM cdm.PROCEDURE_OCCURRENCE\r\n\t\t WHERE REGEXP_INSTR(PROCEDURE_OCCURRENCE.modifier_concept_id, '^[\\-\\+]?(\\\\d*\\\\.)?\\\\d+([Ee][\\-\\+]?\\\\d+)?$') = 0\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.PROCEDURE_OCCURRENCE\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":147,"QUERY_TEXT":"\r\n/*********\r\nFIELD_CDM_DATATYPE\r\n\r\nAt a minimum, for each field that is supposed to be an integer, verify it is an integer\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = PROCEDURE_OCCURRENCE\r\ncdmFieldName = quantity\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'PROCEDURE_OCCURRENCE.quantity' AS violating_field, PROCEDURE_OCCURRENCE.* \r\n\t\t  FROM cdm.PROCEDURE_OCCURRENCE\r\n\t\t WHERE REGEXP_INSTR(PROCEDURE_OCCURRENCE.quantity, '^[\\-\\+]?(\\\\d*\\\\.)?\\\\d+([Ee][\\-\\+]?\\\\d+)?$') = 0\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.PROCEDURE_OCCURRENCE\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":148,"QUERY_TEXT":"\r\n/*********\r\nFIELD_CDM_DATATYPE\r\n\r\nAt a minimum, for each field that is supposed to be an integer, verify it is an integer\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = PROCEDURE_OCCURRENCE\r\ncdmFieldName = provider_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'PROCEDURE_OCCURRENCE.provider_id' AS violating_field, PROCEDURE_OCCURRENCE.* \r\n\t\t  FROM cdm.PROCEDURE_OCCURRENCE\r\n\t\t WHERE REGEXP_INSTR(PROCEDURE_OCCURRENCE.provider_id, '^[\\-\\+]?(\\\\d*\\\\.)?\\\\d+([Ee][\\-\\+]?\\\\d+)?$') = 0\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.PROCEDURE_OCCURRENCE\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":149,"QUERY_TEXT":"\r\n/*********\r\nFIELD_CDM_DATATYPE\r\n\r\nAt a minimum, for each field that is supposed to be an integer, verify it is an integer\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = PROCEDURE_OCCURRENCE\r\ncdmFieldName = visit_occurrence_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'PROCEDURE_OCCURRENCE.visit_occurrence_id' AS violating_field, PROCEDURE_OCCURRENCE.* \r\n\t\t  FROM cdm.PROCEDURE_OCCURRENCE\r\n\t\t WHERE REGEXP_INSTR(PROCEDURE_OCCURRENCE.visit_occurrence_id, '^[\\-\\+]?(\\\\d*\\\\.)?\\\\d+([Ee][\\-\\+]?\\\\d+)?$') = 0\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.PROCEDURE_OCCURRENCE\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":150,"QUERY_TEXT":"\r\n/*********\r\nFIELD_CDM_DATATYPE\r\n\r\nAt a minimum, for each field that is supposed to be an integer, verify it is an integer\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = PROCEDURE_OCCURRENCE\r\ncdmFieldName = visit_detail_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'PROCEDURE_OCCURRENCE.visit_detail_id' AS violating_field, PROCEDURE_OCCURRENCE.* \r\n\t\t  FROM cdm.PROCEDURE_OCCURRENCE\r\n\t\t WHERE REGEXP_INSTR(PROCEDURE_OCCURRENCE.visit_detail_id, '^[\\-\\+]?(\\\\d*\\\\.)?\\\\d+([Ee][\\-\\+]?\\\\d+)?$') = 0\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.PROCEDURE_OCCURRENCE\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":151,"QUERY_TEXT":"\r\n/*********\r\nFIELD_CDM_DATATYPE\r\n\r\nAt a minimum, for each field that is supposed to be an integer, verify it is an integer\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = PROCEDURE_OCCURRENCE\r\ncdmFieldName = procedure_source_concept_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'PROCEDURE_OCCURRENCE.procedure_source_concept_id' AS violating_field, PROCEDURE_OCCURRENCE.* \r\n\t\t  FROM cdm.PROCEDURE_OCCURRENCE\r\n\t\t WHERE REGEXP_INSTR(PROCEDURE_OCCURRENCE.procedure_source_concept_id, '^[\\-\\+]?(\\\\d*\\\\.)?\\\\d+([Ee][\\-\\+]?\\\\d+)?$') = 0\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.PROCEDURE_OCCURRENCE\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":152,"QUERY_TEXT":"\r\n/*********\r\nFIELD_CDM_DATATYPE\r\n\r\nAt a minimum, for each field that is supposed to be an integer, verify it is an integer\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = DEVICE_EXPOSURE\r\ncdmFieldName = device_concept_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'DEVICE_EXPOSURE.device_concept_id' AS violating_field, DEVICE_EXPOSURE.* \r\n\t\t  FROM cdm.DEVICE_EXPOSURE\r\n\t\t WHERE REGEXP_INSTR(DEVICE_EXPOSURE.device_concept_id, '^[\\-\\+]?(\\\\d*\\\\.)?\\\\d+([Ee][\\-\\+]?\\\\d+)?$') = 0\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.DEVICE_EXPOSURE\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":153,"QUERY_TEXT":"\r\n/*********\r\nFIELD_CDM_DATATYPE\r\n\r\nAt a minimum, for each field that is supposed to be an integer, verify it is an integer\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = DEVICE_EXPOSURE\r\ncdmFieldName = device_type_concept_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'DEVICE_EXPOSURE.device_type_concept_id' AS violating_field, DEVICE_EXPOSURE.* \r\n\t\t  FROM cdm.DEVICE_EXPOSURE\r\n\t\t WHERE REGEXP_INSTR(DEVICE_EXPOSURE.device_type_concept_id, '^[\\-\\+]?(\\\\d*\\\\.)?\\\\d+([Ee][\\-\\+]?\\\\d+)?$') = 0\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.DEVICE_EXPOSURE\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":154,"QUERY_TEXT":"\r\n/*********\r\nFIELD_CDM_DATATYPE\r\n\r\nAt a minimum, for each field that is supposed to be an integer, verify it is an integer\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = DEVICE_EXPOSURE\r\ncdmFieldName = quantity\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'DEVICE_EXPOSURE.quantity' AS violating_field, DEVICE_EXPOSURE.* \r\n\t\t  FROM cdm.DEVICE_EXPOSURE\r\n\t\t WHERE REGEXP_INSTR(DEVICE_EXPOSURE.quantity, '^[\\-\\+]?(\\\\d*\\\\.)?\\\\d+([Ee][\\-\\+]?\\\\d+)?$') = 0\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.DEVICE_EXPOSURE\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":155,"QUERY_TEXT":"\r\n/*********\r\nFIELD_CDM_DATATYPE\r\n\r\nAt a minimum, for each field that is supposed to be an integer, verify it is an integer\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = DEVICE_EXPOSURE\r\ncdmFieldName = provider_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'DEVICE_EXPOSURE.provider_id' AS violating_field, DEVICE_EXPOSURE.* \r\n\t\t  FROM cdm.DEVICE_EXPOSURE\r\n\t\t WHERE REGEXP_INSTR(DEVICE_EXPOSURE.provider_id, '^[\\-\\+]?(\\\\d*\\\\.)?\\\\d+([Ee][\\-\\+]?\\\\d+)?$') = 0\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.DEVICE_EXPOSURE\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":156,"QUERY_TEXT":"\r\n/*********\r\nFIELD_CDM_DATATYPE\r\n\r\nAt a minimum, for each field that is supposed to be an integer, verify it is an integer\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = DEVICE_EXPOSURE\r\ncdmFieldName = visit_occurrence_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'DEVICE_EXPOSURE.visit_occurrence_id' AS violating_field, DEVICE_EXPOSURE.* \r\n\t\t  FROM cdm.DEVICE_EXPOSURE\r\n\t\t WHERE REGEXP_INSTR(DEVICE_EXPOSURE.visit_occurrence_id, '^[\\-\\+]?(\\\\d*\\\\.)?\\\\d+([Ee][\\-\\+]?\\\\d+)?$') = 0\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.DEVICE_EXPOSURE\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":157,"QUERY_TEXT":"\r\n/*********\r\nFIELD_CDM_DATATYPE\r\n\r\nAt a minimum, for each field that is supposed to be an integer, verify it is an integer\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = DEVICE_EXPOSURE\r\ncdmFieldName = visit_detail_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'DEVICE_EXPOSURE.visit_detail_id' AS violating_field, DEVICE_EXPOSURE.* \r\n\t\t  FROM cdm.DEVICE_EXPOSURE\r\n\t\t WHERE REGEXP_INSTR(DEVICE_EXPOSURE.visit_detail_id, '^[\\-\\+]?(\\\\d*\\\\.)?\\\\d+([Ee][\\-\\+]?\\\\d+)?$') = 0\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.DEVICE_EXPOSURE\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":158,"QUERY_TEXT":"\r\n/*********\r\nFIELD_CDM_DATATYPE\r\n\r\nAt a minimum, for each field that is supposed to be an integer, verify it is an integer\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = DEVICE_EXPOSURE\r\ncdmFieldName = device_source_concept_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'DEVICE_EXPOSURE.device_source_concept_id' AS violating_field, DEVICE_EXPOSURE.* \r\n\t\t  FROM cdm.DEVICE_EXPOSURE\r\n\t\t WHERE REGEXP_INSTR(DEVICE_EXPOSURE.device_source_concept_id, '^[\\-\\+]?(\\\\d*\\\\.)?\\\\d+([Ee][\\-\\+]?\\\\d+)?$') = 0\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.DEVICE_EXPOSURE\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":159,"QUERY_TEXT":"\r\n/*********\r\nFIELD_CDM_DATATYPE\r\n\r\nAt a minimum, for each field that is supposed to be an integer, verify it is an integer\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = MEASUREMENT\r\ncdmFieldName = measurement_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'MEASUREMENT.measurement_id' AS violating_field, MEASUREMENT.* \r\n\t\t  FROM cdm.MEASUREMENT\r\n\t\t WHERE REGEXP_INSTR(MEASUREMENT.measurement_id, '^[\\-\\+]?(\\\\d*\\\\.)?\\\\d+([Ee][\\-\\+]?\\\\d+)?$') = 0\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.MEASUREMENT\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":160,"QUERY_TEXT":"\r\n/*********\r\nFIELD_CDM_DATATYPE\r\n\r\nAt a minimum, for each field that is supposed to be an integer, verify it is an integer\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = MEASUREMENT\r\ncdmFieldName = person_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'MEASUREMENT.person_id' AS violating_field, MEASUREMENT.* \r\n\t\t  FROM cdm.MEASUREMENT\r\n\t\t WHERE REGEXP_INSTR(MEASUREMENT.person_id, '^[\\-\\+]?(\\\\d*\\\\.)?\\\\d+([Ee][\\-\\+]?\\\\d+)?$') = 0\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.MEASUREMENT\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":161,"QUERY_TEXT":"\r\n/*********\r\nFIELD_CDM_DATATYPE\r\n\r\nAt a minimum, for each field that is supposed to be an integer, verify it is an integer\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = MEASUREMENT\r\ncdmFieldName = measurement_concept_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'MEASUREMENT.measurement_concept_id' AS violating_field, MEASUREMENT.* \r\n\t\t  FROM cdm.MEASUREMENT\r\n\t\t WHERE REGEXP_INSTR(MEASUREMENT.measurement_concept_id, '^[\\-\\+]?(\\\\d*\\\\.)?\\\\d+([Ee][\\-\\+]?\\\\d+)?$') = 0\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.MEASUREMENT\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":162,"QUERY_TEXT":"\r\n/*********\r\nFIELD_CDM_DATATYPE\r\n\r\nAt a minimum, for each field that is supposed to be an integer, verify it is an integer\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = MEASUREMENT\r\ncdmFieldName = measurement_type_concept_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'MEASUREMENT.measurement_type_concept_id' AS violating_field, MEASUREMENT.* \r\n\t\t  FROM cdm.MEASUREMENT\r\n\t\t WHERE REGEXP_INSTR(MEASUREMENT.measurement_type_concept_id, '^[\\-\\+]?(\\\\d*\\\\.)?\\\\d+([Ee][\\-\\+]?\\\\d+)?$') = 0\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.MEASUREMENT\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":163,"QUERY_TEXT":"\r\n/*********\r\nFIELD_CDM_DATATYPE\r\n\r\nAt a minimum, for each field that is supposed to be an integer, verify it is an integer\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = MEASUREMENT\r\ncdmFieldName = operator_concept_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'MEASUREMENT.operator_concept_id' AS violating_field, MEASUREMENT.* \r\n\t\t  FROM cdm.MEASUREMENT\r\n\t\t WHERE REGEXP_INSTR(MEASUREMENT.operator_concept_id, '^[\\-\\+]?(\\\\d*\\\\.)?\\\\d+([Ee][\\-\\+]?\\\\d+)?$') = 0\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.MEASUREMENT\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":164,"QUERY_TEXT":"\r\n/*********\r\nFIELD_CDM_DATATYPE\r\n\r\nAt a minimum, for each field that is supposed to be an integer, verify it is an integer\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = MEASUREMENT\r\ncdmFieldName = value_as_concept_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'MEASUREMENT.value_as_concept_id' AS violating_field, MEASUREMENT.* \r\n\t\t  FROM cdm.MEASUREMENT\r\n\t\t WHERE REGEXP_INSTR(MEASUREMENT.value_as_concept_id, '^[\\-\\+]?(\\\\d*\\\\.)?\\\\d+([Ee][\\-\\+]?\\\\d+)?$') = 0\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.MEASUREMENT\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":165,"QUERY_TEXT":"\r\n/*********\r\nFIELD_CDM_DATATYPE\r\n\r\nAt a minimum, for each field that is supposed to be an integer, verify it is an integer\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = MEASUREMENT\r\ncdmFieldName = unit_concept_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'MEASUREMENT.unit_concept_id' AS violating_field, MEASUREMENT.* \r\n\t\t  FROM cdm.MEASUREMENT\r\n\t\t WHERE REGEXP_INSTR(MEASUREMENT.unit_concept_id, '^[\\-\\+]?(\\\\d*\\\\.)?\\\\d+([Ee][\\-\\+]?\\\\d+)?$') = 0\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.MEASUREMENT\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":166,"QUERY_TEXT":"\r\n/*********\r\nFIELD_CDM_DATATYPE\r\n\r\nAt a minimum, for each field that is supposed to be an integer, verify it is an integer\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = MEASUREMENT\r\ncdmFieldName = provider_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'MEASUREMENT.provider_id' AS violating_field, MEASUREMENT.* \r\n\t\t  FROM cdm.MEASUREMENT\r\n\t\t WHERE REGEXP_INSTR(MEASUREMENT.provider_id, '^[\\-\\+]?(\\\\d*\\\\.)?\\\\d+([Ee][\\-\\+]?\\\\d+)?$') = 0\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.MEASUREMENT\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":167,"QUERY_TEXT":"\r\n/*********\r\nFIELD_CDM_DATATYPE\r\n\r\nAt a minimum, for each field that is supposed to be an integer, verify it is an integer\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = MEASUREMENT\r\ncdmFieldName = visit_occurrence_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'MEASUREMENT.visit_occurrence_id' AS violating_field, MEASUREMENT.* \r\n\t\t  FROM cdm.MEASUREMENT\r\n\t\t WHERE REGEXP_INSTR(MEASUREMENT.visit_occurrence_id, '^[\\-\\+]?(\\\\d*\\\\.)?\\\\d+([Ee][\\-\\+]?\\\\d+)?$') = 0\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.MEASUREMENT\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":168,"QUERY_TEXT":"\r\n/*********\r\nFIELD_CDM_DATATYPE\r\n\r\nAt a minimum, for each field that is supposed to be an integer, verify it is an integer\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = MEASUREMENT\r\ncdmFieldName = visit_detail_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'MEASUREMENT.visit_detail_id' AS violating_field, MEASUREMENT.* \r\n\t\t  FROM cdm.MEASUREMENT\r\n\t\t WHERE REGEXP_INSTR(MEASUREMENT.visit_detail_id, '^[\\-\\+]?(\\\\d*\\\\.)?\\\\d+([Ee][\\-\\+]?\\\\d+)?$') = 0\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.MEASUREMENT\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":169,"QUERY_TEXT":"\r\n/*********\r\nFIELD_CDM_DATATYPE\r\n\r\nAt a minimum, for each field that is supposed to be an integer, verify it is an integer\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = MEASUREMENT\r\ncdmFieldName = measurement_source_concept_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'MEASUREMENT.measurement_source_concept_id' AS violating_field, MEASUREMENT.* \r\n\t\t  FROM cdm.MEASUREMENT\r\n\t\t WHERE REGEXP_INSTR(MEASUREMENT.measurement_source_concept_id, '^[\\-\\+]?(\\\\d*\\\\.)?\\\\d+([Ee][\\-\\+]?\\\\d+)?$') = 0\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.MEASUREMENT\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":170,"QUERY_TEXT":"\r\n/*********\r\nFIELD_CDM_DATATYPE\r\n\r\nAt a minimum, for each field that is supposed to be an integer, verify it is an integer\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = VISIT_DETAIL\r\ncdmFieldName = visit_detail_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'VISIT_DETAIL.visit_detail_id' AS violating_field, VISIT_DETAIL.* \r\n\t\t  FROM cdm.VISIT_DETAIL\r\n\t\t WHERE REGEXP_INSTR(VISIT_DETAIL.visit_detail_id, '^[\\-\\+]?(\\\\d*\\\\.)?\\\\d+([Ee][\\-\\+]?\\\\d+)?$') = 0\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.VISIT_DETAIL\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":171,"QUERY_TEXT":"\r\n/*********\r\nFIELD_CDM_DATATYPE\r\n\r\nAt a minimum, for each field that is supposed to be an integer, verify it is an integer\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = VISIT_DETAIL\r\ncdmFieldName = person_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'VISIT_DETAIL.person_id' AS violating_field, VISIT_DETAIL.* \r\n\t\t  FROM cdm.VISIT_DETAIL\r\n\t\t WHERE REGEXP_INSTR(VISIT_DETAIL.person_id, '^[\\-\\+]?(\\\\d*\\\\.)?\\\\d+([Ee][\\-\\+]?\\\\d+)?$') = 0\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.VISIT_DETAIL\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":172,"QUERY_TEXT":"\r\n/*********\r\nFIELD_CDM_DATATYPE\r\n\r\nAt a minimum, for each field that is supposed to be an integer, verify it is an integer\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = VISIT_DETAIL\r\ncdmFieldName = visit_detail_concept_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'VISIT_DETAIL.visit_detail_concept_id' AS violating_field, VISIT_DETAIL.* \r\n\t\t  FROM cdm.VISIT_DETAIL\r\n\t\t WHERE REGEXP_INSTR(VISIT_DETAIL.visit_detail_concept_id, '^[\\-\\+]?(\\\\d*\\\\.)?\\\\d+([Ee][\\-\\+]?\\\\d+)?$') = 0\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.VISIT_DETAIL\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":173,"QUERY_TEXT":"\r\n/*********\r\nFIELD_CDM_DATATYPE\r\n\r\nAt a minimum, for each field that is supposed to be an integer, verify it is an integer\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = VISIT_DETAIL\r\ncdmFieldName = provider_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'VISIT_DETAIL.provider_id' AS violating_field, VISIT_DETAIL.* \r\n\t\t  FROM cdm.VISIT_DETAIL\r\n\t\t WHERE REGEXP_INSTR(VISIT_DETAIL.provider_id, '^[\\-\\+]?(\\\\d*\\\\.)?\\\\d+([Ee][\\-\\+]?\\\\d+)?$') = 0\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.VISIT_DETAIL\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":174,"QUERY_TEXT":"\r\n/*********\r\nFIELD_CDM_DATATYPE\r\n\r\nAt a minimum, for each field that is supposed to be an integer, verify it is an integer\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = VISIT_DETAIL\r\ncdmFieldName = care_site_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'VISIT_DETAIL.care_site_id' AS violating_field, VISIT_DETAIL.* \r\n\t\t  FROM cdm.VISIT_DETAIL\r\n\t\t WHERE REGEXP_INSTR(VISIT_DETAIL.care_site_id, '^[\\-\\+]?(\\\\d*\\\\.)?\\\\d+([Ee][\\-\\+]?\\\\d+)?$') = 0\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.VISIT_DETAIL\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":175,"QUERY_TEXT":"\r\n/*********\r\nFIELD_CDM_DATATYPE\r\n\r\nAt a minimum, for each field that is supposed to be an integer, verify it is an integer\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = NOTE\r\ncdmFieldName = note_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'NOTE.note_id' AS violating_field, NOTE.* \r\n\t\t  FROM cdm.NOTE\r\n\t\t WHERE REGEXP_INSTR(NOTE.note_id, '^[\\-\\+]?(\\\\d*\\\\.)?\\\\d+([Ee][\\-\\+]?\\\\d+)?$') = 0\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.NOTE\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":176,"QUERY_TEXT":"\r\n/*********\r\nFIELD_CDM_DATATYPE\r\n\r\nAt a minimum, for each field that is supposed to be an integer, verify it is an integer\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = NOTE\r\ncdmFieldName = person_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'NOTE.person_id' AS violating_field, NOTE.* \r\n\t\t  FROM cdm.NOTE\r\n\t\t WHERE REGEXP_INSTR(NOTE.person_id, '^[\\-\\+]?(\\\\d*\\\\.)?\\\\d+([Ee][\\-\\+]?\\\\d+)?$') = 0\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.NOTE\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":177,"QUERY_TEXT":"\r\n/*********\r\nFIELD_CDM_DATATYPE\r\n\r\nAt a minimum, for each field that is supposed to be an integer, verify it is an integer\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = NOTE\r\ncdmFieldName = note_type_concept_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'NOTE.note_type_concept_id' AS violating_field, NOTE.* \r\n\t\t  FROM cdm.NOTE\r\n\t\t WHERE REGEXP_INSTR(NOTE.note_type_concept_id, '^[\\-\\+]?(\\\\d*\\\\.)?\\\\d+([Ee][\\-\\+]?\\\\d+)?$') = 0\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.NOTE\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":178,"QUERY_TEXT":"\r\n/*********\r\nFIELD_CDM_DATATYPE\r\n\r\nAt a minimum, for each field that is supposed to be an integer, verify it is an integer\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = NOTE\r\ncdmFieldName = note_class_concept_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'NOTE.note_class_concept_id' AS violating_field, NOTE.* \r\n\t\t  FROM cdm.NOTE\r\n\t\t WHERE REGEXP_INSTR(NOTE.note_class_concept_id, '^[\\-\\+]?(\\\\d*\\\\.)?\\\\d+([Ee][\\-\\+]?\\\\d+)?$') = 0\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.NOTE\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":179,"QUERY_TEXT":"\r\n/*********\r\nFIELD_CDM_DATATYPE\r\n\r\nAt a minimum, for each field that is supposed to be an integer, verify it is an integer\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = NOTE\r\ncdmFieldName = encoding_concept_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'NOTE.encoding_concept_id' AS violating_field, NOTE.* \r\n\t\t  FROM cdm.NOTE\r\n\t\t WHERE REGEXP_INSTR(NOTE.encoding_concept_id, '^[\\-\\+]?(\\\\d*\\\\.)?\\\\d+([Ee][\\-\\+]?\\\\d+)?$') = 0\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.NOTE\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":180,"QUERY_TEXT":"\r\n/*********\r\nFIELD_CDM_DATATYPE\r\n\r\nAt a minimum, for each field that is supposed to be an integer, verify it is an integer\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = NOTE\r\ncdmFieldName = language_concept_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'NOTE.language_concept_id' AS violating_field, NOTE.* \r\n\t\t  FROM cdm.NOTE\r\n\t\t WHERE REGEXP_INSTR(NOTE.language_concept_id, '^[\\-\\+]?(\\\\d*\\\\.)?\\\\d+([Ee][\\-\\+]?\\\\d+)?$') = 0\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.NOTE\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":181,"QUERY_TEXT":"\r\n/*********\r\nFIELD_CDM_DATATYPE\r\n\r\nAt a minimum, for each field that is supposed to be an integer, verify it is an integer\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = NOTE\r\ncdmFieldName = provider_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'NOTE.provider_id' AS violating_field, NOTE.* \r\n\t\t  FROM cdm.NOTE\r\n\t\t WHERE REGEXP_INSTR(NOTE.provider_id, '^[\\-\\+]?(\\\\d*\\\\.)?\\\\d+([Ee][\\-\\+]?\\\\d+)?$') = 0\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.NOTE\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":182,"QUERY_TEXT":"\r\n/*********\r\nFIELD_CDM_DATATYPE\r\n\r\nAt a minimum, for each field that is supposed to be an integer, verify it is an integer\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = NOTE\r\ncdmFieldName = visit_occurrence_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'NOTE.visit_occurrence_id' AS violating_field, NOTE.* \r\n\t\t  FROM cdm.NOTE\r\n\t\t WHERE REGEXP_INSTR(NOTE.visit_occurrence_id, '^[\\-\\+]?(\\\\d*\\\\.)?\\\\d+([Ee][\\-\\+]?\\\\d+)?$') = 0\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.NOTE\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":183,"QUERY_TEXT":"\r\n/*********\r\nFIELD_CDM_DATATYPE\r\n\r\nAt a minimum, for each field that is supposed to be an integer, verify it is an integer\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = NOTE\r\ncdmFieldName = visit_detail_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'NOTE.visit_detail_id' AS violating_field, NOTE.* \r\n\t\t  FROM cdm.NOTE\r\n\t\t WHERE REGEXP_INSTR(NOTE.visit_detail_id, '^[\\-\\+]?(\\\\d*\\\\.)?\\\\d+([Ee][\\-\\+]?\\\\d+)?$') = 0\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.NOTE\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":184,"QUERY_TEXT":"\r\n/*********\r\nFIELD_CDM_DATATYPE\r\n\r\nAt a minimum, for each field that is supposed to be an integer, verify it is an integer\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = NOTE_NLP\r\ncdmFieldName = note_nlp_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'NOTE_NLP.note_nlp_id' AS violating_field, NOTE_NLP.* \r\n\t\t  FROM cdm.NOTE_NLP\r\n\t\t WHERE REGEXP_INSTR(NOTE_NLP.note_nlp_id, '^[\\-\\+]?(\\\\d*\\\\.)?\\\\d+([Ee][\\-\\+]?\\\\d+)?$') = 0\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.NOTE_NLP\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":185,"QUERY_TEXT":"\r\n/*********\r\nFIELD_CDM_DATATYPE\r\n\r\nAt a minimum, for each field that is supposed to be an integer, verify it is an integer\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = NOTE_NLP\r\ncdmFieldName = note_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'NOTE_NLP.note_id' AS violating_field, NOTE_NLP.* \r\n\t\t  FROM cdm.NOTE_NLP\r\n\t\t WHERE REGEXP_INSTR(NOTE_NLP.note_id, '^[\\-\\+]?(\\\\d*\\\\.)?\\\\d+([Ee][\\-\\+]?\\\\d+)?$') = 0\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.NOTE_NLP\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":186,"QUERY_TEXT":"\r\n/*********\r\nFIELD_CDM_DATATYPE\r\n\r\nAt a minimum, for each field that is supposed to be an integer, verify it is an integer\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = NOTE_NLP\r\ncdmFieldName = section_concept_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'NOTE_NLP.section_concept_id' AS violating_field, NOTE_NLP.* \r\n\t\t  FROM cdm.NOTE_NLP\r\n\t\t WHERE REGEXP_INSTR(NOTE_NLP.section_concept_id, '^[\\-\\+]?(\\\\d*\\\\.)?\\\\d+([Ee][\\-\\+]?\\\\d+)?$') = 0\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.NOTE_NLP\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":187,"QUERY_TEXT":"\r\n/*********\r\nFIELD_CDM_DATATYPE\r\n\r\nAt a minimum, for each field that is supposed to be an integer, verify it is an integer\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = NOTE_NLP\r\ncdmFieldName = note_nlp_concept_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'NOTE_NLP.note_nlp_concept_id' AS violating_field, NOTE_NLP.* \r\n\t\t  FROM cdm.NOTE_NLP\r\n\t\t WHERE REGEXP_INSTR(NOTE_NLP.note_nlp_concept_id, '^[\\-\\+]?(\\\\d*\\\\.)?\\\\d+([Ee][\\-\\+]?\\\\d+)?$') = 0\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.NOTE_NLP\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":188,"QUERY_TEXT":"\r\n/*********\r\nFIELD_CDM_DATATYPE\r\n\r\nAt a minimum, for each field that is supposed to be an integer, verify it is an integer\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = NOTE_NLP\r\ncdmFieldName = note_nlp_source_concept_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'NOTE_NLP.note_nlp_source_concept_id' AS violating_field, NOTE_NLP.* \r\n\t\t  FROM cdm.NOTE_NLP\r\n\t\t WHERE REGEXP_INSTR(NOTE_NLP.note_nlp_source_concept_id, '^[\\-\\+]?(\\\\d*\\\\.)?\\\\d+([Ee][\\-\\+]?\\\\d+)?$') = 0\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.NOTE_NLP\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":189,"QUERY_TEXT":"\r\n/*********\r\nFIELD_CDM_DATATYPE\r\n\r\nAt a minimum, for each field that is supposed to be an integer, verify it is an integer\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = OBSERVATION\r\ncdmFieldName = observation_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'OBSERVATION.observation_id' AS violating_field, OBSERVATION.* \r\n\t\t  FROM cdm.OBSERVATION\r\n\t\t WHERE REGEXP_INSTR(OBSERVATION.observation_id, '^[\\-\\+]?(\\\\d*\\\\.)?\\\\d+([Ee][\\-\\+]?\\\\d+)?$') = 0\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.OBSERVATION\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":190,"QUERY_TEXT":"\r\n/*********\r\nFIELD_CDM_DATATYPE\r\n\r\nAt a minimum, for each field that is supposed to be an integer, verify it is an integer\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = OBSERVATION\r\ncdmFieldName = person_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'OBSERVATION.person_id' AS violating_field, OBSERVATION.* \r\n\t\t  FROM cdm.OBSERVATION\r\n\t\t WHERE REGEXP_INSTR(OBSERVATION.person_id, '^[\\-\\+]?(\\\\d*\\\\.)?\\\\d+([Ee][\\-\\+]?\\\\d+)?$') = 0\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.OBSERVATION\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":191,"QUERY_TEXT":"\r\n/*********\r\nFIELD_CDM_DATATYPE\r\n\r\nAt a minimum, for each field that is supposed to be an integer, verify it is an integer\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = OBSERVATION\r\ncdmFieldName = observation_concept_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'OBSERVATION.observation_concept_id' AS violating_field, OBSERVATION.* \r\n\t\t  FROM cdm.OBSERVATION\r\n\t\t WHERE REGEXP_INSTR(OBSERVATION.observation_concept_id, '^[\\-\\+]?(\\\\d*\\\\.)?\\\\d+([Ee][\\-\\+]?\\\\d+)?$') = 0\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.OBSERVATION\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":192,"QUERY_TEXT":"\r\n/*********\r\nFIELD_CDM_DATATYPE\r\n\r\nAt a minimum, for each field that is supposed to be an integer, verify it is an integer\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = OBSERVATION\r\ncdmFieldName = observation_type_concept_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'OBSERVATION.observation_type_concept_id' AS violating_field, OBSERVATION.* \r\n\t\t  FROM cdm.OBSERVATION\r\n\t\t WHERE REGEXP_INSTR(OBSERVATION.observation_type_concept_id, '^[\\-\\+]?(\\\\d*\\\\.)?\\\\d+([Ee][\\-\\+]?\\\\d+)?$') = 0\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.OBSERVATION\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":193,"QUERY_TEXT":"\r\n/*********\r\nFIELD_CDM_DATATYPE\r\n\r\nAt a minimum, for each field that is supposed to be an integer, verify it is an integer\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = OBSERVATION\r\ncdmFieldName = qualifier_concept_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'OBSERVATION.qualifier_concept_id' AS violating_field, OBSERVATION.* \r\n\t\t  FROM cdm.OBSERVATION\r\n\t\t WHERE REGEXP_INSTR(OBSERVATION.qualifier_concept_id, '^[\\-\\+]?(\\\\d*\\\\.)?\\\\d+([Ee][\\-\\+]?\\\\d+)?$') = 0\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.OBSERVATION\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":194,"QUERY_TEXT":"\r\n/*********\r\nFIELD_CDM_DATATYPE\r\n\r\nAt a minimum, for each field that is supposed to be an integer, verify it is an integer\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = OBSERVATION\r\ncdmFieldName = unit_concept_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'OBSERVATION.unit_concept_id' AS violating_field, OBSERVATION.* \r\n\t\t  FROM cdm.OBSERVATION\r\n\t\t WHERE REGEXP_INSTR(OBSERVATION.unit_concept_id, '^[\\-\\+]?(\\\\d*\\\\.)?\\\\d+([Ee][\\-\\+]?\\\\d+)?$') = 0\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.OBSERVATION\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":195,"QUERY_TEXT":"\r\n/*********\r\nFIELD_CDM_DATATYPE\r\n\r\nAt a minimum, for each field that is supposed to be an integer, verify it is an integer\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = OBSERVATION\r\ncdmFieldName = provider_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'OBSERVATION.provider_id' AS violating_field, OBSERVATION.* \r\n\t\t  FROM cdm.OBSERVATION\r\n\t\t WHERE REGEXP_INSTR(OBSERVATION.provider_id, '^[\\-\\+]?(\\\\d*\\\\.)?\\\\d+([Ee][\\-\\+]?\\\\d+)?$') = 0\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.OBSERVATION\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":196,"QUERY_TEXT":"\r\n/*********\r\nFIELD_CDM_DATATYPE\r\n\r\nAt a minimum, for each field that is supposed to be an integer, verify it is an integer\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = OBSERVATION\r\ncdmFieldName = visit_occurrence_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'OBSERVATION.visit_occurrence_id' AS violating_field, OBSERVATION.* \r\n\t\t  FROM cdm.OBSERVATION\r\n\t\t WHERE REGEXP_INSTR(OBSERVATION.visit_occurrence_id, '^[\\-\\+]?(\\\\d*\\\\.)?\\\\d+([Ee][\\-\\+]?\\\\d+)?$') = 0\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.OBSERVATION\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":197,"QUERY_TEXT":"\r\n/*********\r\nFIELD_CDM_DATATYPE\r\n\r\nAt a minimum, for each field that is supposed to be an integer, verify it is an integer\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = OBSERVATION\r\ncdmFieldName = visit_detail_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'OBSERVATION.visit_detail_id' AS violating_field, OBSERVATION.* \r\n\t\t  FROM cdm.OBSERVATION\r\n\t\t WHERE REGEXP_INSTR(OBSERVATION.visit_detail_id, '^[\\-\\+]?(\\\\d*\\\\.)?\\\\d+([Ee][\\-\\+]?\\\\d+)?$') = 0\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.OBSERVATION\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":198,"QUERY_TEXT":"\r\n/*********\r\nFIELD_CDM_DATATYPE\r\n\r\nAt a minimum, for each field that is supposed to be an integer, verify it is an integer\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = OBSERVATION\r\ncdmFieldName = observation_source_concept_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'OBSERVATION.observation_source_concept_id' AS violating_field, OBSERVATION.* \r\n\t\t  FROM cdm.OBSERVATION\r\n\t\t WHERE REGEXP_INSTR(OBSERVATION.observation_source_concept_id, '^[\\-\\+]?(\\\\d*\\\\.)?\\\\d+([Ee][\\-\\+]?\\\\d+)?$') = 0\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.OBSERVATION\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":199,"QUERY_TEXT":"\r\n/*********\r\nFIELD_CDM_DATATYPE\r\n\r\nAt a minimum, for each field that is supposed to be an integer, verify it is an integer\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = SPECIMEN\r\ncdmFieldName = specimen_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'SPECIMEN.specimen_id' AS violating_field, SPECIMEN.* \r\n\t\t  FROM cdm.SPECIMEN\r\n\t\t WHERE REGEXP_INSTR(SPECIMEN.specimen_id, '^[\\-\\+]?(\\\\d*\\\\.)?\\\\d+([Ee][\\-\\+]?\\\\d+)?$') = 0\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.SPECIMEN\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":200,"QUERY_TEXT":"\r\n/*********\r\nFIELD_CDM_DATATYPE\r\n\r\nAt a minimum, for each field that is supposed to be an integer, verify it is an integer\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = SPECIMEN\r\ncdmFieldName = person_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'SPECIMEN.person_id' AS violating_field, SPECIMEN.* \r\n\t\t  FROM cdm.SPECIMEN\r\n\t\t WHERE REGEXP_INSTR(SPECIMEN.person_id, '^[\\-\\+]?(\\\\d*\\\\.)?\\\\d+([Ee][\\-\\+]?\\\\d+)?$') = 0\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.SPECIMEN\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":201,"QUERY_TEXT":"\r\n/*********\r\nFIELD_CDM_DATATYPE\r\n\r\nAt a minimum, for each field that is supposed to be an integer, verify it is an integer\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = SPECIMEN\r\ncdmFieldName = specimen_concept_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'SPECIMEN.specimen_concept_id' AS violating_field, SPECIMEN.* \r\n\t\t  FROM cdm.SPECIMEN\r\n\t\t WHERE REGEXP_INSTR(SPECIMEN.specimen_concept_id, '^[\\-\\+]?(\\\\d*\\\\.)?\\\\d+([Ee][\\-\\+]?\\\\d+)?$') = 0\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.SPECIMEN\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":202,"QUERY_TEXT":"\r\n/*********\r\nFIELD_CDM_DATATYPE\r\n\r\nAt a minimum, for each field that is supposed to be an integer, verify it is an integer\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = SPECIMEN\r\ncdmFieldName = specimen_type_concept_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'SPECIMEN.specimen_type_concept_id' AS violating_field, SPECIMEN.* \r\n\t\t  FROM cdm.SPECIMEN\r\n\t\t WHERE REGEXP_INSTR(SPECIMEN.specimen_type_concept_id, '^[\\-\\+]?(\\\\d*\\\\.)?\\\\d+([Ee][\\-\\+]?\\\\d+)?$') = 0\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.SPECIMEN\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":203,"QUERY_TEXT":"\r\n/*********\r\nFIELD_CDM_DATATYPE\r\n\r\nAt a minimum, for each field that is supposed to be an integer, verify it is an integer\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = SPECIMEN\r\ncdmFieldName = unit_concept_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'SPECIMEN.unit_concept_id' AS violating_field, SPECIMEN.* \r\n\t\t  FROM cdm.SPECIMEN\r\n\t\t WHERE REGEXP_INSTR(SPECIMEN.unit_concept_id, '^[\\-\\+]?(\\\\d*\\\\.)?\\\\d+([Ee][\\-\\+]?\\\\d+)?$') = 0\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.SPECIMEN\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":204,"QUERY_TEXT":"\r\n/*********\r\nFIELD_CDM_DATATYPE\r\n\r\nAt a minimum, for each field that is supposed to be an integer, verify it is an integer\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = SPECIMEN\r\ncdmFieldName = anatomic_site_concept_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'SPECIMEN.anatomic_site_concept_id' AS violating_field, SPECIMEN.* \r\n\t\t  FROM cdm.SPECIMEN\r\n\t\t WHERE REGEXP_INSTR(SPECIMEN.anatomic_site_concept_id, '^[\\-\\+]?(\\\\d*\\\\.)?\\\\d+([Ee][\\-\\+]?\\\\d+)?$') = 0\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.SPECIMEN\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":205,"QUERY_TEXT":"\r\n/*********\r\nFIELD_CDM_DATATYPE\r\n\r\nAt a minimum, for each field that is supposed to be an integer, verify it is an integer\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = SPECIMEN\r\ncdmFieldName = disease_status_concept_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'SPECIMEN.disease_status_concept_id' AS violating_field, SPECIMEN.* \r\n\t\t  FROM cdm.SPECIMEN\r\n\t\t WHERE REGEXP_INSTR(SPECIMEN.disease_status_concept_id, '^[\\-\\+]?(\\\\d*\\\\.)?\\\\d+([Ee][\\-\\+]?\\\\d+)?$') = 0\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.SPECIMEN\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":206,"QUERY_TEXT":"\r\n/*********\r\nFIELD_CDM_DATATYPE\r\n\r\nAt a minimum, for each field that is supposed to be an integer, verify it is an integer\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = FACT_RELATIONSHIP\r\ncdmFieldName = domain_concept_id_1\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'FACT_RELATIONSHIP.domain_concept_id_1' AS violating_field, FACT_RELATIONSHIP.* \r\n\t\t  FROM cdm.FACT_RELATIONSHIP\r\n\t\t WHERE REGEXP_INSTR(FACT_RELATIONSHIP.domain_concept_id_1, '^[\\-\\+]?(\\\\d*\\\\.)?\\\\d+([Ee][\\-\\+]?\\\\d+)?$') = 0\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.FACT_RELATIONSHIP\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":207,"QUERY_TEXT":"\r\n/*********\r\nFIELD_CDM_DATATYPE\r\n\r\nAt a minimum, for each field that is supposed to be an integer, verify it is an integer\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = FACT_RELATIONSHIP\r\ncdmFieldName = fact_id_1\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'FACT_RELATIONSHIP.fact_id_1' AS violating_field, FACT_RELATIONSHIP.* \r\n\t\t  FROM cdm.FACT_RELATIONSHIP\r\n\t\t WHERE REGEXP_INSTR(FACT_RELATIONSHIP.fact_id_1, '^[\\-\\+]?(\\\\d*\\\\.)?\\\\d+([Ee][\\-\\+]?\\\\d+)?$') = 0\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.FACT_RELATIONSHIP\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":208,"QUERY_TEXT":"\r\n/*********\r\nFIELD_CDM_DATATYPE\r\n\r\nAt a minimum, for each field that is supposed to be an integer, verify it is an integer\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = FACT_RELATIONSHIP\r\ncdmFieldName = domain_concept_id_2\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'FACT_RELATIONSHIP.domain_concept_id_2' AS violating_field, FACT_RELATIONSHIP.* \r\n\t\t  FROM cdm.FACT_RELATIONSHIP\r\n\t\t WHERE REGEXP_INSTR(FACT_RELATIONSHIP.domain_concept_id_2, '^[\\-\\+]?(\\\\d*\\\\.)?\\\\d+([Ee][\\-\\+]?\\\\d+)?$') = 0\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.FACT_RELATIONSHIP\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":209,"QUERY_TEXT":"\r\n/*********\r\nFIELD_CDM_DATATYPE\r\n\r\nAt a minimum, for each field that is supposed to be an integer, verify it is an integer\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = FACT_RELATIONSHIP\r\ncdmFieldName = fact_id_2\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'FACT_RELATIONSHIP.fact_id_2' AS violating_field, FACT_RELATIONSHIP.* \r\n\t\t  FROM cdm.FACT_RELATIONSHIP\r\n\t\t WHERE REGEXP_INSTR(FACT_RELATIONSHIP.fact_id_2, '^[\\-\\+]?(\\\\d*\\\\.)?\\\\d+([Ee][\\-\\+]?\\\\d+)?$') = 0\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.FACT_RELATIONSHIP\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":210,"QUERY_TEXT":"\r\n/*********\r\nFIELD_CDM_DATATYPE\r\n\r\nAt a minimum, for each field that is supposed to be an integer, verify it is an integer\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = FACT_RELATIONSHIP\r\ncdmFieldName = relationship_concept_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'FACT_RELATIONSHIP.relationship_concept_id' AS violating_field, FACT_RELATIONSHIP.* \r\n\t\t  FROM cdm.FACT_RELATIONSHIP\r\n\t\t WHERE REGEXP_INSTR(FACT_RELATIONSHIP.relationship_concept_id, '^[\\-\\+]?(\\\\d*\\\\.)?\\\\d+([Ee][\\-\\+]?\\\\d+)?$') = 0\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.FACT_RELATIONSHIP\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":211,"QUERY_TEXT":"\r\n/*********\r\nFIELD_CDM_DATATYPE\r\n\r\nAt a minimum, for each field that is supposed to be an integer, verify it is an integer\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = LOCATION\r\ncdmFieldName = location_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'LOCATION.location_id' AS violating_field, LOCATION.* \r\n\t\t  FROM cdm.LOCATION\r\n\t\t WHERE REGEXP_INSTR(LOCATION.location_id, '^[\\-\\+]?(\\\\d*\\\\.)?\\\\d+([Ee][\\-\\+]?\\\\d+)?$') = 0\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.LOCATION\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":212,"QUERY_TEXT":"\r\n/*********\r\nFIELD_CDM_DATATYPE\r\n\r\nAt a minimum, for each field that is supposed to be an integer, verify it is an integer\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = CARE_SITE\r\ncdmFieldName = care_site_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'CARE_SITE.care_site_id' AS violating_field, CARE_SITE.* \r\n\t\t  FROM cdm.CARE_SITE\r\n\t\t WHERE REGEXP_INSTR(CARE_SITE.care_site_id, '^[\\-\\+]?(\\\\d*\\\\.)?\\\\d+([Ee][\\-\\+]?\\\\d+)?$') = 0\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.CARE_SITE\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":213,"QUERY_TEXT":"\r\n/*********\r\nFIELD_CDM_DATATYPE\r\n\r\nAt a minimum, for each field that is supposed to be an integer, verify it is an integer\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = CARE_SITE\r\ncdmFieldName = place_of_service_concept_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'CARE_SITE.place_of_service_concept_id' AS violating_field, CARE_SITE.* \r\n\t\t  FROM cdm.CARE_SITE\r\n\t\t WHERE REGEXP_INSTR(CARE_SITE.place_of_service_concept_id, '^[\\-\\+]?(\\\\d*\\\\.)?\\\\d+([Ee][\\-\\+]?\\\\d+)?$') = 0\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.CARE_SITE\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":214,"QUERY_TEXT":"\r\n/*********\r\nFIELD_CDM_DATATYPE\r\n\r\nAt a minimum, for each field that is supposed to be an integer, verify it is an integer\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = CARE_SITE\r\ncdmFieldName = location_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'CARE_SITE.location_id' AS violating_field, CARE_SITE.* \r\n\t\t  FROM cdm.CARE_SITE\r\n\t\t WHERE REGEXP_INSTR(CARE_SITE.location_id, '^[\\-\\+]?(\\\\d*\\\\.)?\\\\d+([Ee][\\-\\+]?\\\\d+)?$') = 0\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.CARE_SITE\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":215,"QUERY_TEXT":"\r\n/*********\r\nFIELD_CDM_DATATYPE\r\n\r\nAt a minimum, for each field that is supposed to be an integer, verify it is an integer\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = PROVIDER\r\ncdmFieldName = provider_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'PROVIDER.provider_id' AS violating_field, PROVIDER.* \r\n\t\t  FROM cdm.PROVIDER\r\n\t\t WHERE REGEXP_INSTR(PROVIDER.provider_id, '^[\\-\\+]?(\\\\d*\\\\.)?\\\\d+([Ee][\\-\\+]?\\\\d+)?$') = 0\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.PROVIDER\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":216,"QUERY_TEXT":"\r\n/*********\r\nFIELD_CDM_DATATYPE\r\n\r\nAt a minimum, for each field that is supposed to be an integer, verify it is an integer\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = PROVIDER\r\ncdmFieldName = specialty_concept_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'PROVIDER.specialty_concept_id' AS violating_field, PROVIDER.* \r\n\t\t  FROM cdm.PROVIDER\r\n\t\t WHERE REGEXP_INSTR(PROVIDER.specialty_concept_id, '^[\\-\\+]?(\\\\d*\\\\.)?\\\\d+([Ee][\\-\\+]?\\\\d+)?$') = 0\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.PROVIDER\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":217,"QUERY_TEXT":"\r\n/*********\r\nFIELD_CDM_DATATYPE\r\n\r\nAt a minimum, for each field that is supposed to be an integer, verify it is an integer\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = PROVIDER\r\ncdmFieldName = care_site_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'PROVIDER.care_site_id' AS violating_field, PROVIDER.* \r\n\t\t  FROM cdm.PROVIDER\r\n\t\t WHERE REGEXP_INSTR(PROVIDER.care_site_id, '^[\\-\\+]?(\\\\d*\\\\.)?\\\\d+([Ee][\\-\\+]?\\\\d+)?$') = 0\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.PROVIDER\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":218,"QUERY_TEXT":"\r\n/*********\r\nFIELD_CDM_DATATYPE\r\n\r\nAt a minimum, for each field that is supposed to be an integer, verify it is an integer\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = PROVIDER\r\ncdmFieldName = year_of_birth\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'PROVIDER.year_of_birth' AS violating_field, PROVIDER.* \r\n\t\t  FROM cdm.PROVIDER\r\n\t\t WHERE REGEXP_INSTR(PROVIDER.year_of_birth, '^[\\-\\+]?(\\\\d*\\\\.)?\\\\d+([Ee][\\-\\+]?\\\\d+)?$') = 0\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.PROVIDER\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":219,"QUERY_TEXT":"\r\n/*********\r\nFIELD_CDM_DATATYPE\r\n\r\nAt a minimum, for each field that is supposed to be an integer, verify it is an integer\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = PROVIDER\r\ncdmFieldName = gender_concept_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'PROVIDER.gender_concept_id' AS violating_field, PROVIDER.* \r\n\t\t  FROM cdm.PROVIDER\r\n\t\t WHERE REGEXP_INSTR(PROVIDER.gender_concept_id, '^[\\-\\+]?(\\\\d*\\\\.)?\\\\d+([Ee][\\-\\+]?\\\\d+)?$') = 0\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.PROVIDER\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":220,"QUERY_TEXT":"\r\n/*********\r\nFIELD_CDM_DATATYPE\r\n\r\nAt a minimum, for each field that is supposed to be an integer, verify it is an integer\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = PROVIDER\r\ncdmFieldName = specialty_source_concept_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'PROVIDER.specialty_source_concept_id' AS violating_field, PROVIDER.* \r\n\t\t  FROM cdm.PROVIDER\r\n\t\t WHERE REGEXP_INSTR(PROVIDER.specialty_source_concept_id, '^[\\-\\+]?(\\\\d*\\\\.)?\\\\d+([Ee][\\-\\+]?\\\\d+)?$') = 0\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.PROVIDER\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":221,"QUERY_TEXT":"\r\n/*********\r\nFIELD_CDM_DATATYPE\r\n\r\nAt a minimum, for each field that is supposed to be an integer, verify it is an integer\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = PROVIDER\r\ncdmFieldName = gender_source_concept_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'PROVIDER.gender_source_concept_id' AS violating_field, PROVIDER.* \r\n\t\t  FROM cdm.PROVIDER\r\n\t\t WHERE REGEXP_INSTR(PROVIDER.gender_source_concept_id, '^[\\-\\+]?(\\\\d*\\\\.)?\\\\d+([Ee][\\-\\+]?\\\\d+)?$') = 0\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.PROVIDER\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":222,"QUERY_TEXT":"\r\n/*********\r\nFIELD_CDM_DATATYPE\r\n\r\nAt a minimum, for each field that is supposed to be an integer, verify it is an integer\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = PAYER_PLAN_PERIOD\r\ncdmFieldName = payer_plan_period_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'PAYER_PLAN_PERIOD.payer_plan_period_id' AS violating_field, PAYER_PLAN_PERIOD.* \r\n\t\t  FROM cdm.PAYER_PLAN_PERIOD\r\n\t\t WHERE REGEXP_INSTR(PAYER_PLAN_PERIOD.payer_plan_period_id, '^[\\-\\+]?(\\\\d*\\\\.)?\\\\d+([Ee][\\-\\+]?\\\\d+)?$') = 0\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.PAYER_PLAN_PERIOD\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":223,"QUERY_TEXT":"\r\n/*********\r\nFIELD_CDM_DATATYPE\r\n\r\nAt a minimum, for each field that is supposed to be an integer, verify it is an integer\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = PAYER_PLAN_PERIOD\r\ncdmFieldName = person_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'PAYER_PLAN_PERIOD.person_id' AS violating_field, PAYER_PLAN_PERIOD.* \r\n\t\t  FROM cdm.PAYER_PLAN_PERIOD\r\n\t\t WHERE REGEXP_INSTR(PAYER_PLAN_PERIOD.person_id, '^[\\-\\+]?(\\\\d*\\\\.)?\\\\d+([Ee][\\-\\+]?\\\\d+)?$') = 0\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.PAYER_PLAN_PERIOD\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"CHECK_ID":224,"QUERY_TEXT":"\r\n/*********\r\nFIELD_CDM_DATATYPE\r\n\r\nAt a minimum, for each field that is supposed to be an integer, verify it is an integer\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = PAYER_PLAN_PERIOD\r\ncdmFieldName = contract_person_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'PAYER_PLAN_PERIOD.contract_person_id' AS violating_field, PAYER_PLAN_PERIOD.* \r\n\t\t  FROM cdm.PAYER_PLAN_PERIOD\r\n\t\t WHERE REGEXP_INSTR(PAYER_PLAN_PERIOD.contract_person_id, '^[\\-\\+]?(\\\\d*\\\\.)?\\\\d+([Ee][\\-\\+]?\\\\d+)?$') = 0\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.PAYER_PLAN_PERIOD\r\n) denominator\r\n;","CATEGORY":"Conformance","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: column payer_plan_period.contract_person_id does not exist;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":225,"QUERY_TEXT":"\r\n/*********\r\nFIELD_CDM_DATATYPE\r\n\r\nAt a minimum, for each field that is supposed to be an integer, verify it is an integer\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = PAYER_PLAN_PERIOD\r\ncdmFieldName = payer_concept_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'PAYER_PLAN_PERIOD.payer_concept_id' AS violating_field, PAYER_PLAN_PERIOD.* \r\n\t\t  FROM cdm.PAYER_PLAN_PERIOD\r\n\t\t WHERE REGEXP_INSTR(PAYER_PLAN_PERIOD.payer_concept_id, '^[\\-\\+]?(\\\\d*\\\\.)?\\\\d+([Ee][\\-\\+]?\\\\d+)?$') = 0\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.PAYER_PLAN_PERIOD\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":226,"QUERY_TEXT":"\r\n/*********\r\nFIELD_CDM_DATATYPE\r\n\r\nAt a minimum, for each field that is supposed to be an integer, verify it is an integer\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = PAYER_PLAN_PERIOD\r\ncdmFieldName = payer_source_concept_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'PAYER_PLAN_PERIOD.payer_source_concept_id' AS violating_field, PAYER_PLAN_PERIOD.* \r\n\t\t  FROM cdm.PAYER_PLAN_PERIOD\r\n\t\t WHERE REGEXP_INSTR(PAYER_PLAN_PERIOD.payer_source_concept_id, '^[\\-\\+]?(\\\\d*\\\\.)?\\\\d+([Ee][\\-\\+]?\\\\d+)?$') = 0\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.PAYER_PLAN_PERIOD\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":227,"QUERY_TEXT":"\r\n/*********\r\nFIELD_CDM_DATATYPE\r\n\r\nAt a minimum, for each field that is supposed to be an integer, verify it is an integer\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = PAYER_PLAN_PERIOD\r\ncdmFieldName = plan_concept_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'PAYER_PLAN_PERIOD.plan_concept_id' AS violating_field, PAYER_PLAN_PERIOD.* \r\n\t\t  FROM cdm.PAYER_PLAN_PERIOD\r\n\t\t WHERE REGEXP_INSTR(PAYER_PLAN_PERIOD.plan_concept_id, '^[\\-\\+]?(\\\\d*\\\\.)?\\\\d+([Ee][\\-\\+]?\\\\d+)?$') = 0\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.PAYER_PLAN_PERIOD\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":228,"QUERY_TEXT":"\r\n/*********\r\nFIELD_CDM_DATATYPE\r\n\r\nAt a minimum, for each field that is supposed to be an integer, verify it is an integer\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = PAYER_PLAN_PERIOD\r\ncdmFieldName = plan_source_concept_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'PAYER_PLAN_PERIOD.plan_source_concept_id' AS violating_field, PAYER_PLAN_PERIOD.* \r\n\t\t  FROM cdm.PAYER_PLAN_PERIOD\r\n\t\t WHERE REGEXP_INSTR(PAYER_PLAN_PERIOD.plan_source_concept_id, '^[\\-\\+]?(\\\\d*\\\\.)?\\\\d+([Ee][\\-\\+]?\\\\d+)?$') = 0\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.PAYER_PLAN_PERIOD\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":229,"QUERY_TEXT":"\r\n/*********\r\nFIELD_CDM_DATATYPE\r\n\r\nAt a minimum, for each field that is supposed to be an integer, verify it is an integer\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = PAYER_PLAN_PERIOD\r\ncdmFieldName = sponsor_concept_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'PAYER_PLAN_PERIOD.sponsor_concept_id' AS violating_field, PAYER_PLAN_PERIOD.* \r\n\t\t  FROM cdm.PAYER_PLAN_PERIOD\r\n\t\t WHERE REGEXP_INSTR(PAYER_PLAN_PERIOD.sponsor_concept_id, '^[\\-\\+]?(\\\\d*\\\\.)?\\\\d+([Ee][\\-\\+]?\\\\d+)?$') = 0\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.PAYER_PLAN_PERIOD\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":230,"QUERY_TEXT":"\r\n/*********\r\nFIELD_CDM_DATATYPE\r\n\r\nAt a minimum, for each field that is supposed to be an integer, verify it is an integer\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = PAYER_PLAN_PERIOD\r\ncdmFieldName = sponsor_source_concept_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'PAYER_PLAN_PERIOD.sponsor_source_concept_id' AS violating_field, PAYER_PLAN_PERIOD.* \r\n\t\t  FROM cdm.PAYER_PLAN_PERIOD\r\n\t\t WHERE REGEXP_INSTR(PAYER_PLAN_PERIOD.sponsor_source_concept_id, '^[\\-\\+]?(\\\\d*\\\\.)?\\\\d+([Ee][\\-\\+]?\\\\d+)?$') = 0\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.PAYER_PLAN_PERIOD\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":231,"QUERY_TEXT":"\r\n/*********\r\nFIELD_CDM_DATATYPE\r\n\r\nAt a minimum, for each field that is supposed to be an integer, verify it is an integer\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = PAYER_PLAN_PERIOD\r\ncdmFieldName = stop_reason_concept_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'PAYER_PLAN_PERIOD.stop_reason_concept_id' AS violating_field, PAYER_PLAN_PERIOD.* \r\n\t\t  FROM cdm.PAYER_PLAN_PERIOD\r\n\t\t WHERE REGEXP_INSTR(PAYER_PLAN_PERIOD.stop_reason_concept_id, '^[\\-\\+]?(\\\\d*\\\\.)?\\\\d+([Ee][\\-\\+]?\\\\d+)?$') = 0\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.PAYER_PLAN_PERIOD\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":232,"QUERY_TEXT":"\r\n/*********\r\nFIELD_CDM_DATATYPE\r\n\r\nAt a minimum, for each field that is supposed to be an integer, verify it is an integer\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = PAYER_PLAN_PERIOD\r\ncdmFieldName = stop_reason_source_concept_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'PAYER_PLAN_PERIOD.stop_reason_source_concept_id' AS violating_field, PAYER_PLAN_PERIOD.* \r\n\t\t  FROM cdm.PAYER_PLAN_PERIOD\r\n\t\t WHERE REGEXP_INSTR(PAYER_PLAN_PERIOD.stop_reason_source_concept_id, '^[\\-\\+]?(\\\\d*\\\\.)?\\\\d+([Ee][\\-\\+]?\\\\d+)?$') = 0\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.PAYER_PLAN_PERIOD\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":233,"QUERY_TEXT":"\r\n/*********\r\nFIELD_CDM_DATATYPE\r\n\r\nAt a minimum, for each field that is supposed to be an integer, verify it is an integer\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = DRUG_ERA\r\ncdmFieldName = drug_era_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'DRUG_ERA.drug_era_id' AS violating_field, DRUG_ERA.* \r\n\t\t  FROM cdm.DRUG_ERA\r\n\t\t WHERE REGEXP_INSTR(DRUG_ERA.drug_era_id, '^[\\-\\+]?(\\\\d*\\\\.)?\\\\d+([Ee][\\-\\+]?\\\\d+)?$') = 0\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.DRUG_ERA\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":234,"QUERY_TEXT":"\r\n/*********\r\nFIELD_CDM_DATATYPE\r\n\r\nAt a minimum, for each field that is supposed to be an integer, verify it is an integer\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = DRUG_ERA\r\ncdmFieldName = person_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'DRUG_ERA.person_id' AS violating_field, DRUG_ERA.* \r\n\t\t  FROM cdm.DRUG_ERA\r\n\t\t WHERE REGEXP_INSTR(DRUG_ERA.person_id, '^[\\-\\+]?(\\\\d*\\\\.)?\\\\d+([Ee][\\-\\+]?\\\\d+)?$') = 0\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.DRUG_ERA\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":235,"QUERY_TEXT":"\r\n/*********\r\nFIELD_CDM_DATATYPE\r\n\r\nAt a minimum, for each field that is supposed to be an integer, verify it is an integer\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = DRUG_ERA\r\ncdmFieldName = drug_concept_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'DRUG_ERA.drug_concept_id' AS violating_field, DRUG_ERA.* \r\n\t\t  FROM cdm.DRUG_ERA\r\n\t\t WHERE REGEXP_INSTR(DRUG_ERA.drug_concept_id, '^[\\-\\+]?(\\\\d*\\\\.)?\\\\d+([Ee][\\-\\+]?\\\\d+)?$') = 0\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.DRUG_ERA\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":236,"QUERY_TEXT":"\r\n/*********\r\nFIELD_CDM_DATATYPE\r\n\r\nAt a minimum, for each field that is supposed to be an integer, verify it is an integer\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = DRUG_ERA\r\ncdmFieldName = drug_exposure_count\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'DRUG_ERA.drug_exposure_count' AS violating_field, DRUG_ERA.* \r\n\t\t  FROM cdm.DRUG_ERA\r\n\t\t WHERE REGEXP_INSTR(DRUG_ERA.drug_exposure_count, '^[\\-\\+]?(\\\\d*\\\\.)?\\\\d+([Ee][\\-\\+]?\\\\d+)?$') = 0\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.DRUG_ERA\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":237,"QUERY_TEXT":"\r\n/*********\r\nFIELD_CDM_DATATYPE\r\n\r\nAt a minimum, for each field that is supposed to be an integer, verify it is an integer\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = DRUG_ERA\r\ncdmFieldName = gap_days\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'DRUG_ERA.gap_days' AS violating_field, DRUG_ERA.* \r\n\t\t  FROM cdm.DRUG_ERA\r\n\t\t WHERE REGEXP_INSTR(DRUG_ERA.gap_days, '^[\\-\\+]?(\\\\d*\\\\.)?\\\\d+([Ee][\\-\\+]?\\\\d+)?$') = 0\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.DRUG_ERA\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":238,"QUERY_TEXT":"\r\n/*********\r\nFIELD_CDM_DATATYPE\r\n\r\nAt a minimum, for each field that is supposed to be an integer, verify it is an integer\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = DOSE_ERA\r\ncdmFieldName = dose_era_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'DOSE_ERA.dose_era_id' AS violating_field, DOSE_ERA.* \r\n\t\t  FROM cdm.DOSE_ERA\r\n\t\t WHERE REGEXP_INSTR(DOSE_ERA.dose_era_id, '^[\\-\\+]?(\\\\d*\\\\.)?\\\\d+([Ee][\\-\\+]?\\\\d+)?$') = 0\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.DOSE_ERA\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":239,"QUERY_TEXT":"\r\n/*********\r\nFIELD_CDM_DATATYPE\r\n\r\nAt a minimum, for each field that is supposed to be an integer, verify it is an integer\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = DOSE_ERA\r\ncdmFieldName = person_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'DOSE_ERA.person_id' AS violating_field, DOSE_ERA.* \r\n\t\t  FROM cdm.DOSE_ERA\r\n\t\t WHERE REGEXP_INSTR(DOSE_ERA.person_id, '^[\\-\\+]?(\\\\d*\\\\.)?\\\\d+([Ee][\\-\\+]?\\\\d+)?$') = 0\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.DOSE_ERA\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":240,"QUERY_TEXT":"\r\n/*********\r\nFIELD_CDM_DATATYPE\r\n\r\nAt a minimum, for each field that is supposed to be an integer, verify it is an integer\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = DOSE_ERA\r\ncdmFieldName = drug_concept_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'DOSE_ERA.drug_concept_id' AS violating_field, DOSE_ERA.* \r\n\t\t  FROM cdm.DOSE_ERA\r\n\t\t WHERE REGEXP_INSTR(DOSE_ERA.drug_concept_id, '^[\\-\\+]?(\\\\d*\\\\.)?\\\\d+([Ee][\\-\\+]?\\\\d+)?$') = 0\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.DOSE_ERA\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":241,"QUERY_TEXT":"\r\n/*********\r\nFIELD_CDM_DATATYPE\r\n\r\nAt a minimum, for each field that is supposed to be an integer, verify it is an integer\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = DOSE_ERA\r\ncdmFieldName = unit_concept_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'DOSE_ERA.unit_concept_id' AS violating_field, DOSE_ERA.* \r\n\t\t  FROM cdm.DOSE_ERA\r\n\t\t WHERE REGEXP_INSTR(DOSE_ERA.unit_concept_id, '^[\\-\\+]?(\\\\d*\\\\.)?\\\\d+([Ee][\\-\\+]?\\\\d+)?$') = 0\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.DOSE_ERA\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":242,"QUERY_TEXT":"\r\n/*********\r\nFIELD_CDM_DATATYPE\r\n\r\nAt a minimum, for each field that is supposed to be an integer, verify it is an integer\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = CONDITION_ERA\r\ncdmFieldName = condition_era_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'CONDITION_ERA.condition_era_id' AS violating_field, CONDITION_ERA.* \r\n\t\t  FROM cdm.CONDITION_ERA\r\n\t\t WHERE REGEXP_INSTR(CONDITION_ERA.condition_era_id, '^[\\-\\+]?(\\\\d*\\\\.)?\\\\d+([Ee][\\-\\+]?\\\\d+)?$') = 0\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.CONDITION_ERA\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":243,"QUERY_TEXT":"\r\n/*********\r\nFIELD_CDM_DATATYPE\r\n\r\nAt a minimum, for each field that is supposed to be an integer, verify it is an integer\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = CONDITION_ERA\r\ncdmFieldName = person_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'CONDITION_ERA.person_id' AS violating_field, CONDITION_ERA.* \r\n\t\t  FROM cdm.CONDITION_ERA\r\n\t\t WHERE REGEXP_INSTR(CONDITION_ERA.person_id, '^[\\-\\+]?(\\\\d*\\\\.)?\\\\d+([Ee][\\-\\+]?\\\\d+)?$') = 0\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.CONDITION_ERA\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":244,"QUERY_TEXT":"\r\n/*********\r\nFIELD_CDM_DATATYPE\r\n\r\nAt a minimum, for each field that is supposed to be an integer, verify it is an integer\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = CONDITION_ERA\r\ncdmFieldName = condition_concept_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'CONDITION_ERA.condition_concept_id' AS violating_field, CONDITION_ERA.* \r\n\t\t  FROM cdm.CONDITION_ERA\r\n\t\t WHERE REGEXP_INSTR(CONDITION_ERA.condition_concept_id, '^[\\-\\+]?(\\\\d*\\\\.)?\\\\d+([Ee][\\-\\+]?\\\\d+)?$') = 0\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.CONDITION_ERA\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":245,"QUERY_TEXT":"\r\n/*********\r\nFIELD_CDM_DATATYPE\r\n\r\nAt a minimum, for each field that is supposed to be an integer, verify it is an integer\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = CONDITION_ERA\r\ncdmFieldName = condition_occurrence_count\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'CONDITION_ERA.condition_occurrence_count' AS violating_field, CONDITION_ERA.* \r\n\t\t  FROM cdm.CONDITION_ERA\r\n\t\t WHERE REGEXP_INSTR(CONDITION_ERA.condition_occurrence_count, '^[\\-\\+]?(\\\\d*\\\\.)?\\\\d+([Ee][\\-\\+]?\\\\d+)?$') = 0\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.CONDITION_ERA\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":246,"QUERY_TEXT":"\r\n/*********\r\nFIELD_IS_PRIMARY_KEY\r\n\r\nPrimary Key - verify those fields where IS_PRIMARY_KEY == Yes, the values in that field are unique\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = PERSON\r\ncdmFieldName = person_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'PERSON.person_id' AS violating_field, PERSON.* \r\n\t\t  FROM cdm.PERSON\r\n\t\t WHERE PERSON.person_id IN ( SELECT PERSON.person_id \r\n\t\t                                          FROM cdm.PERSON\r\n\t\t\t\t\t\t\t\t\t\t\t\t GROUP BY PERSON.person_id\r\n\t\t\t\t\t\t\t\t\t\t\t\tHAVING COUNT(*) > 1 ) \r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.PERSON\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":247,"QUERY_TEXT":"\r\n/*********\r\nFIELD_IS_PRIMARY_KEY\r\n\r\nPrimary Key - verify those fields where IS_PRIMARY_KEY == Yes, the values in that field are unique\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = OBSERVATION_PERIOD\r\ncdmFieldName = observation_period_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'OBSERVATION_PERIOD.observation_period_id' AS violating_field, OBSERVATION_PERIOD.* \r\n\t\t  FROM cdm.OBSERVATION_PERIOD\r\n\t\t WHERE OBSERVATION_PERIOD.observation_period_id IN ( SELECT OBSERVATION_PERIOD.observation_period_id \r\n\t\t                                          FROM cdm.OBSERVATION_PERIOD\r\n\t\t\t\t\t\t\t\t\t\t\t\t GROUP BY OBSERVATION_PERIOD.observation_period_id\r\n\t\t\t\t\t\t\t\t\t\t\t\tHAVING COUNT(*) > 1 ) \r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.OBSERVATION_PERIOD\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":248,"QUERY_TEXT":"\r\n/*********\r\nFIELD_IS_PRIMARY_KEY\r\n\r\nPrimary Key - verify those fields where IS_PRIMARY_KEY == Yes, the values in that field are unique\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = VISIT_OCCURRENCE\r\ncdmFieldName = visit_occurrence_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'VISIT_OCCURRENCE.visit_occurrence_id' AS violating_field, VISIT_OCCURRENCE.* \r\n\t\t  FROM cdm.VISIT_OCCURRENCE\r\n\t\t WHERE VISIT_OCCURRENCE.visit_occurrence_id IN ( SELECT VISIT_OCCURRENCE.visit_occurrence_id \r\n\t\t                                          FROM cdm.VISIT_OCCURRENCE\r\n\t\t\t\t\t\t\t\t\t\t\t\t GROUP BY VISIT_OCCURRENCE.visit_occurrence_id\r\n\t\t\t\t\t\t\t\t\t\t\t\tHAVING COUNT(*) > 1 ) \r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.VISIT_OCCURRENCE\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":249,"QUERY_TEXT":"\r\n/*********\r\nFIELD_IS_PRIMARY_KEY\r\n\r\nPrimary Key - verify those fields where IS_PRIMARY_KEY == Yes, the values in that field are unique\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = CONDITION_OCCURRENCE\r\ncdmFieldName = condition_occurrence_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'CONDITION_OCCURRENCE.condition_occurrence_id' AS violating_field, CONDITION_OCCURRENCE.* \r\n\t\t  FROM cdm.CONDITION_OCCURRENCE\r\n\t\t WHERE CONDITION_OCCURRENCE.condition_occurrence_id IN ( SELECT CONDITION_OCCURRENCE.condition_occurrence_id \r\n\t\t                                          FROM cdm.CONDITION_OCCURRENCE\r\n\t\t\t\t\t\t\t\t\t\t\t\t GROUP BY CONDITION_OCCURRENCE.condition_occurrence_id\r\n\t\t\t\t\t\t\t\t\t\t\t\tHAVING COUNT(*) > 1 ) \r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.CONDITION_OCCURRENCE\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":250,"QUERY_TEXT":"\r\n/*********\r\nFIELD_IS_PRIMARY_KEY\r\n\r\nPrimary Key - verify those fields where IS_PRIMARY_KEY == Yes, the values in that field are unique\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = DRUG_EXPOSURE\r\ncdmFieldName = drug_exposure_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'DRUG_EXPOSURE.drug_exposure_id' AS violating_field, DRUG_EXPOSURE.* \r\n\t\t  FROM cdm.DRUG_EXPOSURE\r\n\t\t WHERE DRUG_EXPOSURE.drug_exposure_id IN ( SELECT DRUG_EXPOSURE.drug_exposure_id \r\n\t\t                                          FROM cdm.DRUG_EXPOSURE\r\n\t\t\t\t\t\t\t\t\t\t\t\t GROUP BY DRUG_EXPOSURE.drug_exposure_id\r\n\t\t\t\t\t\t\t\t\t\t\t\tHAVING COUNT(*) > 1 ) \r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.DRUG_EXPOSURE\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":251,"QUERY_TEXT":"\r\n/*********\r\nFIELD_IS_PRIMARY_KEY\r\n\r\nPrimary Key - verify those fields where IS_PRIMARY_KEY == Yes, the values in that field are unique\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = PROCEDURE_OCCURRENCE\r\ncdmFieldName = procedure_occurrence_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'PROCEDURE_OCCURRENCE.procedure_occurrence_id' AS violating_field, PROCEDURE_OCCURRENCE.* \r\n\t\t  FROM cdm.PROCEDURE_OCCURRENCE\r\n\t\t WHERE PROCEDURE_OCCURRENCE.procedure_occurrence_id IN ( SELECT PROCEDURE_OCCURRENCE.procedure_occurrence_id \r\n\t\t                                          FROM cdm.PROCEDURE_OCCURRENCE\r\n\t\t\t\t\t\t\t\t\t\t\t\t GROUP BY PROCEDURE_OCCURRENCE.procedure_occurrence_id\r\n\t\t\t\t\t\t\t\t\t\t\t\tHAVING COUNT(*) > 1 ) \r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.PROCEDURE_OCCURRENCE\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":252,"QUERY_TEXT":"\r\n/*********\r\nFIELD_IS_PRIMARY_KEY\r\n\r\nPrimary Key - verify those fields where IS_PRIMARY_KEY == Yes, the values in that field are unique\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = DEVICE_EXPOSURE\r\ncdmFieldName = device_exposure_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'DEVICE_EXPOSURE.device_exposure_id' AS violating_field, DEVICE_EXPOSURE.* \r\n\t\t  FROM cdm.DEVICE_EXPOSURE\r\n\t\t WHERE DEVICE_EXPOSURE.device_exposure_id IN ( SELECT DEVICE_EXPOSURE.device_exposure_id \r\n\t\t                                          FROM cdm.DEVICE_EXPOSURE\r\n\t\t\t\t\t\t\t\t\t\t\t\t GROUP BY DEVICE_EXPOSURE.device_exposure_id\r\n\t\t\t\t\t\t\t\t\t\t\t\tHAVING COUNT(*) > 1 ) \r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.DEVICE_EXPOSURE\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":253,"QUERY_TEXT":"\r\n/*********\r\nFIELD_IS_PRIMARY_KEY\r\n\r\nPrimary Key - verify those fields where IS_PRIMARY_KEY == Yes, the values in that field are unique\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = MEASUREMENT\r\ncdmFieldName = measurement_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'MEASUREMENT.measurement_id' AS violating_field, MEASUREMENT.* \r\n\t\t  FROM cdm.MEASUREMENT\r\n\t\t WHERE MEASUREMENT.measurement_id IN ( SELECT MEASUREMENT.measurement_id \r\n\t\t                                          FROM cdm.MEASUREMENT\r\n\t\t\t\t\t\t\t\t\t\t\t\t GROUP BY MEASUREMENT.measurement_id\r\n\t\t\t\t\t\t\t\t\t\t\t\tHAVING COUNT(*) > 1 ) \r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.MEASUREMENT\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":254,"QUERY_TEXT":"\r\n/*********\r\nFIELD_IS_PRIMARY_KEY\r\n\r\nPrimary Key - verify those fields where IS_PRIMARY_KEY == Yes, the values in that field are unique\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = VISIT_DETAIL\r\ncdmFieldName = visit_detail_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'VISIT_DETAIL.visit_detail_id' AS violating_field, VISIT_DETAIL.* \r\n\t\t  FROM cdm.VISIT_DETAIL\r\n\t\t WHERE VISIT_DETAIL.visit_detail_id IN ( SELECT VISIT_DETAIL.visit_detail_id \r\n\t\t                                          FROM cdm.VISIT_DETAIL\r\n\t\t\t\t\t\t\t\t\t\t\t\t GROUP BY VISIT_DETAIL.visit_detail_id\r\n\t\t\t\t\t\t\t\t\t\t\t\tHAVING COUNT(*) > 1 ) \r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.VISIT_DETAIL\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":255,"QUERY_TEXT":"\r\n/*********\r\nFIELD_IS_PRIMARY_KEY\r\n\r\nPrimary Key - verify those fields where IS_PRIMARY_KEY == Yes, the values in that field are unique\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = NOTE\r\ncdmFieldName = note_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'NOTE.note_id' AS violating_field, NOTE.* \r\n\t\t  FROM cdm.NOTE\r\n\t\t WHERE NOTE.note_id IN ( SELECT NOTE.note_id \r\n\t\t                                          FROM cdm.NOTE\r\n\t\t\t\t\t\t\t\t\t\t\t\t GROUP BY NOTE.note_id\r\n\t\t\t\t\t\t\t\t\t\t\t\tHAVING COUNT(*) > 1 ) \r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.NOTE\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":256,"QUERY_TEXT":"\r\n/*********\r\nFIELD_IS_PRIMARY_KEY\r\n\r\nPrimary Key - verify those fields where IS_PRIMARY_KEY == Yes, the values in that field are unique\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = NOTE_NLP\r\ncdmFieldName = note_nlp_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'NOTE_NLP.note_nlp_id' AS violating_field, NOTE_NLP.* \r\n\t\t  FROM cdm.NOTE_NLP\r\n\t\t WHERE NOTE_NLP.note_nlp_id IN ( SELECT NOTE_NLP.note_nlp_id \r\n\t\t                                          FROM cdm.NOTE_NLP\r\n\t\t\t\t\t\t\t\t\t\t\t\t GROUP BY NOTE_NLP.note_nlp_id\r\n\t\t\t\t\t\t\t\t\t\t\t\tHAVING COUNT(*) > 1 ) \r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.NOTE_NLP\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":257,"QUERY_TEXT":"\r\n/*********\r\nFIELD_IS_PRIMARY_KEY\r\n\r\nPrimary Key - verify those fields where IS_PRIMARY_KEY == Yes, the values in that field are unique\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = OBSERVATION\r\ncdmFieldName = observation_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'OBSERVATION.observation_id' AS violating_field, OBSERVATION.* \r\n\t\t  FROM cdm.OBSERVATION\r\n\t\t WHERE OBSERVATION.observation_id IN ( SELECT OBSERVATION.observation_id \r\n\t\t                                          FROM cdm.OBSERVATION\r\n\t\t\t\t\t\t\t\t\t\t\t\t GROUP BY OBSERVATION.observation_id\r\n\t\t\t\t\t\t\t\t\t\t\t\tHAVING COUNT(*) > 1 ) \r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.OBSERVATION\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":258,"QUERY_TEXT":"\r\n/*********\r\nFIELD_IS_PRIMARY_KEY\r\n\r\nPrimary Key - verify those fields where IS_PRIMARY_KEY == Yes, the values in that field are unique\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = SPECIMEN\r\ncdmFieldName = specimen_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'SPECIMEN.specimen_id' AS violating_field, SPECIMEN.* \r\n\t\t  FROM cdm.SPECIMEN\r\n\t\t WHERE SPECIMEN.specimen_id IN ( SELECT SPECIMEN.specimen_id \r\n\t\t                                          FROM cdm.SPECIMEN\r\n\t\t\t\t\t\t\t\t\t\t\t\t GROUP BY SPECIMEN.specimen_id\r\n\t\t\t\t\t\t\t\t\t\t\t\tHAVING COUNT(*) > 1 ) \r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.SPECIMEN\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":259,"QUERY_TEXT":"\r\n/*********\r\nFIELD_IS_PRIMARY_KEY\r\n\r\nPrimary Key - verify those fields where IS_PRIMARY_KEY == Yes, the values in that field are unique\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = LOCATION\r\ncdmFieldName = location_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'LOCATION.location_id' AS violating_field, LOCATION.* \r\n\t\t  FROM cdm.LOCATION\r\n\t\t WHERE LOCATION.location_id IN ( SELECT LOCATION.location_id \r\n\t\t                                          FROM cdm.LOCATION\r\n\t\t\t\t\t\t\t\t\t\t\t\t GROUP BY LOCATION.location_id\r\n\t\t\t\t\t\t\t\t\t\t\t\tHAVING COUNT(*) > 1 ) \r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.LOCATION\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":260,"QUERY_TEXT":"\r\n/*********\r\nFIELD_IS_PRIMARY_KEY\r\n\r\nPrimary Key - verify those fields where IS_PRIMARY_KEY == Yes, the values in that field are unique\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = CARE_SITE\r\ncdmFieldName = care_site_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'CARE_SITE.care_site_id' AS violating_field, CARE_SITE.* \r\n\t\t  FROM cdm.CARE_SITE\r\n\t\t WHERE CARE_SITE.care_site_id IN ( SELECT CARE_SITE.care_site_id \r\n\t\t                                          FROM cdm.CARE_SITE\r\n\t\t\t\t\t\t\t\t\t\t\t\t GROUP BY CARE_SITE.care_site_id\r\n\t\t\t\t\t\t\t\t\t\t\t\tHAVING COUNT(*) > 1 ) \r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.CARE_SITE\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":261,"QUERY_TEXT":"\r\n/*********\r\nFIELD_IS_PRIMARY_KEY\r\n\r\nPrimary Key - verify those fields where IS_PRIMARY_KEY == Yes, the values in that field are unique\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = PROVIDER\r\ncdmFieldName = provider_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'PROVIDER.provider_id' AS violating_field, PROVIDER.* \r\n\t\t  FROM cdm.PROVIDER\r\n\t\t WHERE PROVIDER.provider_id IN ( SELECT PROVIDER.provider_id \r\n\t\t                                          FROM cdm.PROVIDER\r\n\t\t\t\t\t\t\t\t\t\t\t\t GROUP BY PROVIDER.provider_id\r\n\t\t\t\t\t\t\t\t\t\t\t\tHAVING COUNT(*) > 1 ) \r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.PROVIDER\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":262,"QUERY_TEXT":"\r\n/*********\r\nFIELD_IS_PRIMARY_KEY\r\n\r\nPrimary Key - verify those fields where IS_PRIMARY_KEY == Yes, the values in that field are unique\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = PAYER_PLAN_PERIOD\r\ncdmFieldName = payer_plan_period_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'PAYER_PLAN_PERIOD.payer_plan_period_id' AS violating_field, PAYER_PLAN_PERIOD.* \r\n\t\t  FROM cdm.PAYER_PLAN_PERIOD\r\n\t\t WHERE PAYER_PLAN_PERIOD.payer_plan_period_id IN ( SELECT PAYER_PLAN_PERIOD.payer_plan_period_id \r\n\t\t                                          FROM cdm.PAYER_PLAN_PERIOD\r\n\t\t\t\t\t\t\t\t\t\t\t\t GROUP BY PAYER_PLAN_PERIOD.payer_plan_period_id\r\n\t\t\t\t\t\t\t\t\t\t\t\tHAVING COUNT(*) > 1 ) \r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.PAYER_PLAN_PERIOD\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":263,"QUERY_TEXT":"\r\n/*********\r\nFIELD_IS_PRIMARY_KEY\r\n\r\nPrimary Key - verify those fields where IS_PRIMARY_KEY == Yes, the values in that field are unique\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = COST\r\ncdmFieldName = cost_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'COST.cost_id' AS violating_field, COST.* \r\n\t\t  FROM cdm.COST\r\n\t\t WHERE COST.cost_id IN ( SELECT COST.cost_id \r\n\t\t                                          FROM cdm.COST\r\n\t\t\t\t\t\t\t\t\t\t\t\t GROUP BY COST.cost_id\r\n\t\t\t\t\t\t\t\t\t\t\t\tHAVING COUNT(*) > 1 ) \r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.COST\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":264,"QUERY_TEXT":"\r\n/*********\r\nFIELD_IS_PRIMARY_KEY\r\n\r\nPrimary Key - verify those fields where IS_PRIMARY_KEY == Yes, the values in that field are unique\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = DRUG_ERA\r\ncdmFieldName = drug_era_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'DRUG_ERA.drug_era_id' AS violating_field, DRUG_ERA.* \r\n\t\t  FROM cdm.DRUG_ERA\r\n\t\t WHERE DRUG_ERA.drug_era_id IN ( SELECT DRUG_ERA.drug_era_id \r\n\t\t                                          FROM cdm.DRUG_ERA\r\n\t\t\t\t\t\t\t\t\t\t\t\t GROUP BY DRUG_ERA.drug_era_id\r\n\t\t\t\t\t\t\t\t\t\t\t\tHAVING COUNT(*) > 1 ) \r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.DRUG_ERA\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":265,"QUERY_TEXT":"\r\n/*********\r\nFIELD_IS_PRIMARY_KEY\r\n\r\nPrimary Key - verify those fields where IS_PRIMARY_KEY == Yes, the values in that field are unique\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = DOSE_ERA\r\ncdmFieldName = dose_era_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'DOSE_ERA.dose_era_id' AS violating_field, DOSE_ERA.* \r\n\t\t  FROM cdm.DOSE_ERA\r\n\t\t WHERE DOSE_ERA.dose_era_id IN ( SELECT DOSE_ERA.dose_era_id \r\n\t\t                                          FROM cdm.DOSE_ERA\r\n\t\t\t\t\t\t\t\t\t\t\t\t GROUP BY DOSE_ERA.dose_era_id\r\n\t\t\t\t\t\t\t\t\t\t\t\tHAVING COUNT(*) > 1 ) \r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.DOSE_ERA\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":266,"QUERY_TEXT":"\r\n/*********\r\nFIELD_IS_PRIMARY_KEY\r\n\r\nPrimary Key - verify those fields where IS_PRIMARY_KEY == Yes, the values in that field are unique\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = CONDITION_ERA\r\ncdmFieldName = condition_era_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'CONDITION_ERA.condition_era_id' AS violating_field, CONDITION_ERA.* \r\n\t\t  FROM cdm.CONDITION_ERA\r\n\t\t WHERE CONDITION_ERA.condition_era_id IN ( SELECT CONDITION_ERA.condition_era_id \r\n\t\t                                          FROM cdm.CONDITION_ERA\r\n\t\t\t\t\t\t\t\t\t\t\t\t GROUP BY CONDITION_ERA.condition_era_id\r\n\t\t\t\t\t\t\t\t\t\t\t\tHAVING COUNT(*) > 1 ) \r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.CONDITION_ERA\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":267,"QUERY_TEXT":"\r\n/*********\r\nIS_FOREIGN_KEY\r\nForeign key check\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = PERSON\r\ncdmFieldName = gender_concept_id\r\nfkTableName = CONCEPT\r\nfkFieldName = CONCEPT_ID\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'PERSON.gender_concept_id' AS violating_field, p1.* \r\n\t\tFROM cdm.PERSON p1\r\n\t\tLEFT JOIN cdm.CONCEPT f1\r\n\t\tON p1.gender_concept_id = f1.CONCEPT_ID\r\n\t\tWHERE f1.CONCEPT_ID IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.PERSON\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":268,"QUERY_TEXT":"\r\n/*********\r\nIS_FOREIGN_KEY\r\nForeign key check\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = PERSON\r\ncdmFieldName = race_concept_id\r\nfkTableName = CONCEPT\r\nfkFieldName = CONCEPT_ID\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'PERSON.race_concept_id' AS violating_field, p1.* \r\n\t\tFROM cdm.PERSON p1\r\n\t\tLEFT JOIN cdm.CONCEPT f1\r\n\t\tON p1.race_concept_id = f1.CONCEPT_ID\r\n\t\tWHERE f1.CONCEPT_ID IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.PERSON\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":269,"QUERY_TEXT":"\r\n/*********\r\nIS_FOREIGN_KEY\r\nForeign key check\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = PERSON\r\ncdmFieldName = ethnicity_concept_id\r\nfkTableName = CONCEPT\r\nfkFieldName = CONCEPT_ID\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'PERSON.ethnicity_concept_id' AS violating_field, p1.* \r\n\t\tFROM cdm.PERSON p1\r\n\t\tLEFT JOIN cdm.CONCEPT f1\r\n\t\tON p1.ethnicity_concept_id = f1.CONCEPT_ID\r\n\t\tWHERE f1.CONCEPT_ID IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.PERSON\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":270,"QUERY_TEXT":"\r\n/*********\r\nIS_FOREIGN_KEY\r\nForeign key check\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = PERSON\r\ncdmFieldName = location_id\r\nfkTableName = LOCATION\r\nfkFieldName = LOCATION_ID\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'PERSON.location_id' AS violating_field, p1.* \r\n\t\tFROM cdm.PERSON p1\r\n\t\tLEFT JOIN cdm.LOCATION f1\r\n\t\tON p1.location_id = f1.LOCATION_ID\r\n\t\tWHERE f1.LOCATION_ID IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.PERSON\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":1144,"PCT_VIOLATED_ROWS":0.1195,"CHECK_ID":271,"QUERY_TEXT":"\r\n/*********\r\nIS_FOREIGN_KEY\r\nForeign key check\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = PERSON\r\ncdmFieldName = provider_id\r\nfkTableName = PROVIDER\r\nfkFieldName = PROVIDER_ID\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'PERSON.provider_id' AS violating_field, p1.* \r\n\t\tFROM cdm.PERSON p1\r\n\t\tLEFT JOIN cdm.PROVIDER f1\r\n\t\tON p1.provider_id = f1.PROVIDER_ID\r\n\t\tWHERE f1.PROVIDER_ID IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.PERSON\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":272,"QUERY_TEXT":"\r\n/*********\r\nIS_FOREIGN_KEY\r\nForeign key check\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = PERSON\r\ncdmFieldName = care_site_id\r\nfkTableName = CARE_SITE\r\nfkFieldName = CARE_SITE_ID\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'PERSON.care_site_id' AS violating_field, p1.* \r\n\t\tFROM cdm.PERSON p1\r\n\t\tLEFT JOIN cdm.CARE_SITE f1\r\n\t\tON p1.care_site_id = f1.CARE_SITE_ID\r\n\t\tWHERE f1.CARE_SITE_ID IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.PERSON\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":273,"QUERY_TEXT":"\r\n/*********\r\nIS_FOREIGN_KEY\r\nForeign key check\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = PERSON\r\ncdmFieldName = gender_source_concept_id\r\nfkTableName = CONCEPT\r\nfkFieldName = CONCEPT_ID\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'PERSON.gender_source_concept_id' AS violating_field, p1.* \r\n\t\tFROM cdm.PERSON p1\r\n\t\tLEFT JOIN cdm.CONCEPT f1\r\n\t\tON p1.gender_source_concept_id = f1.CONCEPT_ID\r\n\t\tWHERE f1.CONCEPT_ID IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.PERSON\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":274,"QUERY_TEXT":"\r\n/*********\r\nIS_FOREIGN_KEY\r\nForeign key check\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = PERSON\r\ncdmFieldName = race_source_concept_id\r\nfkTableName = CONCEPT\r\nfkFieldName = CONCEPT_ID\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'PERSON.race_source_concept_id' AS violating_field, p1.* \r\n\t\tFROM cdm.PERSON p1\r\n\t\tLEFT JOIN cdm.CONCEPT f1\r\n\t\tON p1.race_source_concept_id = f1.CONCEPT_ID\r\n\t\tWHERE f1.CONCEPT_ID IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.PERSON\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":275,"QUERY_TEXT":"\r\n/*********\r\nIS_FOREIGN_KEY\r\nForeign key check\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = PERSON\r\ncdmFieldName = ethnicity_source_concept_id\r\nfkTableName = CONCEPT\r\nfkFieldName = CONCEPT_ID\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'PERSON.ethnicity_source_concept_id' AS violating_field, p1.* \r\n\t\tFROM cdm.PERSON p1\r\n\t\tLEFT JOIN cdm.CONCEPT f1\r\n\t\tON p1.ethnicity_source_concept_id = f1.CONCEPT_ID\r\n\t\tWHERE f1.CONCEPT_ID IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.PERSON\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":276,"QUERY_TEXT":"\r\n/*********\r\nIS_FOREIGN_KEY\r\nForeign key check\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = OBSERVATION_PERIOD\r\ncdmFieldName = person_id\r\nfkTableName = PERSON\r\nfkFieldName = PERSON_ID\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'OBSERVATION_PERIOD.person_id' AS violating_field, p1.* \r\n\t\tFROM cdm.OBSERVATION_PERIOD p1\r\n\t\tLEFT JOIN cdm.PERSON f1\r\n\t\tON p1.person_id = f1.PERSON_ID\r\n\t\tWHERE f1.PERSON_ID IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.OBSERVATION_PERIOD\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":277,"QUERY_TEXT":"\r\n/*********\r\nIS_FOREIGN_KEY\r\nForeign key check\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = OBSERVATION_PERIOD\r\ncdmFieldName = period_type_concept_id\r\nfkTableName = CONCEPT\r\nfkFieldName = CONCEPT_ID\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'OBSERVATION_PERIOD.period_type_concept_id' AS violating_field, p1.* \r\n\t\tFROM cdm.OBSERVATION_PERIOD p1\r\n\t\tLEFT JOIN cdm.CONCEPT f1\r\n\t\tON p1.period_type_concept_id = f1.CONCEPT_ID\r\n\t\tWHERE f1.CONCEPT_ID IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.OBSERVATION_PERIOD\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":278,"QUERY_TEXT":"\r\n/*********\r\nIS_FOREIGN_KEY\r\nForeign key check\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = VISIT_OCCURRENCE\r\ncdmFieldName = person_id\r\nfkTableName = PERSON\r\nfkFieldName = PERSON_ID\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'VISIT_OCCURRENCE.person_id' AS violating_field, p1.* \r\n\t\tFROM cdm.VISIT_OCCURRENCE p1\r\n\t\tLEFT JOIN cdm.PERSON f1\r\n\t\tON p1.person_id = f1.PERSON_ID\r\n\t\tWHERE f1.PERSON_ID IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.VISIT_OCCURRENCE\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":279,"QUERY_TEXT":"\r\n/*********\r\nIS_FOREIGN_KEY\r\nForeign key check\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = VISIT_OCCURRENCE\r\ncdmFieldName = visit_concept_id\r\nfkTableName = CONCEPT\r\nfkFieldName = CONCEPT_ID\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'VISIT_OCCURRENCE.visit_concept_id' AS violating_field, p1.* \r\n\t\tFROM cdm.VISIT_OCCURRENCE p1\r\n\t\tLEFT JOIN cdm.CONCEPT f1\r\n\t\tON p1.visit_concept_id = f1.CONCEPT_ID\r\n\t\tWHERE f1.CONCEPT_ID IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.VISIT_OCCURRENCE\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":280,"QUERY_TEXT":"\r\n/*********\r\nIS_FOREIGN_KEY\r\nForeign key check\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = VISIT_OCCURRENCE\r\ncdmFieldName = visit_type_concept_id\r\nfkTableName = CONCEPT\r\nfkFieldName = CONCEPT_ID\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'VISIT_OCCURRENCE.visit_type_concept_id' AS violating_field, p1.* \r\n\t\tFROM cdm.VISIT_OCCURRENCE p1\r\n\t\tLEFT JOIN cdm.CONCEPT f1\r\n\t\tON p1.visit_type_concept_id = f1.CONCEPT_ID\r\n\t\tWHERE f1.CONCEPT_ID IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.VISIT_OCCURRENCE\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":281,"QUERY_TEXT":"\r\n/*********\r\nIS_FOREIGN_KEY\r\nForeign key check\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = VISIT_OCCURRENCE\r\ncdmFieldName = visit_source_concept_id\r\nfkTableName = CONCEPT\r\nfkFieldName = CONCEPT_ID\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'VISIT_OCCURRENCE.visit_source_concept_id' AS violating_field, p1.* \r\n\t\tFROM cdm.VISIT_OCCURRENCE p1\r\n\t\tLEFT JOIN cdm.CONCEPT f1\r\n\t\tON p1.visit_source_concept_id = f1.CONCEPT_ID\r\n\t\tWHERE f1.CONCEPT_ID IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.VISIT_OCCURRENCE\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":282,"QUERY_TEXT":"\r\n/*********\r\nIS_FOREIGN_KEY\r\nForeign key check\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = VISIT_OCCURRENCE\r\ncdmFieldName = admitting_source_concept_id\r\nfkTableName = CONCEPT\r\nfkFieldName = CONCEPT_ID\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'VISIT_OCCURRENCE.admitting_source_concept_id' AS violating_field, p1.* \r\n\t\tFROM cdm.VISIT_OCCURRENCE p1\r\n\t\tLEFT JOIN cdm.CONCEPT f1\r\n\t\tON p1.admitting_source_concept_id = f1.CONCEPT_ID\r\n\t\tWHERE f1.CONCEPT_ID IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.VISIT_OCCURRENCE\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":283,"QUERY_TEXT":"\r\n/*********\r\nIS_FOREIGN_KEY\r\nForeign key check\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = VISIT_OCCURRENCE\r\ncdmFieldName = discharge_to_concept_id\r\nfkTableName = CONCEPT\r\nfkFieldName = CONCEPT_ID\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'VISIT_OCCURRENCE.discharge_to_concept_id' AS violating_field, p1.* \r\n\t\tFROM cdm.VISIT_OCCURRENCE p1\r\n\t\tLEFT JOIN cdm.CONCEPT f1\r\n\t\tON p1.discharge_to_concept_id = f1.CONCEPT_ID\r\n\t\tWHERE f1.CONCEPT_ID IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.VISIT_OCCURRENCE\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":620709,"PCT_VIOLATED_ROWS":1,"CHECK_ID":284,"QUERY_TEXT":"\r\n/*********\r\nIS_FOREIGN_KEY\r\nForeign key check\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = VISIT_OCCURRENCE\r\ncdmFieldName = preceding_visit_occurrence_id\r\nfkTableName = VISIT_OCCURRENCE\r\nfkFieldName = VISIT_OCCURRENCE_ID\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'VISIT_OCCURRENCE.preceding_visit_occurrence_id' AS violating_field, p1.* \r\n\t\tFROM cdm.VISIT_OCCURRENCE p1\r\n\t\tLEFT JOIN cdm.VISIT_OCCURRENCE f1\r\n\t\tON p1.preceding_visit_occurrence_id = f1.VISIT_OCCURRENCE_ID\r\n\t\tWHERE f1.VISIT_OCCURRENCE_ID IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.VISIT_OCCURRENCE\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":285,"QUERY_TEXT":"\r\n/*********\r\nIS_FOREIGN_KEY\r\nForeign key check\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = CONDITION_OCCURRENCE\r\ncdmFieldName = person_id\r\nfkTableName = PERSON\r\nfkFieldName = PERSON_ID\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'CONDITION_OCCURRENCE.person_id' AS violating_field, p1.* \r\n\t\tFROM cdm.CONDITION_OCCURRENCE p1\r\n\t\tLEFT JOIN cdm.PERSON f1\r\n\t\tON p1.person_id = f1.PERSON_ID\r\n\t\tWHERE f1.PERSON_ID IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.CONDITION_OCCURRENCE\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":286,"QUERY_TEXT":"\r\n/*********\r\nIS_FOREIGN_KEY\r\nForeign key check\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = CONDITION_OCCURRENCE\r\ncdmFieldName = condition_concept_id\r\nfkTableName = CONCEPT\r\nfkFieldName = CONCEPT_ID\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'CONDITION_OCCURRENCE.condition_concept_id' AS violating_field, p1.* \r\n\t\tFROM cdm.CONDITION_OCCURRENCE p1\r\n\t\tLEFT JOIN cdm.CONCEPT f1\r\n\t\tON p1.condition_concept_id = f1.CONCEPT_ID\r\n\t\tWHERE f1.CONCEPT_ID IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.CONDITION_OCCURRENCE\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":287,"QUERY_TEXT":"\r\n/*********\r\nIS_FOREIGN_KEY\r\nForeign key check\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = CONDITION_OCCURRENCE\r\ncdmFieldName = condition_type_concept_id\r\nfkTableName = CONCEPT\r\nfkFieldName = CONCEPT_ID\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'CONDITION_OCCURRENCE.condition_type_concept_id' AS violating_field, p1.* \r\n\t\tFROM cdm.CONDITION_OCCURRENCE p1\r\n\t\tLEFT JOIN cdm.CONCEPT f1\r\n\t\tON p1.condition_type_concept_id = f1.CONCEPT_ID\r\n\t\tWHERE f1.CONCEPT_ID IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.CONDITION_OCCURRENCE\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":288,"QUERY_TEXT":"\r\n/*********\r\nIS_FOREIGN_KEY\r\nForeign key check\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = CONDITION_OCCURRENCE\r\ncdmFieldName = condition_status_concept_id\r\nfkTableName = CONCEPT\r\nfkFieldName = CONCEPT_ID\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'CONDITION_OCCURRENCE.condition_status_concept_id' AS violating_field, p1.* \r\n\t\tFROM cdm.CONDITION_OCCURRENCE p1\r\n\t\tLEFT JOIN cdm.CONCEPT f1\r\n\t\tON p1.condition_status_concept_id = f1.CONCEPT_ID\r\n\t\tWHERE f1.CONCEPT_ID IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.CONDITION_OCCURRENCE\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":245805,"PCT_VIOLATED_ROWS":1,"CHECK_ID":289,"QUERY_TEXT":"\r\n/*********\r\nIS_FOREIGN_KEY\r\nForeign key check\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = CONDITION_OCCURRENCE\r\ncdmFieldName = provider_id\r\nfkTableName = PROVIDER\r\nfkFieldName = PROVIDER_ID\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'CONDITION_OCCURRENCE.provider_id' AS violating_field, p1.* \r\n\t\tFROM cdm.CONDITION_OCCURRENCE p1\r\n\t\tLEFT JOIN cdm.PROVIDER f1\r\n\t\tON p1.provider_id = f1.PROVIDER_ID\r\n\t\tWHERE f1.PROVIDER_ID IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.CONDITION_OCCURRENCE\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":54564,"PCT_VIOLATED_ROWS":0.222,"CHECK_ID":290,"QUERY_TEXT":"\r\n/*********\r\nIS_FOREIGN_KEY\r\nForeign key check\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = CONDITION_OCCURRENCE\r\ncdmFieldName = visit_occurrence_id\r\nfkTableName = VISIT_OCCURRENCE\r\nfkFieldName = VISIT_OCCURRENCE_ID\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'CONDITION_OCCURRENCE.visit_occurrence_id' AS violating_field, p1.* \r\n\t\tFROM cdm.CONDITION_OCCURRENCE p1\r\n\t\tLEFT JOIN cdm.VISIT_OCCURRENCE f1\r\n\t\tON p1.visit_occurrence_id = f1.VISIT_OCCURRENCE_ID\r\n\t\tWHERE f1.VISIT_OCCURRENCE_ID IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.CONDITION_OCCURRENCE\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":245805,"PCT_VIOLATED_ROWS":1,"CHECK_ID":291,"QUERY_TEXT":"\r\n/*********\r\nIS_FOREIGN_KEY\r\nForeign key check\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = CONDITION_OCCURRENCE\r\ncdmFieldName = visit_detail_id\r\nfkTableName = VISIT_DETAIL\r\nfkFieldName = VISIT_DETAIL_ID\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'CONDITION_OCCURRENCE.visit_detail_id' AS violating_field, p1.* \r\n\t\tFROM cdm.CONDITION_OCCURRENCE p1\r\n\t\tLEFT JOIN cdm.VISIT_DETAIL f1\r\n\t\tON p1.visit_detail_id = f1.VISIT_DETAIL_ID\r\n\t\tWHERE f1.VISIT_DETAIL_ID IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.CONDITION_OCCURRENCE\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":292,"QUERY_TEXT":"\r\n/*********\r\nIS_FOREIGN_KEY\r\nForeign key check\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = CONDITION_OCCURRENCE\r\ncdmFieldName = condition_source_concept_id\r\nfkTableName = CONCEPT\r\nfkFieldName = CONCEPT_ID\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'CONDITION_OCCURRENCE.condition_source_concept_id' AS violating_field, p1.* \r\n\t\tFROM cdm.CONDITION_OCCURRENCE p1\r\n\t\tLEFT JOIN cdm.CONCEPT f1\r\n\t\tON p1.condition_source_concept_id = f1.CONCEPT_ID\r\n\t\tWHERE f1.CONCEPT_ID IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.CONDITION_OCCURRENCE\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":293,"QUERY_TEXT":"\r\n/*********\r\nIS_FOREIGN_KEY\r\nForeign key check\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = DRUG_EXPOSURE\r\ncdmFieldName = person_id\r\nfkTableName = PERSON\r\nfkFieldName = PERSON_ID\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'DRUG_EXPOSURE.person_id' AS violating_field, p1.* \r\n\t\tFROM cdm.DRUG_EXPOSURE p1\r\n\t\tLEFT JOIN cdm.PERSON f1\r\n\t\tON p1.person_id = f1.PERSON_ID\r\n\t\tWHERE f1.PERSON_ID IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.DRUG_EXPOSURE\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":294,"QUERY_TEXT":"\r\n/*********\r\nIS_FOREIGN_KEY\r\nForeign key check\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = DRUG_EXPOSURE\r\ncdmFieldName = drug_concept_id\r\nfkTableName = CONCEPT\r\nfkFieldName = CONCEPT_ID\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'DRUG_EXPOSURE.drug_concept_id' AS violating_field, p1.* \r\n\t\tFROM cdm.DRUG_EXPOSURE p1\r\n\t\tLEFT JOIN cdm.CONCEPT f1\r\n\t\tON p1.drug_concept_id = f1.CONCEPT_ID\r\n\t\tWHERE f1.CONCEPT_ID IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.DRUG_EXPOSURE\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":295,"QUERY_TEXT":"\r\n/*********\r\nIS_FOREIGN_KEY\r\nForeign key check\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = DRUG_EXPOSURE\r\ncdmFieldName = drug_type_concept_id\r\nfkTableName = CONCEPT\r\nfkFieldName = CONCEPT_ID\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'DRUG_EXPOSURE.drug_type_concept_id' AS violating_field, p1.* \r\n\t\tFROM cdm.DRUG_EXPOSURE p1\r\n\t\tLEFT JOIN cdm.CONCEPT f1\r\n\t\tON p1.drug_type_concept_id = f1.CONCEPT_ID\r\n\t\tWHERE f1.CONCEPT_ID IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.DRUG_EXPOSURE\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":296,"QUERY_TEXT":"\r\n/*********\r\nIS_FOREIGN_KEY\r\nForeign key check\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = DRUG_EXPOSURE\r\ncdmFieldName = route_concept_id\r\nfkTableName = CONCEPT\r\nfkFieldName = CONCEPT_ID\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'DRUG_EXPOSURE.route_concept_id' AS violating_field, p1.* \r\n\t\tFROM cdm.DRUG_EXPOSURE p1\r\n\t\tLEFT JOIN cdm.CONCEPT f1\r\n\t\tON p1.route_concept_id = f1.CONCEPT_ID\r\n\t\tWHERE f1.CONCEPT_ID IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.DRUG_EXPOSURE\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":512038,"PCT_VIOLATED_ROWS":1,"CHECK_ID":297,"QUERY_TEXT":"\r\n/*********\r\nIS_FOREIGN_KEY\r\nForeign key check\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = DRUG_EXPOSURE\r\ncdmFieldName = provider_id\r\nfkTableName = PROVIDER\r\nfkFieldName = PROVIDER_ID\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'DRUG_EXPOSURE.provider_id' AS violating_field, p1.* \r\n\t\tFROM cdm.DRUG_EXPOSURE p1\r\n\t\tLEFT JOIN cdm.PROVIDER f1\r\n\t\tON p1.provider_id = f1.PROVIDER_ID\r\n\t\tWHERE f1.PROVIDER_ID IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.DRUG_EXPOSURE\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":512038,"PCT_VIOLATED_ROWS":1,"CHECK_ID":298,"QUERY_TEXT":"\r\n/*********\r\nIS_FOREIGN_KEY\r\nForeign key check\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = DRUG_EXPOSURE\r\ncdmFieldName = visit_occurrence_id\r\nfkTableName = VISIT_OCCURRENCE\r\nfkFieldName = VISIT_OCCURRENCE_ID\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'DRUG_EXPOSURE.visit_occurrence_id' AS violating_field, p1.* \r\n\t\tFROM cdm.DRUG_EXPOSURE p1\r\n\t\tLEFT JOIN cdm.VISIT_OCCURRENCE f1\r\n\t\tON p1.visit_occurrence_id = f1.VISIT_OCCURRENCE_ID\r\n\t\tWHERE f1.VISIT_OCCURRENCE_ID IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.DRUG_EXPOSURE\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":512038,"PCT_VIOLATED_ROWS":1,"CHECK_ID":299,"QUERY_TEXT":"\r\n/*********\r\nIS_FOREIGN_KEY\r\nForeign key check\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = DRUG_EXPOSURE\r\ncdmFieldName = visit_detail_id\r\nfkTableName = VISIT_DETAIL\r\nfkFieldName = VISIT_DETAIL_ID\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'DRUG_EXPOSURE.visit_detail_id' AS violating_field, p1.* \r\n\t\tFROM cdm.DRUG_EXPOSURE p1\r\n\t\tLEFT JOIN cdm.VISIT_DETAIL f1\r\n\t\tON p1.visit_detail_id = f1.VISIT_DETAIL_ID\r\n\t\tWHERE f1.VISIT_DETAIL_ID IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.DRUG_EXPOSURE\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":300,"QUERY_TEXT":"\r\n/*********\r\nIS_FOREIGN_KEY\r\nForeign key check\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = DRUG_EXPOSURE\r\ncdmFieldName = drug_source_concept_id\r\nfkTableName = CONCEPT\r\nfkFieldName = CONCEPT_ID\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'DRUG_EXPOSURE.drug_source_concept_id' AS violating_field, p1.* \r\n\t\tFROM cdm.DRUG_EXPOSURE p1\r\n\t\tLEFT JOIN cdm.CONCEPT f1\r\n\t\tON p1.drug_source_concept_id = f1.CONCEPT_ID\r\n\t\tWHERE f1.CONCEPT_ID IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.DRUG_EXPOSURE\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":301,"QUERY_TEXT":"\r\n/*********\r\nIS_FOREIGN_KEY\r\nForeign key check\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = PROCEDURE_OCCURRENCE\r\ncdmFieldName = person_id\r\nfkTableName = PERSON\r\nfkFieldName = PERSON_ID\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'PROCEDURE_OCCURRENCE.person_id' AS violating_field, p1.* \r\n\t\tFROM cdm.PROCEDURE_OCCURRENCE p1\r\n\t\tLEFT JOIN cdm.PERSON f1\r\n\t\tON p1.person_id = f1.PERSON_ID\r\n\t\tWHERE f1.PERSON_ID IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.PROCEDURE_OCCURRENCE\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":302,"QUERY_TEXT":"\r\n/*********\r\nIS_FOREIGN_KEY\r\nForeign key check\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = PROCEDURE_OCCURRENCE\r\ncdmFieldName = procedure_concept_id\r\nfkTableName = CONCEPT\r\nfkFieldName = CONCEPT_ID\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'PROCEDURE_OCCURRENCE.procedure_concept_id' AS violating_field, p1.* \r\n\t\tFROM cdm.PROCEDURE_OCCURRENCE p1\r\n\t\tLEFT JOIN cdm.CONCEPT f1\r\n\t\tON p1.procedure_concept_id = f1.CONCEPT_ID\r\n\t\tWHERE f1.CONCEPT_ID IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.PROCEDURE_OCCURRENCE\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":303,"QUERY_TEXT":"\r\n/*********\r\nIS_FOREIGN_KEY\r\nForeign key check\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = PROCEDURE_OCCURRENCE\r\ncdmFieldName = procedure_type_concept_id\r\nfkTableName = CONCEPT\r\nfkFieldName = CONCEPT_ID\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'PROCEDURE_OCCURRENCE.procedure_type_concept_id' AS violating_field, p1.* \r\n\t\tFROM cdm.PROCEDURE_OCCURRENCE p1\r\n\t\tLEFT JOIN cdm.CONCEPT f1\r\n\t\tON p1.procedure_type_concept_id = f1.CONCEPT_ID\r\n\t\tWHERE f1.CONCEPT_ID IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.PROCEDURE_OCCURRENCE\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":304,"QUERY_TEXT":"\r\n/*********\r\nIS_FOREIGN_KEY\r\nForeign key check\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = PROCEDURE_OCCURRENCE\r\ncdmFieldName = modifier_concept_id\r\nfkTableName = CONCEPT\r\nfkFieldName = CONCEPT_ID\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'PROCEDURE_OCCURRENCE.modifier_concept_id' AS violating_field, p1.* \r\n\t\tFROM cdm.PROCEDURE_OCCURRENCE p1\r\n\t\tLEFT JOIN cdm.CONCEPT f1\r\n\t\tON p1.modifier_concept_id = f1.CONCEPT_ID\r\n\t\tWHERE f1.CONCEPT_ID IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.PROCEDURE_OCCURRENCE\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":305,"QUERY_TEXT":"\r\n/*********\r\nIS_FOREIGN_KEY\r\nForeign key check\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = DEVICE_EXPOSURE\r\ncdmFieldName = person_id\r\nfkTableName = PERSON\r\nfkFieldName = PERSON_ID\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'DEVICE_EXPOSURE.person_id' AS violating_field, p1.* \r\n\t\tFROM cdm.DEVICE_EXPOSURE p1\r\n\t\tLEFT JOIN cdm.PERSON f1\r\n\t\tON p1.person_id = f1.PERSON_ID\r\n\t\tWHERE f1.PERSON_ID IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.DEVICE_EXPOSURE\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":306,"QUERY_TEXT":"\r\n/*********\r\nIS_FOREIGN_KEY\r\nForeign key check\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = DEVICE_EXPOSURE\r\ncdmFieldName = device_concept_id\r\nfkTableName = CONCEPT\r\nfkFieldName = CONCEPT_ID\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'DEVICE_EXPOSURE.device_concept_id' AS violating_field, p1.* \r\n\t\tFROM cdm.DEVICE_EXPOSURE p1\r\n\t\tLEFT JOIN cdm.CONCEPT f1\r\n\t\tON p1.device_concept_id = f1.CONCEPT_ID\r\n\t\tWHERE f1.CONCEPT_ID IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.DEVICE_EXPOSURE\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":307,"QUERY_TEXT":"\r\n/*********\r\nIS_FOREIGN_KEY\r\nForeign key check\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = DEVICE_EXPOSURE\r\ncdmFieldName = device_type_concept_id\r\nfkTableName = CONCEPT\r\nfkFieldName = CONCEPT_ID\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'DEVICE_EXPOSURE.device_type_concept_id' AS violating_field, p1.* \r\n\t\tFROM cdm.DEVICE_EXPOSURE p1\r\n\t\tLEFT JOIN cdm.CONCEPT f1\r\n\t\tON p1.device_type_concept_id = f1.CONCEPT_ID\r\n\t\tWHERE f1.CONCEPT_ID IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.DEVICE_EXPOSURE\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":308,"QUERY_TEXT":"\r\n/*********\r\nIS_FOREIGN_KEY\r\nForeign key check\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = DEVICE_EXPOSURE\r\ncdmFieldName = provider_id\r\nfkTableName = PROVIDER\r\nfkFieldName = PROVIDER_ID\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'DEVICE_EXPOSURE.provider_id' AS violating_field, p1.* \r\n\t\tFROM cdm.DEVICE_EXPOSURE p1\r\n\t\tLEFT JOIN cdm.PROVIDER f1\r\n\t\tON p1.provider_id = f1.PROVIDER_ID\r\n\t\tWHERE f1.PROVIDER_ID IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.DEVICE_EXPOSURE\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":309,"QUERY_TEXT":"\r\n/*********\r\nIS_FOREIGN_KEY\r\nForeign key check\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = DEVICE_EXPOSURE\r\ncdmFieldName = visit_occurrence_id\r\nfkTableName = VISIT_OCCURRENCE\r\nfkFieldName = VISIT_OCCURRENCE_ID\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'DEVICE_EXPOSURE.visit_occurrence_id' AS violating_field, p1.* \r\n\t\tFROM cdm.DEVICE_EXPOSURE p1\r\n\t\tLEFT JOIN cdm.VISIT_OCCURRENCE f1\r\n\t\tON p1.visit_occurrence_id = f1.VISIT_OCCURRENCE_ID\r\n\t\tWHERE f1.VISIT_OCCURRENCE_ID IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.DEVICE_EXPOSURE\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":310,"QUERY_TEXT":"\r\n/*********\r\nIS_FOREIGN_KEY\r\nForeign key check\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = DEVICE_EXPOSURE\r\ncdmFieldName = visit_detail_id\r\nfkTableName = VISIT_DETAIL\r\nfkFieldName = VISIT_DETAIL_ID\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'DEVICE_EXPOSURE.visit_detail_id' AS violating_field, p1.* \r\n\t\tFROM cdm.DEVICE_EXPOSURE p1\r\n\t\tLEFT JOIN cdm.VISIT_DETAIL f1\r\n\t\tON p1.visit_detail_id = f1.VISIT_DETAIL_ID\r\n\t\tWHERE f1.VISIT_DETAIL_ID IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.DEVICE_EXPOSURE\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":311,"QUERY_TEXT":"\r\n/*********\r\nIS_FOREIGN_KEY\r\nForeign key check\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = DEVICE_EXPOSURE\r\ncdmFieldName = device_source_concept_id\r\nfkTableName = CONCEPT\r\nfkFieldName = CONCEPT_ID\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'DEVICE_EXPOSURE.device_source_concept_id' AS violating_field, p1.* \r\n\t\tFROM cdm.DEVICE_EXPOSURE p1\r\n\t\tLEFT JOIN cdm.CONCEPT f1\r\n\t\tON p1.device_source_concept_id = f1.CONCEPT_ID\r\n\t\tWHERE f1.CONCEPT_ID IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.DEVICE_EXPOSURE\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":312,"QUERY_TEXT":"\r\n/*********\r\nIS_FOREIGN_KEY\r\nForeign key check\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = MEASUREMENT\r\ncdmFieldName = person_id\r\nfkTableName = PERSON\r\nfkFieldName = PERSON_ID\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'MEASUREMENT.person_id' AS violating_field, p1.* \r\n\t\tFROM cdm.MEASUREMENT p1\r\n\t\tLEFT JOIN cdm.PERSON f1\r\n\t\tON p1.person_id = f1.PERSON_ID\r\n\t\tWHERE f1.PERSON_ID IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.MEASUREMENT\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":313,"QUERY_TEXT":"\r\n/*********\r\nIS_FOREIGN_KEY\r\nForeign key check\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = MEASUREMENT\r\ncdmFieldName = measurement_concept_id\r\nfkTableName = CONCEPT\r\nfkFieldName = CONCEPT_ID\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'MEASUREMENT.measurement_concept_id' AS violating_field, p1.* \r\n\t\tFROM cdm.MEASUREMENT p1\r\n\t\tLEFT JOIN cdm.CONCEPT f1\r\n\t\tON p1.measurement_concept_id = f1.CONCEPT_ID\r\n\t\tWHERE f1.CONCEPT_ID IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.MEASUREMENT\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":314,"QUERY_TEXT":"\r\n/*********\r\nIS_FOREIGN_KEY\r\nForeign key check\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = MEASUREMENT\r\ncdmFieldName = measurement_type_concept_id\r\nfkTableName = CONCEPT\r\nfkFieldName = CONCEPT_ID\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'MEASUREMENT.measurement_type_concept_id' AS violating_field, p1.* \r\n\t\tFROM cdm.MEASUREMENT p1\r\n\t\tLEFT JOIN cdm.CONCEPT f1\r\n\t\tON p1.measurement_type_concept_id = f1.CONCEPT_ID\r\n\t\tWHERE f1.CONCEPT_ID IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.MEASUREMENT\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":315,"QUERY_TEXT":"\r\n/*********\r\nIS_FOREIGN_KEY\r\nForeign key check\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = MEASUREMENT\r\ncdmFieldName = operator_concept_id\r\nfkTableName = CONCEPT\r\nfkFieldName = CONCEPT_ID\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'MEASUREMENT.operator_concept_id' AS violating_field, p1.* \r\n\t\tFROM cdm.MEASUREMENT p1\r\n\t\tLEFT JOIN cdm.CONCEPT f1\r\n\t\tON p1.operator_concept_id = f1.CONCEPT_ID\r\n\t\tWHERE f1.CONCEPT_ID IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.MEASUREMENT\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":316,"QUERY_TEXT":"\r\n/*********\r\nIS_FOREIGN_KEY\r\nForeign key check\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = MEASUREMENT\r\ncdmFieldName = value_as_concept_id\r\nfkTableName = CONCEPT\r\nfkFieldName = CONCEPT_ID\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'MEASUREMENT.value_as_concept_id' AS violating_field, p1.* \r\n\t\tFROM cdm.MEASUREMENT p1\r\n\t\tLEFT JOIN cdm.CONCEPT f1\r\n\t\tON p1.value_as_concept_id = f1.CONCEPT_ID\r\n\t\tWHERE f1.CONCEPT_ID IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.MEASUREMENT\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":317,"QUERY_TEXT":"\r\n/*********\r\nIS_FOREIGN_KEY\r\nForeign key check\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = MEASUREMENT\r\ncdmFieldName = unit_concept_id\r\nfkTableName = CONCEPT\r\nfkFieldName = CONCEPT_ID\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'MEASUREMENT.unit_concept_id' AS violating_field, p1.* \r\n\t\tFROM cdm.MEASUREMENT p1\r\n\t\tLEFT JOIN cdm.CONCEPT f1\r\n\t\tON p1.unit_concept_id = f1.CONCEPT_ID\r\n\t\tWHERE f1.CONCEPT_ID IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.MEASUREMENT\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":13813277,"PCT_VIOLATED_ROWS":1,"CHECK_ID":318,"QUERY_TEXT":"\r\n/*********\r\nIS_FOREIGN_KEY\r\nForeign key check\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = MEASUREMENT\r\ncdmFieldName = provider_id\r\nfkTableName = PROVIDER\r\nfkFieldName = PROVIDER_ID\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'MEASUREMENT.provider_id' AS violating_field, p1.* \r\n\t\tFROM cdm.MEASUREMENT p1\r\n\t\tLEFT JOIN cdm.PROVIDER f1\r\n\t\tON p1.provider_id = f1.PROVIDER_ID\r\n\t\tWHERE f1.PROVIDER_ID IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.MEASUREMENT\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":158893,"PCT_VIOLATED_ROWS":0.0115,"CHECK_ID":319,"QUERY_TEXT":"\r\n/*********\r\nIS_FOREIGN_KEY\r\nForeign key check\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = MEASUREMENT\r\ncdmFieldName = visit_occurrence_id\r\nfkTableName = VISIT_OCCURRENCE\r\nfkFieldName = VISIT_OCCURRENCE_ID\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'MEASUREMENT.visit_occurrence_id' AS violating_field, p1.* \r\n\t\tFROM cdm.MEASUREMENT p1\r\n\t\tLEFT JOIN cdm.VISIT_OCCURRENCE f1\r\n\t\tON p1.visit_occurrence_id = f1.VISIT_OCCURRENCE_ID\r\n\t\tWHERE f1.VISIT_OCCURRENCE_ID IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.MEASUREMENT\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":13813277,"PCT_VIOLATED_ROWS":1,"CHECK_ID":320,"QUERY_TEXT":"\r\n/*********\r\nIS_FOREIGN_KEY\r\nForeign key check\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = MEASUREMENT\r\ncdmFieldName = visit_detail_id\r\nfkTableName = VISIT_DETAIL\r\nfkFieldName = VISIT_DETAIL_ID\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'MEASUREMENT.visit_detail_id' AS violating_field, p1.* \r\n\t\tFROM cdm.MEASUREMENT p1\r\n\t\tLEFT JOIN cdm.VISIT_DETAIL f1\r\n\t\tON p1.visit_detail_id = f1.VISIT_DETAIL_ID\r\n\t\tWHERE f1.VISIT_DETAIL_ID IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.MEASUREMENT\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":321,"QUERY_TEXT":"\r\n/*********\r\nIS_FOREIGN_KEY\r\nForeign key check\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = MEASUREMENT\r\ncdmFieldName = measurement_source_concept_id\r\nfkTableName = CONCEPT\r\nfkFieldName = CONCEPT_ID\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'MEASUREMENT.measurement_source_concept_id' AS violating_field, p1.* \r\n\t\tFROM cdm.MEASUREMENT p1\r\n\t\tLEFT JOIN cdm.CONCEPT f1\r\n\t\tON p1.measurement_source_concept_id = f1.CONCEPT_ID\r\n\t\tWHERE f1.CONCEPT_ID IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.MEASUREMENT\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":322,"QUERY_TEXT":"\r\n/*********\r\nIS_FOREIGN_KEY\r\nForeign key check\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = VISIT_DETAIL\r\ncdmFieldName = person_id\r\nfkTableName = PERSON\r\nfkFieldName = PERSON_ID\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'VISIT_DETAIL.person_id' AS violating_field, p1.* \r\n\t\tFROM cdm.VISIT_DETAIL p1\r\n\t\tLEFT JOIN cdm.PERSON f1\r\n\t\tON p1.person_id = f1.PERSON_ID\r\n\t\tWHERE f1.PERSON_ID IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.VISIT_DETAIL\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":323,"QUERY_TEXT":"\r\n/*********\r\nIS_FOREIGN_KEY\r\nForeign key check\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = VISIT_DETAIL\r\ncdmFieldName = visit_detail_concept_id\r\nfkTableName = CONCEPT\r\nfkFieldName = CONCEPT_ID\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'VISIT_DETAIL.visit_detail_concept_id' AS violating_field, p1.* \r\n\t\tFROM cdm.VISIT_DETAIL p1\r\n\t\tLEFT JOIN cdm.CONCEPT f1\r\n\t\tON p1.visit_detail_concept_id = f1.CONCEPT_ID\r\n\t\tWHERE f1.CONCEPT_ID IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.VISIT_DETAIL\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":324,"QUERY_TEXT":"\r\n/*********\r\nIS_FOREIGN_KEY\r\nForeign key check\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = VISIT_DETAIL\r\ncdmFieldName = visit_detail_type_concept_id\r\nfkTableName = CONCEPT\r\nfkFieldName = CONCEPT_ID\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'VISIT_DETAIL.visit_detail_type_concept_id' AS violating_field, p1.* \r\n\t\tFROM cdm.VISIT_DETAIL p1\r\n\t\tLEFT JOIN cdm.CONCEPT f1\r\n\t\tON p1.visit_detail_type_concept_id = f1.CONCEPT_ID\r\n\t\tWHERE f1.CONCEPT_ID IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.VISIT_DETAIL\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":325,"QUERY_TEXT":"\r\n/*********\r\nIS_FOREIGN_KEY\r\nForeign key check\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = VISIT_DETAIL\r\ncdmFieldName = provider_id\r\nfkTableName = PROVIDER\r\nfkFieldName = PROVIDER_ID\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'VISIT_DETAIL.provider_id' AS violating_field, p1.* \r\n\t\tFROM cdm.VISIT_DETAIL p1\r\n\t\tLEFT JOIN cdm.PROVIDER f1\r\n\t\tON p1.provider_id = f1.PROVIDER_ID\r\n\t\tWHERE f1.PROVIDER_ID IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.VISIT_DETAIL\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":326,"QUERY_TEXT":"\r\n/*********\r\nIS_FOREIGN_KEY\r\nForeign key check\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = VISIT_DETAIL\r\ncdmFieldName = care_site_id\r\nfkTableName = CARE_SITE\r\nfkFieldName = CARE_SITE_ID\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'VISIT_DETAIL.care_site_id' AS violating_field, p1.* \r\n\t\tFROM cdm.VISIT_DETAIL p1\r\n\t\tLEFT JOIN cdm.CARE_SITE f1\r\n\t\tON p1.care_site_id = f1.CARE_SITE_ID\r\n\t\tWHERE f1.CARE_SITE_ID IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.VISIT_DETAIL\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":327,"QUERY_TEXT":"\r\n/*********\r\nIS_FOREIGN_KEY\r\nForeign key check\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = VISIT_DETAIL\r\ncdmFieldName = visit_detail_source_concept_id\r\nfkTableName = CONCEPT\r\nfkFieldName = CONCEPT_ID\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'VISIT_DETAIL.visit_detail_source_concept_id' AS violating_field, p1.* \r\n\t\tFROM cdm.VISIT_DETAIL p1\r\n\t\tLEFT JOIN cdm.CONCEPT f1\r\n\t\tON p1.visit_detail_source_concept_id = f1.CONCEPT_ID\r\n\t\tWHERE f1.CONCEPT_ID IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.VISIT_DETAIL\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":328,"QUERY_TEXT":"\r\n/*********\r\nIS_FOREIGN_KEY\r\nForeign key check\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = VISIT_DETAIL\r\ncdmFieldName = admitting_source_concept_id\r\nfkTableName = CONCEPT\r\nfkFieldName = CONCEPT_ID\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'VISIT_DETAIL.admitting_source_concept_id' AS violating_field, p1.* \r\n\t\tFROM cdm.VISIT_DETAIL p1\r\n\t\tLEFT JOIN cdm.CONCEPT f1\r\n\t\tON p1.admitting_source_concept_id = f1.CONCEPT_ID\r\n\t\tWHERE f1.CONCEPT_ID IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.VISIT_DETAIL\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":329,"QUERY_TEXT":"\r\n/*********\r\nIS_FOREIGN_KEY\r\nForeign key check\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = VISIT_DETAIL\r\ncdmFieldName = discharge_to_concept_id\r\nfkTableName = CONCEPT\r\nfkFieldName = CONCEPT_ID\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'VISIT_DETAIL.discharge_to_concept_id' AS violating_field, p1.* \r\n\t\tFROM cdm.VISIT_DETAIL p1\r\n\t\tLEFT JOIN cdm.CONCEPT f1\r\n\t\tON p1.discharge_to_concept_id = f1.CONCEPT_ID\r\n\t\tWHERE f1.CONCEPT_ID IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.VISIT_DETAIL\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":330,"QUERY_TEXT":"\r\n/*********\r\nIS_FOREIGN_KEY\r\nForeign key check\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = VISIT_DETAIL\r\ncdmFieldName = preceding_visit_detail_id\r\nfkTableName = VISIT_DETAIL\r\nfkFieldName = VISIT_DETAIL_ID\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'VISIT_DETAIL.preceding_visit_detail_id' AS violating_field, p1.* \r\n\t\tFROM cdm.VISIT_DETAIL p1\r\n\t\tLEFT JOIN cdm.VISIT_DETAIL f1\r\n\t\tON p1.preceding_visit_detail_id = f1.VISIT_DETAIL_ID\r\n\t\tWHERE f1.VISIT_DETAIL_ID IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.VISIT_DETAIL\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":331,"QUERY_TEXT":"\r\n/*********\r\nIS_FOREIGN_KEY\r\nForeign key check\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = VISIT_DETAIL\r\ncdmFieldName = visit_detail_parent_id\r\nfkTableName = VISIT_DETAIL\r\nfkFieldName = VISIT_DETAIL_ID\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'VISIT_DETAIL.visit_detail_parent_id' AS violating_field, p1.* \r\n\t\tFROM cdm.VISIT_DETAIL p1\r\n\t\tLEFT JOIN cdm.VISIT_DETAIL f1\r\n\t\tON p1.visit_detail_parent_id = f1.VISIT_DETAIL_ID\r\n\t\tWHERE f1.VISIT_DETAIL_ID IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.VISIT_DETAIL\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":332,"QUERY_TEXT":"\r\n/*********\r\nIS_FOREIGN_KEY\r\nForeign key check\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = VISIT_DETAIL\r\ncdmFieldName = visit_occurrence_id\r\nfkTableName = VISIT_OCCURRENCE\r\nfkFieldName = VISIT_OCCURRENCE_ID\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'VISIT_DETAIL.visit_occurrence_id' AS violating_field, p1.* \r\n\t\tFROM cdm.VISIT_DETAIL p1\r\n\t\tLEFT JOIN cdm.VISIT_OCCURRENCE f1\r\n\t\tON p1.visit_occurrence_id = f1.VISIT_OCCURRENCE_ID\r\n\t\tWHERE f1.VISIT_OCCURRENCE_ID IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.VISIT_DETAIL\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":333,"QUERY_TEXT":"\r\n/*********\r\nIS_FOREIGN_KEY\r\nForeign key check\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = NOTE\r\ncdmFieldName = person_id\r\nfkTableName = PERSON\r\nfkFieldName = PERSON_ID\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'NOTE.person_id' AS violating_field, p1.* \r\n\t\tFROM cdm.NOTE p1\r\n\t\tLEFT JOIN cdm.PERSON f1\r\n\t\tON p1.person_id = f1.PERSON_ID\r\n\t\tWHERE f1.PERSON_ID IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.NOTE\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":334,"QUERY_TEXT":"\r\n/*********\r\nIS_FOREIGN_KEY\r\nForeign key check\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = NOTE\r\ncdmFieldName = note_type_concept_id\r\nfkTableName = CONCEPT\r\nfkFieldName = CONCEPT_ID\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'NOTE.note_type_concept_id' AS violating_field, p1.* \r\n\t\tFROM cdm.NOTE p1\r\n\t\tLEFT JOIN cdm.CONCEPT f1\r\n\t\tON p1.note_type_concept_id = f1.CONCEPT_ID\r\n\t\tWHERE f1.CONCEPT_ID IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.NOTE\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":335,"QUERY_TEXT":"\r\n/*********\r\nIS_FOREIGN_KEY\r\nForeign key check\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = NOTE\r\ncdmFieldName = note_class_concept_id\r\nfkTableName = CONCEPT\r\nfkFieldName = CONCEPT_ID\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'NOTE.note_class_concept_id' AS violating_field, p1.* \r\n\t\tFROM cdm.NOTE p1\r\n\t\tLEFT JOIN cdm.CONCEPT f1\r\n\t\tON p1.note_class_concept_id = f1.CONCEPT_ID\r\n\t\tWHERE f1.CONCEPT_ID IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.NOTE\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":336,"QUERY_TEXT":"\r\n/*********\r\nIS_FOREIGN_KEY\r\nForeign key check\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = NOTE\r\ncdmFieldName = encoding_concept_id\r\nfkTableName = CONCEPT\r\nfkFieldName = CONCEPT_ID\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'NOTE.encoding_concept_id' AS violating_field, p1.* \r\n\t\tFROM cdm.NOTE p1\r\n\t\tLEFT JOIN cdm.CONCEPT f1\r\n\t\tON p1.encoding_concept_id = f1.CONCEPT_ID\r\n\t\tWHERE f1.CONCEPT_ID IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.NOTE\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":337,"QUERY_TEXT":"\r\n/*********\r\nIS_FOREIGN_KEY\r\nForeign key check\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = NOTE\r\ncdmFieldName = language_concept_id\r\nfkTableName = CONCEPT\r\nfkFieldName = CONCEPT_ID\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'NOTE.language_concept_id' AS violating_field, p1.* \r\n\t\tFROM cdm.NOTE p1\r\n\t\tLEFT JOIN cdm.CONCEPT f1\r\n\t\tON p1.language_concept_id = f1.CONCEPT_ID\r\n\t\tWHERE f1.CONCEPT_ID IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.NOTE\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":338,"QUERY_TEXT":"\r\n/*********\r\nIS_FOREIGN_KEY\r\nForeign key check\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = NOTE\r\ncdmFieldName = provider_id\r\nfkTableName = PROVIDER\r\nfkFieldName = PROVIDER_ID\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'NOTE.provider_id' AS violating_field, p1.* \r\n\t\tFROM cdm.NOTE p1\r\n\t\tLEFT JOIN cdm.PROVIDER f1\r\n\t\tON p1.provider_id = f1.PROVIDER_ID\r\n\t\tWHERE f1.PROVIDER_ID IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.NOTE\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":339,"QUERY_TEXT":"\r\n/*********\r\nIS_FOREIGN_KEY\r\nForeign key check\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = NOTE\r\ncdmFieldName = visit_occurrence_id\r\nfkTableName = VISIT_OCCURRENCE\r\nfkFieldName = VISIT_OCCURRENCE_ID\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'NOTE.visit_occurrence_id' AS violating_field, p1.* \r\n\t\tFROM cdm.NOTE p1\r\n\t\tLEFT JOIN cdm.VISIT_OCCURRENCE f1\r\n\t\tON p1.visit_occurrence_id = f1.VISIT_OCCURRENCE_ID\r\n\t\tWHERE f1.VISIT_OCCURRENCE_ID IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.NOTE\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":340,"QUERY_TEXT":"\r\n/*********\r\nIS_FOREIGN_KEY\r\nForeign key check\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = NOTE\r\ncdmFieldName = visit_detail_id\r\nfkTableName = VISIT_DETAIL\r\nfkFieldName = VISIT_DETAIL_ID\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'NOTE.visit_detail_id' AS violating_field, p1.* \r\n\t\tFROM cdm.NOTE p1\r\n\t\tLEFT JOIN cdm.VISIT_DETAIL f1\r\n\t\tON p1.visit_detail_id = f1.VISIT_DETAIL_ID\r\n\t\tWHERE f1.VISIT_DETAIL_ID IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.NOTE\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":341,"QUERY_TEXT":"\r\n/*********\r\nIS_FOREIGN_KEY\r\nForeign key check\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = NOTE_NLP\r\ncdmFieldName = section_concept_id\r\nfkTableName = NOTE\r\nfkFieldName = NOTE_ID\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'NOTE_NLP.section_concept_id' AS violating_field, p1.* \r\n\t\tFROM cdm.NOTE_NLP p1\r\n\t\tLEFT JOIN cdm.NOTE f1\r\n\t\tON p1.section_concept_id = f1.NOTE_ID\r\n\t\tWHERE f1.NOTE_ID IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.NOTE_NLP\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":342,"QUERY_TEXT":"\r\n/*********\r\nIS_FOREIGN_KEY\r\nForeign key check\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = NOTE_NLP\r\ncdmFieldName = note_nlp_concept_id\r\nfkTableName = CONCEPT\r\nfkFieldName = CONCEPT_ID\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'NOTE_NLP.note_nlp_concept_id' AS violating_field, p1.* \r\n\t\tFROM cdm.NOTE_NLP p1\r\n\t\tLEFT JOIN cdm.CONCEPT f1\r\n\t\tON p1.note_nlp_concept_id = f1.CONCEPT_ID\r\n\t\tWHERE f1.CONCEPT_ID IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.NOTE_NLP\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":343,"QUERY_TEXT":"\r\n/*********\r\nIS_FOREIGN_KEY\r\nForeign key check\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = NOTE_NLP\r\ncdmFieldName = note_nlp_source_concept_id\r\nfkTableName = CONCEPT\r\nfkFieldName = CONCEPT_ID\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'NOTE_NLP.note_nlp_source_concept_id' AS violating_field, p1.* \r\n\t\tFROM cdm.NOTE_NLP p1\r\n\t\tLEFT JOIN cdm.CONCEPT f1\r\n\t\tON p1.note_nlp_source_concept_id = f1.CONCEPT_ID\r\n\t\tWHERE f1.CONCEPT_ID IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.NOTE_NLP\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":344,"QUERY_TEXT":"\r\n/*********\r\nIS_FOREIGN_KEY\r\nForeign key check\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = OBSERVATION\r\ncdmFieldName = person_id\r\nfkTableName = PERSON\r\nfkFieldName = PERSON_ID\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'OBSERVATION.person_id' AS violating_field, p1.* \r\n\t\tFROM cdm.OBSERVATION p1\r\n\t\tLEFT JOIN cdm.PERSON f1\r\n\t\tON p1.person_id = f1.PERSON_ID\r\n\t\tWHERE f1.PERSON_ID IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.OBSERVATION\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":345,"QUERY_TEXT":"\r\n/*********\r\nIS_FOREIGN_KEY\r\nForeign key check\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = OBSERVATION\r\ncdmFieldName = observation_concept_id\r\nfkTableName = CONCEPT\r\nfkFieldName = CONCEPT_ID\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'OBSERVATION.observation_concept_id' AS violating_field, p1.* \r\n\t\tFROM cdm.OBSERVATION p1\r\n\t\tLEFT JOIN cdm.CONCEPT f1\r\n\t\tON p1.observation_concept_id = f1.CONCEPT_ID\r\n\t\tWHERE f1.CONCEPT_ID IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.OBSERVATION\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":346,"QUERY_TEXT":"\r\n/*********\r\nIS_FOREIGN_KEY\r\nForeign key check\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = OBSERVATION\r\ncdmFieldName = observation_type_concept_id\r\nfkTableName = CONCEPT\r\nfkFieldName = CONCEPT_ID\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'OBSERVATION.observation_type_concept_id' AS violating_field, p1.* \r\n\t\tFROM cdm.OBSERVATION p1\r\n\t\tLEFT JOIN cdm.CONCEPT f1\r\n\t\tON p1.observation_type_concept_id = f1.CONCEPT_ID\r\n\t\tWHERE f1.CONCEPT_ID IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.OBSERVATION\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":347,"QUERY_TEXT":"\r\n/*********\r\nIS_FOREIGN_KEY\r\nForeign key check\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = OBSERVATION\r\ncdmFieldName = value_as_concept_id\r\nfkTableName = CONCEPT\r\nfkFieldName = CONCEPT_ID\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'OBSERVATION.value_as_concept_id' AS violating_field, p1.* \r\n\t\tFROM cdm.OBSERVATION p1\r\n\t\tLEFT JOIN cdm.CONCEPT f1\r\n\t\tON p1.value_as_concept_id = f1.CONCEPT_ID\r\n\t\tWHERE f1.CONCEPT_ID IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.OBSERVATION\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":348,"QUERY_TEXT":"\r\n/*********\r\nIS_FOREIGN_KEY\r\nForeign key check\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = OBSERVATION\r\ncdmFieldName = qualifier_concept_id\r\nfkTableName = CONCEPT\r\nfkFieldName = CONCEPT_ID\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'OBSERVATION.qualifier_concept_id' AS violating_field, p1.* \r\n\t\tFROM cdm.OBSERVATION p1\r\n\t\tLEFT JOIN cdm.CONCEPT f1\r\n\t\tON p1.qualifier_concept_id = f1.CONCEPT_ID\r\n\t\tWHERE f1.CONCEPT_ID IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.OBSERVATION\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":349,"QUERY_TEXT":"\r\n/*********\r\nIS_FOREIGN_KEY\r\nForeign key check\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = OBSERVATION\r\ncdmFieldName = unit_concept_id\r\nfkTableName = CONCEPT\r\nfkFieldName = CONCEPT_ID\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'OBSERVATION.unit_concept_id' AS violating_field, p1.* \r\n\t\tFROM cdm.OBSERVATION p1\r\n\t\tLEFT JOIN cdm.CONCEPT f1\r\n\t\tON p1.unit_concept_id = f1.CONCEPT_ID\r\n\t\tWHERE f1.CONCEPT_ID IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.OBSERVATION\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":61864,"PCT_VIOLATED_ROWS":1,"CHECK_ID":350,"QUERY_TEXT":"\r\n/*********\r\nIS_FOREIGN_KEY\r\nForeign key check\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = OBSERVATION\r\ncdmFieldName = provider_id\r\nfkTableName = PROVIDER\r\nfkFieldName = PROVIDER_ID\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'OBSERVATION.provider_id' AS violating_field, p1.* \r\n\t\tFROM cdm.OBSERVATION p1\r\n\t\tLEFT JOIN cdm.PROVIDER f1\r\n\t\tON p1.provider_id = f1.PROVIDER_ID\r\n\t\tWHERE f1.PROVIDER_ID IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.OBSERVATION\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":35163,"PCT_VIOLATED_ROWS":0.5684,"CHECK_ID":351,"QUERY_TEXT":"\r\n/*********\r\nIS_FOREIGN_KEY\r\nForeign key check\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = OBSERVATION\r\ncdmFieldName = visit_occurrence_id\r\nfkTableName = VISIT_OCCURRENCE\r\nfkFieldName = VISIT_OCCURRENCE_ID\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'OBSERVATION.visit_occurrence_id' AS violating_field, p1.* \r\n\t\tFROM cdm.OBSERVATION p1\r\n\t\tLEFT JOIN cdm.VISIT_OCCURRENCE f1\r\n\t\tON p1.visit_occurrence_id = f1.VISIT_OCCURRENCE_ID\r\n\t\tWHERE f1.VISIT_OCCURRENCE_ID IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.OBSERVATION\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":61864,"PCT_VIOLATED_ROWS":1,"CHECK_ID":352,"QUERY_TEXT":"\r\n/*********\r\nIS_FOREIGN_KEY\r\nForeign key check\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = OBSERVATION\r\ncdmFieldName = visit_detail_id\r\nfkTableName = VISIT_DETAIL\r\nfkFieldName = VISIT_DETAIL_ID\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'OBSERVATION.visit_detail_id' AS violating_field, p1.* \r\n\t\tFROM cdm.OBSERVATION p1\r\n\t\tLEFT JOIN cdm.VISIT_DETAIL f1\r\n\t\tON p1.visit_detail_id = f1.VISIT_DETAIL_ID\r\n\t\tWHERE f1.VISIT_DETAIL_ID IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.OBSERVATION\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":353,"QUERY_TEXT":"\r\n/*********\r\nIS_FOREIGN_KEY\r\nForeign key check\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = OBSERVATION\r\ncdmFieldName = observation_source_concept_id\r\nfkTableName = CONCEPT\r\nfkFieldName = CONCEPT_ID\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'OBSERVATION.observation_source_concept_id' AS violating_field, p1.* \r\n\t\tFROM cdm.OBSERVATION p1\r\n\t\tLEFT JOIN cdm.CONCEPT f1\r\n\t\tON p1.observation_source_concept_id = f1.CONCEPT_ID\r\n\t\tWHERE f1.CONCEPT_ID IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.OBSERVATION\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":354,"QUERY_TEXT":"\r\n/*********\r\nIS_FOREIGN_KEY\r\nForeign key check\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = SPECIMEN\r\ncdmFieldName = person_id\r\nfkTableName = PERSON\r\nfkFieldName = PERSON_ID\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'SPECIMEN.person_id' AS violating_field, p1.* \r\n\t\tFROM cdm.SPECIMEN p1\r\n\t\tLEFT JOIN cdm.PERSON f1\r\n\t\tON p1.person_id = f1.PERSON_ID\r\n\t\tWHERE f1.PERSON_ID IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.SPECIMEN\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":355,"QUERY_TEXT":"\r\n/*********\r\nIS_FOREIGN_KEY\r\nForeign key check\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = SPECIMEN\r\ncdmFieldName = specimen_concept_id\r\nfkTableName = CONCEPT\r\nfkFieldName = CONCEPT_ID\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'SPECIMEN.specimen_concept_id' AS violating_field, p1.* \r\n\t\tFROM cdm.SPECIMEN p1\r\n\t\tLEFT JOIN cdm.CONCEPT f1\r\n\t\tON p1.specimen_concept_id = f1.CONCEPT_ID\r\n\t\tWHERE f1.CONCEPT_ID IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.SPECIMEN\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":356,"QUERY_TEXT":"\r\n/*********\r\nIS_FOREIGN_KEY\r\nForeign key check\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = SPECIMEN\r\ncdmFieldName = specimen_type_concept_id\r\nfkTableName = CONCEPT\r\nfkFieldName = CONCEPT_ID\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'SPECIMEN.specimen_type_concept_id' AS violating_field, p1.* \r\n\t\tFROM cdm.SPECIMEN p1\r\n\t\tLEFT JOIN cdm.CONCEPT f1\r\n\t\tON p1.specimen_type_concept_id = f1.CONCEPT_ID\r\n\t\tWHERE f1.CONCEPT_ID IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.SPECIMEN\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":357,"QUERY_TEXT":"\r\n/*********\r\nIS_FOREIGN_KEY\r\nForeign key check\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = SPECIMEN\r\ncdmFieldName = unit_concept_id\r\nfkTableName = CONCEPT\r\nfkFieldName = CONCEPT_ID\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'SPECIMEN.unit_concept_id' AS violating_field, p1.* \r\n\t\tFROM cdm.SPECIMEN p1\r\n\t\tLEFT JOIN cdm.CONCEPT f1\r\n\t\tON p1.unit_concept_id = f1.CONCEPT_ID\r\n\t\tWHERE f1.CONCEPT_ID IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.SPECIMEN\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":358,"QUERY_TEXT":"\r\n/*********\r\nIS_FOREIGN_KEY\r\nForeign key check\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = SPECIMEN\r\ncdmFieldName = anatomic_site_concept_id\r\nfkTableName = CONCEPT\r\nfkFieldName = CONCEPT_ID\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'SPECIMEN.anatomic_site_concept_id' AS violating_field, p1.* \r\n\t\tFROM cdm.SPECIMEN p1\r\n\t\tLEFT JOIN cdm.CONCEPT f1\r\n\t\tON p1.anatomic_site_concept_id = f1.CONCEPT_ID\r\n\t\tWHERE f1.CONCEPT_ID IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.SPECIMEN\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":359,"QUERY_TEXT":"\r\n/*********\r\nIS_FOREIGN_KEY\r\nForeign key check\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = SPECIMEN\r\ncdmFieldName = disease_status_concept_id\r\nfkTableName = CONCEPT\r\nfkFieldName = CONCEPT_ID\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'SPECIMEN.disease_status_concept_id' AS violating_field, p1.* \r\n\t\tFROM cdm.SPECIMEN p1\r\n\t\tLEFT JOIN cdm.CONCEPT f1\r\n\t\tON p1.disease_status_concept_id = f1.CONCEPT_ID\r\n\t\tWHERE f1.CONCEPT_ID IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.SPECIMEN\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":360,"QUERY_TEXT":"\r\n/*********\r\nIS_FOREIGN_KEY\r\nForeign key check\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = FACT_RELATIONSHIP\r\ncdmFieldName = domain_concept_id_1\r\nfkTableName = CONCEPT\r\nfkFieldName = CONCEPT_ID\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'FACT_RELATIONSHIP.domain_concept_id_1' AS violating_field, p1.* \r\n\t\tFROM cdm.FACT_RELATIONSHIP p1\r\n\t\tLEFT JOIN cdm.CONCEPT f1\r\n\t\tON p1.domain_concept_id_1 = f1.CONCEPT_ID\r\n\t\tWHERE f1.CONCEPT_ID IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.FACT_RELATIONSHIP\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":361,"QUERY_TEXT":"\r\n/*********\r\nIS_FOREIGN_KEY\r\nForeign key check\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = FACT_RELATIONSHIP\r\ncdmFieldName = domain_concept_id_2\r\nfkTableName = CONCEPT\r\nfkFieldName = CONCEPT_ID\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'FACT_RELATIONSHIP.domain_concept_id_2' AS violating_field, p1.* \r\n\t\tFROM cdm.FACT_RELATIONSHIP p1\r\n\t\tLEFT JOIN cdm.CONCEPT f1\r\n\t\tON p1.domain_concept_id_2 = f1.CONCEPT_ID\r\n\t\tWHERE f1.CONCEPT_ID IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.FACT_RELATIONSHIP\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":362,"QUERY_TEXT":"\r\n/*********\r\nIS_FOREIGN_KEY\r\nForeign key check\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = FACT_RELATIONSHIP\r\ncdmFieldName = relationship_concept_id\r\nfkTableName = CONCEPT\r\nfkFieldName = CONCEPT_ID\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'FACT_RELATIONSHIP.relationship_concept_id' AS violating_field, p1.* \r\n\t\tFROM cdm.FACT_RELATIONSHIP p1\r\n\t\tLEFT JOIN cdm.CONCEPT f1\r\n\t\tON p1.relationship_concept_id = f1.CONCEPT_ID\r\n\t\tWHERE f1.CONCEPT_ID IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.FACT_RELATIONSHIP\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":363,"QUERY_TEXT":"\r\n/*********\r\nIS_FOREIGN_KEY\r\nForeign key check\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = CARE_SITE\r\ncdmFieldName = place_of_service_concept_id\r\nfkTableName = CONCEPT\r\nfkFieldName = CONCEPT_ID\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'CARE_SITE.place_of_service_concept_id' AS violating_field, p1.* \r\n\t\tFROM cdm.CARE_SITE p1\r\n\t\tLEFT JOIN cdm.CONCEPT f1\r\n\t\tON p1.place_of_service_concept_id = f1.CONCEPT_ID\r\n\t\tWHERE f1.CONCEPT_ID IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.CARE_SITE\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":364,"QUERY_TEXT":"\r\n/*********\r\nIS_FOREIGN_KEY\r\nForeign key check\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = PROVIDER\r\ncdmFieldName = specialty_concept_id\r\nfkTableName = CONCEPT\r\nfkFieldName = CONCEPT_ID\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'PROVIDER.specialty_concept_id' AS violating_field, p1.* \r\n\t\tFROM cdm.PROVIDER p1\r\n\t\tLEFT JOIN cdm.CONCEPT f1\r\n\t\tON p1.specialty_concept_id = f1.CONCEPT_ID\r\n\t\tWHERE f1.CONCEPT_ID IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.PROVIDER\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":365,"QUERY_TEXT":"\r\n/*********\r\nIS_FOREIGN_KEY\r\nForeign key check\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = PROVIDER\r\ncdmFieldName = care_site_id\r\nfkTableName = CARE_SITE\r\nfkFieldName = CARE_SITE_ID\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'PROVIDER.care_site_id' AS violating_field, p1.* \r\n\t\tFROM cdm.PROVIDER p1\r\n\t\tLEFT JOIN cdm.CARE_SITE f1\r\n\t\tON p1.care_site_id = f1.CARE_SITE_ID\r\n\t\tWHERE f1.CARE_SITE_ID IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.PROVIDER\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":366,"QUERY_TEXT":"\r\n/*********\r\nIS_FOREIGN_KEY\r\nForeign key check\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = PROVIDER\r\ncdmFieldName = gender_concept_id\r\nfkTableName = CONCEPT\r\nfkFieldName = CONCEPT_ID\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'PROVIDER.gender_concept_id' AS violating_field, p1.* \r\n\t\tFROM cdm.PROVIDER p1\r\n\t\tLEFT JOIN cdm.CONCEPT f1\r\n\t\tON p1.gender_concept_id = f1.CONCEPT_ID\r\n\t\tWHERE f1.CONCEPT_ID IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.PROVIDER\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":367,"QUERY_TEXT":"\r\n/*********\r\nIS_FOREIGN_KEY\r\nForeign key check\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = PROVIDER\r\ncdmFieldName = specialty_source_concept_id\r\nfkTableName = CONCEPT\r\nfkFieldName = CONCEPT_ID\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'PROVIDER.specialty_source_concept_id' AS violating_field, p1.* \r\n\t\tFROM cdm.PROVIDER p1\r\n\t\tLEFT JOIN cdm.CONCEPT f1\r\n\t\tON p1.specialty_source_concept_id = f1.CONCEPT_ID\r\n\t\tWHERE f1.CONCEPT_ID IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.PROVIDER\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":368,"QUERY_TEXT":"\r\n/*********\r\nIS_FOREIGN_KEY\r\nForeign key check\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = PROVIDER\r\ncdmFieldName = gender_source_concept_id\r\nfkTableName = CONCEPT\r\nfkFieldName = CONCEPT_ID\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'PROVIDER.gender_source_concept_id' AS violating_field, p1.* \r\n\t\tFROM cdm.PROVIDER p1\r\n\t\tLEFT JOIN cdm.CONCEPT f1\r\n\t\tON p1.gender_source_concept_id = f1.CONCEPT_ID\r\n\t\tWHERE f1.CONCEPT_ID IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.PROVIDER\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":369,"QUERY_TEXT":"\r\n/*********\r\nIS_FOREIGN_KEY\r\nForeign key check\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = PAYER_PLAN_PERIOD\r\ncdmFieldName = payer_plan_period_id\r\nfkTableName = PERSON\r\nfkFieldName = PERSON_ID\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'PAYER_PLAN_PERIOD.payer_plan_period_id' AS violating_field, p1.* \r\n\t\tFROM cdm.PAYER_PLAN_PERIOD p1\r\n\t\tLEFT JOIN cdm.PERSON f1\r\n\t\tON p1.payer_plan_period_id = f1.PERSON_ID\r\n\t\tWHERE f1.PERSON_ID IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.PAYER_PLAN_PERIOD\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":370,"QUERY_TEXT":"\r\n/*********\r\nIS_FOREIGN_KEY\r\nForeign key check\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = PAYER_PLAN_PERIOD\r\ncdmFieldName = person_id\r\nfkTableName = PERSON\r\nfkFieldName = PERSON_ID\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'PAYER_PLAN_PERIOD.person_id' AS violating_field, p1.* \r\n\t\tFROM cdm.PAYER_PLAN_PERIOD p1\r\n\t\tLEFT JOIN cdm.PERSON f1\r\n\t\tON p1.person_id = f1.PERSON_ID\r\n\t\tWHERE f1.PERSON_ID IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.PAYER_PLAN_PERIOD\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":371,"QUERY_TEXT":"\r\n/*********\r\nIS_FOREIGN_KEY\r\nForeign key check\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = PAYER_PLAN_PERIOD\r\ncdmFieldName = payer_concept_id\r\nfkTableName = CONCEPT\r\nfkFieldName = CONCEPT_ID\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'PAYER_PLAN_PERIOD.payer_concept_id' AS violating_field, p1.* \r\n\t\tFROM cdm.PAYER_PLAN_PERIOD p1\r\n\t\tLEFT JOIN cdm.CONCEPT f1\r\n\t\tON p1.payer_concept_id = f1.CONCEPT_ID\r\n\t\tWHERE f1.CONCEPT_ID IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.PAYER_PLAN_PERIOD\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":372,"QUERY_TEXT":"\r\n/*********\r\nIS_FOREIGN_KEY\r\nForeign key check\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = PAYER_PLAN_PERIOD\r\ncdmFieldName = payer_source_concept_id\r\nfkTableName = CONCEPT\r\nfkFieldName = CONCEPT_ID\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'PAYER_PLAN_PERIOD.payer_source_concept_id' AS violating_field, p1.* \r\n\t\tFROM cdm.PAYER_PLAN_PERIOD p1\r\n\t\tLEFT JOIN cdm.CONCEPT f1\r\n\t\tON p1.payer_source_concept_id = f1.CONCEPT_ID\r\n\t\tWHERE f1.CONCEPT_ID IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.PAYER_PLAN_PERIOD\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":373,"QUERY_TEXT":"\r\n/*********\r\nIS_FOREIGN_KEY\r\nForeign key check\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = PAYER_PLAN_PERIOD\r\ncdmFieldName = plan_concept_id\r\nfkTableName = CONCEPT\r\nfkFieldName = CONCEPT_ID\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'PAYER_PLAN_PERIOD.plan_concept_id' AS violating_field, p1.* \r\n\t\tFROM cdm.PAYER_PLAN_PERIOD p1\r\n\t\tLEFT JOIN cdm.CONCEPT f1\r\n\t\tON p1.plan_concept_id = f1.CONCEPT_ID\r\n\t\tWHERE f1.CONCEPT_ID IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.PAYER_PLAN_PERIOD\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":374,"QUERY_TEXT":"\r\n/*********\r\nIS_FOREIGN_KEY\r\nForeign key check\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = PAYER_PLAN_PERIOD\r\ncdmFieldName = plan_source_concept_id\r\nfkTableName = CONCEPT\r\nfkFieldName = CONCEPT_ID\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'PAYER_PLAN_PERIOD.plan_source_concept_id' AS violating_field, p1.* \r\n\t\tFROM cdm.PAYER_PLAN_PERIOD p1\r\n\t\tLEFT JOIN cdm.CONCEPT f1\r\n\t\tON p1.plan_source_concept_id = f1.CONCEPT_ID\r\n\t\tWHERE f1.CONCEPT_ID IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.PAYER_PLAN_PERIOD\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":375,"QUERY_TEXT":"\r\n/*********\r\nIS_FOREIGN_KEY\r\nForeign key check\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = PAYER_PLAN_PERIOD\r\ncdmFieldName = sponsor_concept_id\r\nfkTableName = CONCEPT\r\nfkFieldName = CONCEPT_ID\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'PAYER_PLAN_PERIOD.sponsor_concept_id' AS violating_field, p1.* \r\n\t\tFROM cdm.PAYER_PLAN_PERIOD p1\r\n\t\tLEFT JOIN cdm.CONCEPT f1\r\n\t\tON p1.sponsor_concept_id = f1.CONCEPT_ID\r\n\t\tWHERE f1.CONCEPT_ID IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.PAYER_PLAN_PERIOD\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":376,"QUERY_TEXT":"\r\n/*********\r\nIS_FOREIGN_KEY\r\nForeign key check\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = PAYER_PLAN_PERIOD\r\ncdmFieldName = sponsor_source_concept_id\r\nfkTableName = CONCEPT\r\nfkFieldName = CONCEPT_ID\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'PAYER_PLAN_PERIOD.sponsor_source_concept_id' AS violating_field, p1.* \r\n\t\tFROM cdm.PAYER_PLAN_PERIOD p1\r\n\t\tLEFT JOIN cdm.CONCEPT f1\r\n\t\tON p1.sponsor_source_concept_id = f1.CONCEPT_ID\r\n\t\tWHERE f1.CONCEPT_ID IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.PAYER_PLAN_PERIOD\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":377,"QUERY_TEXT":"\r\n/*********\r\nIS_FOREIGN_KEY\r\nForeign key check\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = PAYER_PLAN_PERIOD\r\ncdmFieldName = stop_reason_concept_id\r\nfkTableName = CONCEPT\r\nfkFieldName = CONCEPT_ID\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'PAYER_PLAN_PERIOD.stop_reason_concept_id' AS violating_field, p1.* \r\n\t\tFROM cdm.PAYER_PLAN_PERIOD p1\r\n\t\tLEFT JOIN cdm.CONCEPT f1\r\n\t\tON p1.stop_reason_concept_id = f1.CONCEPT_ID\r\n\t\tWHERE f1.CONCEPT_ID IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.PAYER_PLAN_PERIOD\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":378,"QUERY_TEXT":"\r\n/*********\r\nIS_FOREIGN_KEY\r\nForeign key check\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = PAYER_PLAN_PERIOD\r\ncdmFieldName = stop_reason_source_concept_id\r\nfkTableName = CONCEPT\r\nfkFieldName = CONCEPT_ID\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'PAYER_PLAN_PERIOD.stop_reason_source_concept_id' AS violating_field, p1.* \r\n\t\tFROM cdm.PAYER_PLAN_PERIOD p1\r\n\t\tLEFT JOIN cdm.CONCEPT f1\r\n\t\tON p1.stop_reason_source_concept_id = f1.CONCEPT_ID\r\n\t\tWHERE f1.CONCEPT_ID IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.PAYER_PLAN_PERIOD\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":379,"QUERY_TEXT":"\r\n/*********\r\nIS_FOREIGN_KEY\r\nForeign key check\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = COST\r\ncdmFieldName = cost_domain_id\r\nfkTableName = DOMAIN\r\nfkFieldName = DOMAIN_ID\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'COST.cost_domain_id' AS violating_field, p1.* \r\n\t\tFROM cdm.COST p1\r\n\t\tLEFT JOIN cdm.DOMAIN f1\r\n\t\tON p1.cost_domain_id = f1.DOMAIN_ID\r\n\t\tWHERE f1.DOMAIN_ID IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.COST\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":380,"QUERY_TEXT":"\r\n/*********\r\nIS_FOREIGN_KEY\r\nForeign key check\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = COST\r\ncdmFieldName = cost_type_concept_id\r\nfkTableName = CONCEPT\r\nfkFieldName = CONCEPT_ID\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'COST.cost_type_concept_id' AS violating_field, p1.* \r\n\t\tFROM cdm.COST p1\r\n\t\tLEFT JOIN cdm.CONCEPT f1\r\n\t\tON p1.cost_type_concept_id = f1.CONCEPT_ID\r\n\t\tWHERE f1.CONCEPT_ID IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.COST\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":381,"QUERY_TEXT":"\r\n/*********\r\nIS_FOREIGN_KEY\r\nForeign key check\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = COST\r\ncdmFieldName = currency_concept_id\r\nfkTableName = CONCEPT\r\nfkFieldName = CONCEPT_ID\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'COST.currency_concept_id' AS violating_field, p1.* \r\n\t\tFROM cdm.COST p1\r\n\t\tLEFT JOIN cdm.CONCEPT f1\r\n\t\tON p1.currency_concept_id = f1.CONCEPT_ID\r\n\t\tWHERE f1.CONCEPT_ID IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.COST\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":382,"QUERY_TEXT":"\r\n/*********\r\nIS_FOREIGN_KEY\r\nForeign key check\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = COST\r\ncdmFieldName = paid_patient_copay\r\nfkTableName = CONCEPT\r\nfkFieldName = CONCEPT_ID\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'COST.paid_patient_copay' AS violating_field, p1.* \r\n\t\tFROM cdm.COST p1\r\n\t\tLEFT JOIN cdm.CONCEPT f1\r\n\t\tON p1.paid_patient_copay = f1.CONCEPT_ID\r\n\t\tWHERE f1.CONCEPT_ID IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.COST\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":383,"QUERY_TEXT":"\r\n/*********\r\nIS_FOREIGN_KEY\r\nForeign key check\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = COST\r\ncdmFieldName = revenue_code_concept_id\r\nfkTableName = CONCEPT\r\nfkFieldName = CONCEPT_ID\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'COST.revenue_code_concept_id' AS violating_field, p1.* \r\n\t\tFROM cdm.COST p1\r\n\t\tLEFT JOIN cdm.CONCEPT f1\r\n\t\tON p1.revenue_code_concept_id = f1.CONCEPT_ID\r\n\t\tWHERE f1.CONCEPT_ID IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.COST\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":384,"QUERY_TEXT":"\r\n/*********\r\nIS_FOREIGN_KEY\r\nForeign key check\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = COST\r\ncdmFieldName = drg_concept_id\r\nfkTableName = CONCEPT\r\nfkFieldName = CONCEPT_ID\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'COST.drg_concept_id' AS violating_field, p1.* \r\n\t\tFROM cdm.COST p1\r\n\t\tLEFT JOIN cdm.CONCEPT f1\r\n\t\tON p1.drg_concept_id = f1.CONCEPT_ID\r\n\t\tWHERE f1.CONCEPT_ID IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.COST\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":385,"QUERY_TEXT":"\r\n/*********\r\nIS_FOREIGN_KEY\r\nForeign key check\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = DRUG_ERA\r\ncdmFieldName = person_id\r\nfkTableName = PERSON\r\nfkFieldName = PERSON_ID\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'DRUG_ERA.person_id' AS violating_field, p1.* \r\n\t\tFROM cdm.DRUG_ERA p1\r\n\t\tLEFT JOIN cdm.PERSON f1\r\n\t\tON p1.person_id = f1.PERSON_ID\r\n\t\tWHERE f1.PERSON_ID IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.DRUG_ERA\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":386,"QUERY_TEXT":"\r\n/*********\r\nIS_FOREIGN_KEY\r\nForeign key check\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = DRUG_ERA\r\ncdmFieldName = drug_concept_id\r\nfkTableName = CONCEPT\r\nfkFieldName = CONCEPT_ID\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'DRUG_ERA.drug_concept_id' AS violating_field, p1.* \r\n\t\tFROM cdm.DRUG_ERA p1\r\n\t\tLEFT JOIN cdm.CONCEPT f1\r\n\t\tON p1.drug_concept_id = f1.CONCEPT_ID\r\n\t\tWHERE f1.CONCEPT_ID IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.DRUG_ERA\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":387,"QUERY_TEXT":"\r\n/*********\r\nIS_FOREIGN_KEY\r\nForeign key check\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = DOSE_ERA\r\ncdmFieldName = person_id\r\nfkTableName = PERSON\r\nfkFieldName = PERSON_ID\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'DOSE_ERA.person_id' AS violating_field, p1.* \r\n\t\tFROM cdm.DOSE_ERA p1\r\n\t\tLEFT JOIN cdm.PERSON f1\r\n\t\tON p1.person_id = f1.PERSON_ID\r\n\t\tWHERE f1.PERSON_ID IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.DOSE_ERA\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":388,"QUERY_TEXT":"\r\n/*********\r\nIS_FOREIGN_KEY\r\nForeign key check\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = DOSE_ERA\r\ncdmFieldName = drug_concept_id\r\nfkTableName = CONCEPT\r\nfkFieldName = CONCEPT_ID\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'DOSE_ERA.drug_concept_id' AS violating_field, p1.* \r\n\t\tFROM cdm.DOSE_ERA p1\r\n\t\tLEFT JOIN cdm.CONCEPT f1\r\n\t\tON p1.drug_concept_id = f1.CONCEPT_ID\r\n\t\tWHERE f1.CONCEPT_ID IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.DOSE_ERA\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":389,"QUERY_TEXT":"\r\n/*********\r\nIS_FOREIGN_KEY\r\nForeign key check\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = DOSE_ERA\r\ncdmFieldName = unit_concept_id\r\nfkTableName = CONCEPT\r\nfkFieldName = CONCEPT_ID\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'DOSE_ERA.unit_concept_id' AS violating_field, p1.* \r\n\t\tFROM cdm.DOSE_ERA p1\r\n\t\tLEFT JOIN cdm.CONCEPT f1\r\n\t\tON p1.unit_concept_id = f1.CONCEPT_ID\r\n\t\tWHERE f1.CONCEPT_ID IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.DOSE_ERA\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"CHECK_ID":390,"QUERY_TEXT":"\r\n/*********\r\nFIELD_FK_DOMAIN\r\n\r\nall standard concept ids are part of specified domain\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = PERSON\r\ncdmFieldName = gender_concept_id\r\ndomain = @domain\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'PERSON.gender_concept_id' AS violating_field, t.* \r\n\t\t  FROM cdm.PERSON t\r\n\t\t  JOIN cdm.CONCEPT c\r\n\t\t    ON t.gender_concept_id = c.CONCEPT_ID\r\n\t\t WHERE t.DOMAIN_ID = '@domain'\r\n           AND t.DOMAIN_ID != c.DOMAIN_ID \t\t \r\n\t\t  \r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.PERSON\r\n) denominator\r\n;","CATEGORY":"Conformance","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: column t.domain_id does not exist;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":391,"QUERY_TEXT":"\r\n/*********\r\nFIELD_FK_DOMAIN\r\n\r\nall standard concept ids are part of specified domain\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = PERSON\r\ncdmFieldName = race_concept_id\r\ndomain = @domain\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'PERSON.race_concept_id' AS violating_field, t.* \r\n\t\t  FROM cdm.PERSON t\r\n\t\t  JOIN cdm.CONCEPT c\r\n\t\t    ON t.race_concept_id = c.CONCEPT_ID\r\n\t\t WHERE t.DOMAIN_ID = '@domain'\r\n           AND t.DOMAIN_ID != c.DOMAIN_ID \t\t \r\n\t\t  \r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.PERSON\r\n) denominator\r\n;","CATEGORY":"Conformance","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: column t.domain_id does not exist;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":392,"QUERY_TEXT":"\r\n/*********\r\nFIELD_FK_DOMAIN\r\n\r\nall standard concept ids are part of specified domain\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = PERSON\r\ncdmFieldName = ethnicity_concept_id\r\ndomain = @domain\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'PERSON.ethnicity_concept_id' AS violating_field, t.* \r\n\t\t  FROM cdm.PERSON t\r\n\t\t  JOIN cdm.CONCEPT c\r\n\t\t    ON t.ethnicity_concept_id = c.CONCEPT_ID\r\n\t\t WHERE t.DOMAIN_ID = '@domain'\r\n           AND t.DOMAIN_ID != c.DOMAIN_ID \t\t \r\n\t\t  \r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.PERSON\r\n) denominator\r\n;","CATEGORY":"Conformance","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: column t.domain_id does not exist;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":393,"QUERY_TEXT":"\r\n/*********\r\nFIELD_FK_DOMAIN\r\n\r\nall standard concept ids are part of specified domain\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = OBSERVATION_PERIOD\r\ncdmFieldName = period_type_concept_id\r\ndomain = @domain\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'OBSERVATION_PERIOD.period_type_concept_id' AS violating_field, t.* \r\n\t\t  FROM cdm.OBSERVATION_PERIOD t\r\n\t\t  JOIN cdm.CONCEPT c\r\n\t\t    ON t.period_type_concept_id = c.CONCEPT_ID\r\n\t\t WHERE t.DOMAIN_ID = '@domain'\r\n           AND t.DOMAIN_ID != c.DOMAIN_ID \t\t \r\n\t\t  \r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.OBSERVATION_PERIOD\r\n) denominator\r\n;","CATEGORY":"Conformance","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: column t.domain_id does not exist;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":394,"QUERY_TEXT":"\r\n/*********\r\nFIELD_FK_DOMAIN\r\n\r\nall standard concept ids are part of specified domain\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = VISIT_OCCURRENCE\r\ncdmFieldName = visit_concept_id\r\ndomain = @domain\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'VISIT_OCCURRENCE.visit_concept_id' AS violating_field, t.* \r\n\t\t  FROM cdm.VISIT_OCCURRENCE t\r\n\t\t  JOIN cdm.CONCEPT c\r\n\t\t    ON t.visit_concept_id = c.CONCEPT_ID\r\n\t\t WHERE t.DOMAIN_ID = '@domain'\r\n           AND t.DOMAIN_ID != c.DOMAIN_ID \t\t \r\n\t\t  \r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.VISIT_OCCURRENCE\r\n) denominator\r\n;","CATEGORY":"Conformance","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: column t.domain_id does not exist;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":395,"QUERY_TEXT":"\r\n/*********\r\nFIELD_FK_DOMAIN\r\n\r\nall standard concept ids are part of specified domain\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = VISIT_OCCURRENCE\r\ncdmFieldName = visit_type_concept_id\r\ndomain = @domain\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'VISIT_OCCURRENCE.visit_type_concept_id' AS violating_field, t.* \r\n\t\t  FROM cdm.VISIT_OCCURRENCE t\r\n\t\t  JOIN cdm.CONCEPT c\r\n\t\t    ON t.visit_type_concept_id = c.CONCEPT_ID\r\n\t\t WHERE t.DOMAIN_ID = '@domain'\r\n           AND t.DOMAIN_ID != c.DOMAIN_ID \t\t \r\n\t\t  \r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.VISIT_OCCURRENCE\r\n) denominator\r\n;","CATEGORY":"Conformance","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: column t.domain_id does not exist;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":396,"QUERY_TEXT":"\r\n/*********\r\nFIELD_FK_DOMAIN\r\n\r\nall standard concept ids are part of specified domain\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = VISIT_OCCURRENCE\r\ncdmFieldName = admitting_source_concept_id\r\ndomain = @domain\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'VISIT_OCCURRENCE.admitting_source_concept_id' AS violating_field, t.* \r\n\t\t  FROM cdm.VISIT_OCCURRENCE t\r\n\t\t  JOIN cdm.CONCEPT c\r\n\t\t    ON t.admitting_source_concept_id = c.CONCEPT_ID\r\n\t\t WHERE t.DOMAIN_ID = '@domain'\r\n           AND t.DOMAIN_ID != c.DOMAIN_ID \t\t \r\n\t\t  \r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.VISIT_OCCURRENCE\r\n) denominator\r\n;","CATEGORY":"Conformance","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: column t.domain_id does not exist;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":397,"QUERY_TEXT":"\r\n/*********\r\nFIELD_FK_DOMAIN\r\n\r\nall standard concept ids are part of specified domain\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = VISIT_OCCURRENCE\r\ncdmFieldName = discharge_to_concept_id\r\ndomain = @domain\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'VISIT_OCCURRENCE.discharge_to_concept_id' AS violating_field, t.* \r\n\t\t  FROM cdm.VISIT_OCCURRENCE t\r\n\t\t  JOIN cdm.CONCEPT c\r\n\t\t    ON t.discharge_to_concept_id = c.CONCEPT_ID\r\n\t\t WHERE t.DOMAIN_ID = '@domain'\r\n           AND t.DOMAIN_ID != c.DOMAIN_ID \t\t \r\n\t\t  \r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.VISIT_OCCURRENCE\r\n) denominator\r\n;","CATEGORY":"Conformance","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: column t.domain_id does not exist;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":398,"QUERY_TEXT":"\r\n/*********\r\nFIELD_FK_DOMAIN\r\n\r\nall standard concept ids are part of specified domain\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = CONDITION_OCCURRENCE\r\ncdmFieldName = condition_concept_id\r\ndomain = @domain\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'CONDITION_OCCURRENCE.condition_concept_id' AS violating_field, t.* \r\n\t\t  FROM cdm.CONDITION_OCCURRENCE t\r\n\t\t  JOIN cdm.CONCEPT c\r\n\t\t    ON t.condition_concept_id = c.CONCEPT_ID\r\n\t\t WHERE t.DOMAIN_ID = '@domain'\r\n           AND t.DOMAIN_ID != c.DOMAIN_ID \t\t \r\n\t\t  \r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.CONDITION_OCCURRENCE\r\n) denominator\r\n;","CATEGORY":"Conformance","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: column t.domain_id does not exist;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":399,"QUERY_TEXT":"\r\n/*********\r\nFIELD_FK_DOMAIN\r\n\r\nall standard concept ids are part of specified domain\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = CONDITION_OCCURRENCE\r\ncdmFieldName = condition_type_concept_id\r\ndomain = @domain\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'CONDITION_OCCURRENCE.condition_type_concept_id' AS violating_field, t.* \r\n\t\t  FROM cdm.CONDITION_OCCURRENCE t\r\n\t\t  JOIN cdm.CONCEPT c\r\n\t\t    ON t.condition_type_concept_id = c.CONCEPT_ID\r\n\t\t WHERE t.DOMAIN_ID = '@domain'\r\n           AND t.DOMAIN_ID != c.DOMAIN_ID \t\t \r\n\t\t  \r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.CONDITION_OCCURRENCE\r\n) denominator\r\n;","CATEGORY":"Conformance","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: column t.domain_id does not exist;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":400,"QUERY_TEXT":"\r\n/*********\r\nFIELD_FK_DOMAIN\r\n\r\nall standard concept ids are part of specified domain\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = DRUG_EXPOSURE\r\ncdmFieldName = drug_concept_id\r\ndomain = @domain\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'DRUG_EXPOSURE.drug_concept_id' AS violating_field, t.* \r\n\t\t  FROM cdm.DRUG_EXPOSURE t\r\n\t\t  JOIN cdm.CONCEPT c\r\n\t\t    ON t.drug_concept_id = c.CONCEPT_ID\r\n\t\t WHERE t.DOMAIN_ID = '@domain'\r\n           AND t.DOMAIN_ID != c.DOMAIN_ID \t\t \r\n\t\t  \r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.DRUG_EXPOSURE\r\n) denominator\r\n;","CATEGORY":"Conformance","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: column t.domain_id does not exist;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":401,"QUERY_TEXT":"\r\n/*********\r\nFIELD_FK_DOMAIN\r\n\r\nall standard concept ids are part of specified domain\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = DRUG_EXPOSURE\r\ncdmFieldName = drug_type_concept_id\r\ndomain = @domain\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'DRUG_EXPOSURE.drug_type_concept_id' AS violating_field, t.* \r\n\t\t  FROM cdm.DRUG_EXPOSURE t\r\n\t\t  JOIN cdm.CONCEPT c\r\n\t\t    ON t.drug_type_concept_id = c.CONCEPT_ID\r\n\t\t WHERE t.DOMAIN_ID = '@domain'\r\n           AND t.DOMAIN_ID != c.DOMAIN_ID \t\t \r\n\t\t  \r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.DRUG_EXPOSURE\r\n) denominator\r\n;","CATEGORY":"Conformance","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: column t.domain_id does not exist;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":402,"QUERY_TEXT":"\r\n/*********\r\nFIELD_FK_DOMAIN\r\n\r\nall standard concept ids are part of specified domain\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = DRUG_EXPOSURE\r\ncdmFieldName = route_concept_id\r\ndomain = @domain\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'DRUG_EXPOSURE.route_concept_id' AS violating_field, t.* \r\n\t\t  FROM cdm.DRUG_EXPOSURE t\r\n\t\t  JOIN cdm.CONCEPT c\r\n\t\t    ON t.route_concept_id = c.CONCEPT_ID\r\n\t\t WHERE t.DOMAIN_ID = '@domain'\r\n           AND t.DOMAIN_ID != c.DOMAIN_ID \t\t \r\n\t\t  \r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.DRUG_EXPOSURE\r\n) denominator\r\n;","CATEGORY":"Conformance","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: column t.domain_id does not exist;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":403,"QUERY_TEXT":"\r\n/*********\r\nFIELD_FK_DOMAIN\r\n\r\nall standard concept ids are part of specified domain\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = PROCEDURE_OCCURRENCE\r\ncdmFieldName = procedure_concept_id\r\ndomain = @domain\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'PROCEDURE_OCCURRENCE.procedure_concept_id' AS violating_field, t.* \r\n\t\t  FROM cdm.PROCEDURE_OCCURRENCE t\r\n\t\t  JOIN cdm.CONCEPT c\r\n\t\t    ON t.procedure_concept_id = c.CONCEPT_ID\r\n\t\t WHERE t.DOMAIN_ID = '@domain'\r\n           AND t.DOMAIN_ID != c.DOMAIN_ID \t\t \r\n\t\t  \r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.PROCEDURE_OCCURRENCE\r\n) denominator\r\n;","CATEGORY":"Conformance","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: column t.domain_id does not exist;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":404,"QUERY_TEXT":"\r\n/*********\r\nFIELD_FK_DOMAIN\r\n\r\nall standard concept ids are part of specified domain\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = PROCEDURE_OCCURRENCE\r\ncdmFieldName = procedure_type_concept_id\r\ndomain = @domain\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'PROCEDURE_OCCURRENCE.procedure_type_concept_id' AS violating_field, t.* \r\n\t\t  FROM cdm.PROCEDURE_OCCURRENCE t\r\n\t\t  JOIN cdm.CONCEPT c\r\n\t\t    ON t.procedure_type_concept_id = c.CONCEPT_ID\r\n\t\t WHERE t.DOMAIN_ID = '@domain'\r\n           AND t.DOMAIN_ID != c.DOMAIN_ID \t\t \r\n\t\t  \r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.PROCEDURE_OCCURRENCE\r\n) denominator\r\n;","CATEGORY":"Conformance","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: column t.domain_id does not exist;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":405,"QUERY_TEXT":"\r\n/*********\r\nFIELD_FK_DOMAIN\r\n\r\nall standard concept ids are part of specified domain\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = DEVICE_EXPOSURE\r\ncdmFieldName = device_concept_id\r\ndomain = @domain\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'DEVICE_EXPOSURE.device_concept_id' AS violating_field, t.* \r\n\t\t  FROM cdm.DEVICE_EXPOSURE t\r\n\t\t  JOIN cdm.CONCEPT c\r\n\t\t    ON t.device_concept_id = c.CONCEPT_ID\r\n\t\t WHERE t.DOMAIN_ID = '@domain'\r\n           AND t.DOMAIN_ID != c.DOMAIN_ID \t\t \r\n\t\t  \r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.DEVICE_EXPOSURE\r\n) denominator\r\n;","CATEGORY":"Conformance","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: column t.domain_id does not exist;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":406,"QUERY_TEXT":"\r\n/*********\r\nFIELD_FK_DOMAIN\r\n\r\nall standard concept ids are part of specified domain\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = DEVICE_EXPOSURE\r\ncdmFieldName = device_type_concept_id\r\ndomain = @domain\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'DEVICE_EXPOSURE.device_type_concept_id' AS violating_field, t.* \r\n\t\t  FROM cdm.DEVICE_EXPOSURE t\r\n\t\t  JOIN cdm.CONCEPT c\r\n\t\t    ON t.device_type_concept_id = c.CONCEPT_ID\r\n\t\t WHERE t.DOMAIN_ID = '@domain'\r\n           AND t.DOMAIN_ID != c.DOMAIN_ID \t\t \r\n\t\t  \r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.DEVICE_EXPOSURE\r\n) denominator\r\n;","CATEGORY":"Conformance","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: column t.domain_id does not exist;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":407,"QUERY_TEXT":"\r\n/*********\r\nFIELD_FK_DOMAIN\r\n\r\nall standard concept ids are part of specified domain\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = MEASUREMENT\r\ncdmFieldName = measurement_concept_id\r\ndomain = @domain\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'MEASUREMENT.measurement_concept_id' AS violating_field, t.* \r\n\t\t  FROM cdm.MEASUREMENT t\r\n\t\t  JOIN cdm.CONCEPT c\r\n\t\t    ON t.measurement_concept_id = c.CONCEPT_ID\r\n\t\t WHERE t.DOMAIN_ID = '@domain'\r\n           AND t.DOMAIN_ID != c.DOMAIN_ID \t\t \r\n\t\t  \r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.MEASUREMENT\r\n) denominator\r\n;","CATEGORY":"Conformance","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: column t.domain_id does not exist;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":408,"QUERY_TEXT":"\r\n/*********\r\nFIELD_FK_DOMAIN\r\n\r\nall standard concept ids are part of specified domain\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = MEASUREMENT\r\ncdmFieldName = measurement_type_concept_id\r\ndomain = @domain\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'MEASUREMENT.measurement_type_concept_id' AS violating_field, t.* \r\n\t\t  FROM cdm.MEASUREMENT t\r\n\t\t  JOIN cdm.CONCEPT c\r\n\t\t    ON t.measurement_type_concept_id = c.CONCEPT_ID\r\n\t\t WHERE t.DOMAIN_ID = '@domain'\r\n           AND t.DOMAIN_ID != c.DOMAIN_ID \t\t \r\n\t\t  \r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.MEASUREMENT\r\n) denominator\r\n;","CATEGORY":"Conformance","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: column t.domain_id does not exist;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":409,"QUERY_TEXT":"\r\n/*********\r\nFIELD_FK_DOMAIN\r\n\r\nall standard concept ids are part of specified domain\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = MEASUREMENT\r\ncdmFieldName = unit_concept_id\r\ndomain = @domain\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'MEASUREMENT.unit_concept_id' AS violating_field, t.* \r\n\t\t  FROM cdm.MEASUREMENT t\r\n\t\t  JOIN cdm.CONCEPT c\r\n\t\t    ON t.unit_concept_id = c.CONCEPT_ID\r\n\t\t WHERE t.DOMAIN_ID = '@domain'\r\n           AND t.DOMAIN_ID != c.DOMAIN_ID \t\t \r\n\t\t  \r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.MEASUREMENT\r\n) denominator\r\n;","CATEGORY":"Conformance","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: column t.domain_id does not exist;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":410,"QUERY_TEXT":"\r\n/*********\r\nFIELD_FK_DOMAIN\r\n\r\nall standard concept ids are part of specified domain\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = VISIT_DETAIL\r\ncdmFieldName = visit_detail_concept_id\r\ndomain = @domain\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'VISIT_DETAIL.visit_detail_concept_id' AS violating_field, t.* \r\n\t\t  FROM cdm.VISIT_DETAIL t\r\n\t\t  JOIN cdm.CONCEPT c\r\n\t\t    ON t.visit_detail_concept_id = c.CONCEPT_ID\r\n\t\t WHERE t.DOMAIN_ID = '@domain'\r\n           AND t.DOMAIN_ID != c.DOMAIN_ID \t\t \r\n\t\t  \r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.VISIT_DETAIL\r\n) denominator\r\n;","CATEGORY":"Conformance","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: column t.domain_id does not exist;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":411,"QUERY_TEXT":"\r\n/*********\r\nFIELD_FK_DOMAIN\r\n\r\nall standard concept ids are part of specified domain\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = VISIT_DETAIL\r\ncdmFieldName = visit_detail_type_concept_id\r\ndomain = @domain\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'VISIT_DETAIL.visit_detail_type_concept_id' AS violating_field, t.* \r\n\t\t  FROM cdm.VISIT_DETAIL t\r\n\t\t  JOIN cdm.CONCEPT c\r\n\t\t    ON t.visit_detail_type_concept_id = c.CONCEPT_ID\r\n\t\t WHERE t.DOMAIN_ID = '@domain'\r\n           AND t.DOMAIN_ID != c.DOMAIN_ID \t\t \r\n\t\t  \r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.VISIT_DETAIL\r\n) denominator\r\n;","CATEGORY":"Conformance","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: column t.domain_id does not exist;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":412,"QUERY_TEXT":"\r\n/*********\r\nFIELD_FK_DOMAIN\r\n\r\nall standard concept ids are part of specified domain\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = NOTE\r\ncdmFieldName = note_type_concept_id\r\ndomain = @domain\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'NOTE.note_type_concept_id' AS violating_field, t.* \r\n\t\t  FROM cdm.NOTE t\r\n\t\t  JOIN cdm.CONCEPT c\r\n\t\t    ON t.note_type_concept_id = c.CONCEPT_ID\r\n\t\t WHERE t.DOMAIN_ID = '@domain'\r\n           AND t.DOMAIN_ID != c.DOMAIN_ID \t\t \r\n\t\t  \r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.NOTE\r\n) denominator\r\n;","CATEGORY":"Conformance","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: column t.domain_id does not exist;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":413,"QUERY_TEXT":"\r\n/*********\r\nFIELD_FK_DOMAIN\r\n\r\nall standard concept ids are part of specified domain\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = OBSERVATION\r\ncdmFieldName = observation_type_concept_id\r\ndomain = @domain\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'OBSERVATION.observation_type_concept_id' AS violating_field, t.* \r\n\t\t  FROM cdm.OBSERVATION t\r\n\t\t  JOIN cdm.CONCEPT c\r\n\t\t    ON t.observation_type_concept_id = c.CONCEPT_ID\r\n\t\t WHERE t.DOMAIN_ID = '@domain'\r\n           AND t.DOMAIN_ID != c.DOMAIN_ID \t\t \r\n\t\t  \r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.OBSERVATION\r\n) denominator\r\n;","CATEGORY":"Conformance","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: column t.domain_id does not exist;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":414,"QUERY_TEXT":"\r\n/*********\r\nFIELD_FK_DOMAIN\r\n\r\nall standard concept ids are part of specified domain\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = OBSERVATION\r\ncdmFieldName = unit_concept_id\r\ndomain = @domain\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'OBSERVATION.unit_concept_id' AS violating_field, t.* \r\n\t\t  FROM cdm.OBSERVATION t\r\n\t\t  JOIN cdm.CONCEPT c\r\n\t\t    ON t.unit_concept_id = c.CONCEPT_ID\r\n\t\t WHERE t.DOMAIN_ID = '@domain'\r\n           AND t.DOMAIN_ID != c.DOMAIN_ID \t\t \r\n\t\t  \r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.OBSERVATION\r\n) denominator\r\n;","CATEGORY":"Conformance","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: column t.domain_id does not exist;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":415,"QUERY_TEXT":"\r\n/*********\r\nFIELD_FK_DOMAIN\r\n\r\nall standard concept ids are part of specified domain\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = SPECIMEN\r\ncdmFieldName = specimen_type_concept_id\r\ndomain = @domain\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'SPECIMEN.specimen_type_concept_id' AS violating_field, t.* \r\n\t\t  FROM cdm.SPECIMEN t\r\n\t\t  JOIN cdm.CONCEPT c\r\n\t\t    ON t.specimen_type_concept_id = c.CONCEPT_ID\r\n\t\t WHERE t.DOMAIN_ID = '@domain'\r\n           AND t.DOMAIN_ID != c.DOMAIN_ID \t\t \r\n\t\t  \r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.SPECIMEN\r\n) denominator\r\n;","CATEGORY":"Conformance","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: column t.domain_id does not exist;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":416,"QUERY_TEXT":"\r\n/*********\r\nFIELD_FK_DOMAIN\r\n\r\nall standard concept ids are part of specified domain\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = PROVIDER\r\ncdmFieldName = gender_concept_id\r\ndomain = @domain\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'PROVIDER.gender_concept_id' AS violating_field, t.* \r\n\t\t  FROM cdm.PROVIDER t\r\n\t\t  JOIN cdm.CONCEPT c\r\n\t\t    ON t.gender_concept_id = c.CONCEPT_ID\r\n\t\t WHERE t.DOMAIN_ID = '@domain'\r\n           AND t.DOMAIN_ID != c.DOMAIN_ID \t\t \r\n\t\t  \r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.PROVIDER\r\n) denominator\r\n;","CATEGORY":"Conformance","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: column t.domain_id does not exist;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":417,"QUERY_TEXT":"\r\n/*********\r\nFIELD_FK_DOMAIN\r\n\r\nall standard concept ids are part of specified domain\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = DRUG_ERA\r\ncdmFieldName = drug_concept_id\r\ndomain = @domain\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'DRUG_ERA.drug_concept_id' AS violating_field, t.* \r\n\t\t  FROM cdm.DRUG_ERA t\r\n\t\t  JOIN cdm.CONCEPT c\r\n\t\t    ON t.drug_concept_id = c.CONCEPT_ID\r\n\t\t WHERE t.DOMAIN_ID = '@domain'\r\n           AND t.DOMAIN_ID != c.DOMAIN_ID \t\t \r\n\t\t  \r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.DRUG_ERA\r\n) denominator\r\n;","CATEGORY":"Conformance","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: column t.domain_id does not exist;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":418,"QUERY_TEXT":"\r\n/*********\r\nFIELD_FK_DOMAIN\r\n\r\nall standard concept ids are part of specified domain\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = DOSE_ERA\r\ncdmFieldName = drug_concept_id\r\ndomain = @domain\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'DOSE_ERA.drug_concept_id' AS violating_field, t.* \r\n\t\t  FROM cdm.DOSE_ERA t\r\n\t\t  JOIN cdm.CONCEPT c\r\n\t\t    ON t.drug_concept_id = c.CONCEPT_ID\r\n\t\t WHERE t.DOMAIN_ID = '@domain'\r\n           AND t.DOMAIN_ID != c.DOMAIN_ID \t\t \r\n\t\t  \r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.DOSE_ERA\r\n) denominator\r\n;","CATEGORY":"Conformance","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: column t.domain_id does not exist;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":419,"QUERY_TEXT":"\r\n/*********\r\nFIELD_FK_DOMAIN\r\n\r\nall standard concept ids are part of specified domain\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = DOSE_ERA\r\ncdmFieldName = unit_concept_id\r\ndomain = @domain\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'DOSE_ERA.unit_concept_id' AS violating_field, t.* \r\n\t\t  FROM cdm.DOSE_ERA t\r\n\t\t  JOIN cdm.CONCEPT c\r\n\t\t    ON t.unit_concept_id = c.CONCEPT_ID\r\n\t\t WHERE t.DOMAIN_ID = '@domain'\r\n           AND t.DOMAIN_ID != c.DOMAIN_ID \t\t \r\n\t\t  \r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.DOSE_ERA\r\n) denominator\r\n;","CATEGORY":"Conformance","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: column t.domain_id does not exist;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"NUM_VIOLATED_ROWS":175754,"PCT_VIOLATED_ROWS":1,"CHECK_ID":420,"QUERY_TEXT":"\r\n/*********\r\nFK_CLASS\r\nDrug era standard concepts, ingredients only\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = DRUG_ERA\r\ncdmFieldName = drug_concept_id\r\nfkDomain = @fkDomain\r\nfkClass = @fkClass\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'DRUG_ERA.drug_concept_id' AS violating_field, DRUG_ERA.* \r\n\t\tFROM cdm.DRUG_ERA\r\n\t\tLEFT JOIN cdm.CONCEPT \r\n\t\tON DRUG_ERA.drug_concept_id = CONCEPT.CONCEPT_ID\r\n        WHERE CONCEPT.DOMAIN_ID != '@fkDomain' OR CONCEPT.CONCEPT_CLASS_ID != '@fkClass' \r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.DRUG_ERA\r\n) denominator\r\n;\r\n","CATEGORY":"Conformance"},{"CHECK_ID":421,"QUERY_TEXT":"\r\n/*********\r\nFK_CLASS\r\nDrug era standard concepts, ingredients only\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = DOSE_ERA\r\ncdmFieldName = drug_concept_id\r\nfkDomain = @fkDomain\r\nfkClass = @fkClass\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'DOSE_ERA.drug_concept_id' AS violating_field, DOSE_ERA.* \r\n\t\tFROM cdm.DOSE_ERA\r\n\t\tLEFT JOIN cdm.CONCEPT \r\n\t\tON DOSE_ERA.drug_concept_id = CONCEPT.CONCEPT_ID\r\n        WHERE CONCEPT.DOMAIN_ID != '@fkDomain' OR CONCEPT.CONCEPT_CLASS_ID != '@fkClass' \r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.DOSE_ERA\r\n) denominator\r\n;\r\n","CATEGORY":"Conformance","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: Divide by zero;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":422,"QUERY_TEXT":"\r\n/*********\r\nFIELD_IS_STANDARD_VALID_CONCEPT\r\n\r\nall standard concept id fields are standard and valid\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = PERSON\r\ncdmFieldName = gender_concept_id\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'PERSON.gender_concept_id' AS violating_field, PERSON.* \r\n\t\t  FROM cdm.PERSON\r\n\t\t WHERE PERSON.gender_concept_id IN ( SELECT t.gender_concept_id \r\n\t\t                                          FROM cdm.PERSON t   \r\n\t\t\t\t\t\t\t\t\t\t\t\t  JOIN cdm.CONCEPT c\r\n\t\t\t\t\t\t\t\t\t\t\t\t    ON t.gender_concept_id = c.CONCEPT_ID \r\n\t\t\t\t\t\t\t\t\t\t\t     WHERE c.STANDARD_CONCEPT != 'S' OR c.INVALID_REASON IS NOT NULL ) \r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.PERSON\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":3595,"PCT_VIOLATED_ROWS":0.3756,"CHECK_ID":423,"QUERY_TEXT":"\r\n/*********\r\nFIELD_IS_STANDARD_VALID_CONCEPT\r\n\r\nall standard concept id fields are standard and valid\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = PERSON\r\ncdmFieldName = race_concept_id\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'PERSON.race_concept_id' AS violating_field, PERSON.* \r\n\t\t  FROM cdm.PERSON\r\n\t\t WHERE PERSON.race_concept_id IN ( SELECT t.race_concept_id \r\n\t\t                                          FROM cdm.PERSON t   \r\n\t\t\t\t\t\t\t\t\t\t\t\t  JOIN cdm.CONCEPT c\r\n\t\t\t\t\t\t\t\t\t\t\t\t    ON t.race_concept_id = c.CONCEPT_ID \r\n\t\t\t\t\t\t\t\t\t\t\t     WHERE c.STANDARD_CONCEPT != 'S' OR c.INVALID_REASON IS NOT NULL ) \r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.PERSON\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":8849,"PCT_VIOLATED_ROWS":0.9245,"CHECK_ID":424,"QUERY_TEXT":"\r\n/*********\r\nFIELD_IS_STANDARD_VALID_CONCEPT\r\n\r\nall standard concept id fields are standard and valid\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = PERSON\r\ncdmFieldName = ethnicity_concept_id\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'PERSON.ethnicity_concept_id' AS violating_field, PERSON.* \r\n\t\t  FROM cdm.PERSON\r\n\t\t WHERE PERSON.ethnicity_concept_id IN ( SELECT t.ethnicity_concept_id \r\n\t\t                                          FROM cdm.PERSON t   \r\n\t\t\t\t\t\t\t\t\t\t\t\t  JOIN cdm.CONCEPT c\r\n\t\t\t\t\t\t\t\t\t\t\t\t    ON t.ethnicity_concept_id = c.CONCEPT_ID \r\n\t\t\t\t\t\t\t\t\t\t\t     WHERE c.STANDARD_CONCEPT != 'S' OR c.INVALID_REASON IS NOT NULL ) \r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.PERSON\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":9572,"PCT_VIOLATED_ROWS":1,"CHECK_ID":425,"QUERY_TEXT":"\r\n/*********\r\nFIELD_IS_STANDARD_VALID_CONCEPT\r\n\r\nall standard concept id fields are standard and valid\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = OBSERVATION_PERIOD\r\ncdmFieldName = period_type_concept_id\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'OBSERVATION_PERIOD.period_type_concept_id' AS violating_field, OBSERVATION_PERIOD.* \r\n\t\t  FROM cdm.OBSERVATION_PERIOD\r\n\t\t WHERE OBSERVATION_PERIOD.period_type_concept_id IN ( SELECT t.period_type_concept_id \r\n\t\t                                          FROM cdm.OBSERVATION_PERIOD t   \r\n\t\t\t\t\t\t\t\t\t\t\t\t  JOIN cdm.CONCEPT c\r\n\t\t\t\t\t\t\t\t\t\t\t\t    ON t.period_type_concept_id = c.CONCEPT_ID \r\n\t\t\t\t\t\t\t\t\t\t\t     WHERE c.STANDARD_CONCEPT != 'S' OR c.INVALID_REASON IS NOT NULL ) \r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.OBSERVATION_PERIOD\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":426,"QUERY_TEXT":"\r\n/*********\r\nFIELD_IS_STANDARD_VALID_CONCEPT\r\n\r\nall standard concept id fields are standard and valid\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = VISIT_OCCURRENCE\r\ncdmFieldName = visit_concept_id\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'VISIT_OCCURRENCE.visit_concept_id' AS violating_field, VISIT_OCCURRENCE.* \r\n\t\t  FROM cdm.VISIT_OCCURRENCE\r\n\t\t WHERE VISIT_OCCURRENCE.visit_concept_id IN ( SELECT t.visit_concept_id \r\n\t\t                                          FROM cdm.VISIT_OCCURRENCE t   \r\n\t\t\t\t\t\t\t\t\t\t\t\t  JOIN cdm.CONCEPT c\r\n\t\t\t\t\t\t\t\t\t\t\t\t    ON t.visit_concept_id = c.CONCEPT_ID \r\n\t\t\t\t\t\t\t\t\t\t\t     WHERE c.STANDARD_CONCEPT != 'S' OR c.INVALID_REASON IS NOT NULL ) \r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.VISIT_OCCURRENCE\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":427,"QUERY_TEXT":"\r\n/*********\r\nFIELD_IS_STANDARD_VALID_CONCEPT\r\n\r\nall standard concept id fields are standard and valid\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = VISIT_OCCURRENCE\r\ncdmFieldName = visit_type_concept_id\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'VISIT_OCCURRENCE.visit_type_concept_id' AS violating_field, VISIT_OCCURRENCE.* \r\n\t\t  FROM cdm.VISIT_OCCURRENCE\r\n\t\t WHERE VISIT_OCCURRENCE.visit_type_concept_id IN ( SELECT t.visit_type_concept_id \r\n\t\t                                          FROM cdm.VISIT_OCCURRENCE t   \r\n\t\t\t\t\t\t\t\t\t\t\t\t  JOIN cdm.CONCEPT c\r\n\t\t\t\t\t\t\t\t\t\t\t\t    ON t.visit_type_concept_id = c.CONCEPT_ID \r\n\t\t\t\t\t\t\t\t\t\t\t     WHERE c.STANDARD_CONCEPT != 'S' OR c.INVALID_REASON IS NOT NULL ) \r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.VISIT_OCCURRENCE\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":620709,"PCT_VIOLATED_ROWS":1,"CHECK_ID":428,"QUERY_TEXT":"\r\n/*********\r\nFIELD_IS_STANDARD_VALID_CONCEPT\r\n\r\nall standard concept id fields are standard and valid\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = VISIT_OCCURRENCE\r\ncdmFieldName = discharge_to_concept_id\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'VISIT_OCCURRENCE.discharge_to_concept_id' AS violating_field, VISIT_OCCURRENCE.* \r\n\t\t  FROM cdm.VISIT_OCCURRENCE\r\n\t\t WHERE VISIT_OCCURRENCE.discharge_to_concept_id IN ( SELECT t.discharge_to_concept_id \r\n\t\t                                          FROM cdm.VISIT_OCCURRENCE t   \r\n\t\t\t\t\t\t\t\t\t\t\t\t  JOIN cdm.CONCEPT c\r\n\t\t\t\t\t\t\t\t\t\t\t\t    ON t.discharge_to_concept_id = c.CONCEPT_ID \r\n\t\t\t\t\t\t\t\t\t\t\t     WHERE c.STANDARD_CONCEPT != 'S' OR c.INVALID_REASON IS NOT NULL ) \r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.VISIT_OCCURRENCE\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":429,"QUERY_TEXT":"\r\n/*********\r\nFIELD_IS_STANDARD_VALID_CONCEPT\r\n\r\nall standard concept id fields are standard and valid\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = CONDITION_OCCURRENCE\r\ncdmFieldName = condition_concept_id\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'CONDITION_OCCURRENCE.condition_concept_id' AS violating_field, CONDITION_OCCURRENCE.* \r\n\t\t  FROM cdm.CONDITION_OCCURRENCE\r\n\t\t WHERE CONDITION_OCCURRENCE.condition_concept_id IN ( SELECT t.condition_concept_id \r\n\t\t                                          FROM cdm.CONDITION_OCCURRENCE t   \r\n\t\t\t\t\t\t\t\t\t\t\t\t  JOIN cdm.CONCEPT c\r\n\t\t\t\t\t\t\t\t\t\t\t\t    ON t.condition_concept_id = c.CONCEPT_ID \r\n\t\t\t\t\t\t\t\t\t\t\t     WHERE c.STANDARD_CONCEPT != 'S' OR c.INVALID_REASON IS NOT NULL ) \r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.CONDITION_OCCURRENCE\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":430,"QUERY_TEXT":"\r\n/*********\r\nFIELD_IS_STANDARD_VALID_CONCEPT\r\n\r\nall standard concept id fields are standard and valid\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = CONDITION_OCCURRENCE\r\ncdmFieldName = condition_type_concept_id\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'CONDITION_OCCURRENCE.condition_type_concept_id' AS violating_field, CONDITION_OCCURRENCE.* \r\n\t\t  FROM cdm.CONDITION_OCCURRENCE\r\n\t\t WHERE CONDITION_OCCURRENCE.condition_type_concept_id IN ( SELECT t.condition_type_concept_id \r\n\t\t                                          FROM cdm.CONDITION_OCCURRENCE t   \r\n\t\t\t\t\t\t\t\t\t\t\t\t  JOIN cdm.CONCEPT c\r\n\t\t\t\t\t\t\t\t\t\t\t\t    ON t.condition_type_concept_id = c.CONCEPT_ID \r\n\t\t\t\t\t\t\t\t\t\t\t     WHERE c.STANDARD_CONCEPT != 'S' OR c.INVALID_REASON IS NOT NULL ) \r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.CONDITION_OCCURRENCE\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":245805,"PCT_VIOLATED_ROWS":1,"CHECK_ID":431,"QUERY_TEXT":"\r\n/*********\r\nFIELD_IS_STANDARD_VALID_CONCEPT\r\n\r\nall standard concept id fields are standard and valid\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = CONDITION_OCCURRENCE\r\ncdmFieldName = condition_status_concept_id\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'CONDITION_OCCURRENCE.condition_status_concept_id' AS violating_field, CONDITION_OCCURRENCE.* \r\n\t\t  FROM cdm.CONDITION_OCCURRENCE\r\n\t\t WHERE CONDITION_OCCURRENCE.condition_status_concept_id IN ( SELECT t.condition_status_concept_id \r\n\t\t                                          FROM cdm.CONDITION_OCCURRENCE t   \r\n\t\t\t\t\t\t\t\t\t\t\t\t  JOIN cdm.CONCEPT c\r\n\t\t\t\t\t\t\t\t\t\t\t\t    ON t.condition_status_concept_id = c.CONCEPT_ID \r\n\t\t\t\t\t\t\t\t\t\t\t     WHERE c.STANDARD_CONCEPT != 'S' OR c.INVALID_REASON IS NOT NULL ) \r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.CONDITION_OCCURRENCE\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":432,"QUERY_TEXT":"\r\n/*********\r\nFIELD_IS_STANDARD_VALID_CONCEPT\r\n\r\nall standard concept id fields are standard and valid\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = DRUG_EXPOSURE\r\ncdmFieldName = drug_concept_id\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'DRUG_EXPOSURE.drug_concept_id' AS violating_field, DRUG_EXPOSURE.* \r\n\t\t  FROM cdm.DRUG_EXPOSURE\r\n\t\t WHERE DRUG_EXPOSURE.drug_concept_id IN ( SELECT t.drug_concept_id \r\n\t\t                                          FROM cdm.DRUG_EXPOSURE t   \r\n\t\t\t\t\t\t\t\t\t\t\t\t  JOIN cdm.CONCEPT c\r\n\t\t\t\t\t\t\t\t\t\t\t\t    ON t.drug_concept_id = c.CONCEPT_ID \r\n\t\t\t\t\t\t\t\t\t\t\t     WHERE c.STANDARD_CONCEPT != 'S' OR c.INVALID_REASON IS NOT NULL ) \r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.DRUG_EXPOSURE\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":433,"QUERY_TEXT":"\r\n/*********\r\nFIELD_IS_STANDARD_VALID_CONCEPT\r\n\r\nall standard concept id fields are standard and valid\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = DRUG_EXPOSURE\r\ncdmFieldName = drug_type_concept_id\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'DRUG_EXPOSURE.drug_type_concept_id' AS violating_field, DRUG_EXPOSURE.* \r\n\t\t  FROM cdm.DRUG_EXPOSURE\r\n\t\t WHERE DRUG_EXPOSURE.drug_type_concept_id IN ( SELECT t.drug_type_concept_id \r\n\t\t                                          FROM cdm.DRUG_EXPOSURE t   \r\n\t\t\t\t\t\t\t\t\t\t\t\t  JOIN cdm.CONCEPT c\r\n\t\t\t\t\t\t\t\t\t\t\t\t    ON t.drug_type_concept_id = c.CONCEPT_ID \r\n\t\t\t\t\t\t\t\t\t\t\t     WHERE c.STANDARD_CONCEPT != 'S' OR c.INVALID_REASON IS NOT NULL ) \r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.DRUG_EXPOSURE\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":512038,"PCT_VIOLATED_ROWS":1,"CHECK_ID":434,"QUERY_TEXT":"\r\n/*********\r\nFIELD_IS_STANDARD_VALID_CONCEPT\r\n\r\nall standard concept id fields are standard and valid\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = DRUG_EXPOSURE\r\ncdmFieldName = route_concept_id\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'DRUG_EXPOSURE.route_concept_id' AS violating_field, DRUG_EXPOSURE.* \r\n\t\t  FROM cdm.DRUG_EXPOSURE\r\n\t\t WHERE DRUG_EXPOSURE.route_concept_id IN ( SELECT t.route_concept_id \r\n\t\t                                          FROM cdm.DRUG_EXPOSURE t   \r\n\t\t\t\t\t\t\t\t\t\t\t\t  JOIN cdm.CONCEPT c\r\n\t\t\t\t\t\t\t\t\t\t\t\t    ON t.route_concept_id = c.CONCEPT_ID \r\n\t\t\t\t\t\t\t\t\t\t\t     WHERE c.STANDARD_CONCEPT != 'S' OR c.INVALID_REASON IS NOT NULL ) \r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.DRUG_EXPOSURE\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":435,"QUERY_TEXT":"\r\n/*********\r\nFIELD_IS_STANDARD_VALID_CONCEPT\r\n\r\nall standard concept id fields are standard and valid\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = PROCEDURE_OCCURRENCE\r\ncdmFieldName = procedure_concept_id\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'PROCEDURE_OCCURRENCE.procedure_concept_id' AS violating_field, PROCEDURE_OCCURRENCE.* \r\n\t\t  FROM cdm.PROCEDURE_OCCURRENCE\r\n\t\t WHERE PROCEDURE_OCCURRENCE.procedure_concept_id IN ( SELECT t.procedure_concept_id \r\n\t\t                                          FROM cdm.PROCEDURE_OCCURRENCE t   \r\n\t\t\t\t\t\t\t\t\t\t\t\t  JOIN cdm.CONCEPT c\r\n\t\t\t\t\t\t\t\t\t\t\t\t    ON t.procedure_concept_id = c.CONCEPT_ID \r\n\t\t\t\t\t\t\t\t\t\t\t     WHERE c.STANDARD_CONCEPT != 'S' OR c.INVALID_REASON IS NOT NULL ) \r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.PROCEDURE_OCCURRENCE\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":436,"QUERY_TEXT":"\r\n/*********\r\nFIELD_IS_STANDARD_VALID_CONCEPT\r\n\r\nall standard concept id fields are standard and valid\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = PROCEDURE_OCCURRENCE\r\ncdmFieldName = procedure_type_concept_id\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'PROCEDURE_OCCURRENCE.procedure_type_concept_id' AS violating_field, PROCEDURE_OCCURRENCE.* \r\n\t\t  FROM cdm.PROCEDURE_OCCURRENCE\r\n\t\t WHERE PROCEDURE_OCCURRENCE.procedure_type_concept_id IN ( SELECT t.procedure_type_concept_id \r\n\t\t                                          FROM cdm.PROCEDURE_OCCURRENCE t   \r\n\t\t\t\t\t\t\t\t\t\t\t\t  JOIN cdm.CONCEPT c\r\n\t\t\t\t\t\t\t\t\t\t\t\t    ON t.procedure_type_concept_id = c.CONCEPT_ID \r\n\t\t\t\t\t\t\t\t\t\t\t     WHERE c.STANDARD_CONCEPT != 'S' OR c.INVALID_REASON IS NOT NULL ) \r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.PROCEDURE_OCCURRENCE\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":15268,"PCT_VIOLATED_ROWS":1,"CHECK_ID":437,"QUERY_TEXT":"\r\n/*********\r\nFIELD_IS_STANDARD_VALID_CONCEPT\r\n\r\nall standard concept id fields are standard and valid\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = PROCEDURE_OCCURRENCE\r\ncdmFieldName = modifier_concept_id\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'PROCEDURE_OCCURRENCE.modifier_concept_id' AS violating_field, PROCEDURE_OCCURRENCE.* \r\n\t\t  FROM cdm.PROCEDURE_OCCURRENCE\r\n\t\t WHERE PROCEDURE_OCCURRENCE.modifier_concept_id IN ( SELECT t.modifier_concept_id \r\n\t\t                                          FROM cdm.PROCEDURE_OCCURRENCE t   \r\n\t\t\t\t\t\t\t\t\t\t\t\t  JOIN cdm.CONCEPT c\r\n\t\t\t\t\t\t\t\t\t\t\t\t    ON t.modifier_concept_id = c.CONCEPT_ID \r\n\t\t\t\t\t\t\t\t\t\t\t     WHERE c.STANDARD_CONCEPT != 'S' OR c.INVALID_REASON IS NOT NULL ) \r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.PROCEDURE_OCCURRENCE\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":438,"QUERY_TEXT":"\r\n/*********\r\nFIELD_IS_STANDARD_VALID_CONCEPT\r\n\r\nall standard concept id fields are standard and valid\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = DEVICE_EXPOSURE\r\ncdmFieldName = device_concept_id\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'DEVICE_EXPOSURE.device_concept_id' AS violating_field, DEVICE_EXPOSURE.* \r\n\t\t  FROM cdm.DEVICE_EXPOSURE\r\n\t\t WHERE DEVICE_EXPOSURE.device_concept_id IN ( SELECT t.device_concept_id \r\n\t\t                                          FROM cdm.DEVICE_EXPOSURE t   \r\n\t\t\t\t\t\t\t\t\t\t\t\t  JOIN cdm.CONCEPT c\r\n\t\t\t\t\t\t\t\t\t\t\t\t    ON t.device_concept_id = c.CONCEPT_ID \r\n\t\t\t\t\t\t\t\t\t\t\t     WHERE c.STANDARD_CONCEPT != 'S' OR c.INVALID_REASON IS NOT NULL ) \r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.DEVICE_EXPOSURE\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":439,"QUERY_TEXT":"\r\n/*********\r\nFIELD_IS_STANDARD_VALID_CONCEPT\r\n\r\nall standard concept id fields are standard and valid\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = DEVICE_EXPOSURE\r\ncdmFieldName = device_type_concept_id\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'DEVICE_EXPOSURE.device_type_concept_id' AS violating_field, DEVICE_EXPOSURE.* \r\n\t\t  FROM cdm.DEVICE_EXPOSURE\r\n\t\t WHERE DEVICE_EXPOSURE.device_type_concept_id IN ( SELECT t.device_type_concept_id \r\n\t\t                                          FROM cdm.DEVICE_EXPOSURE t   \r\n\t\t\t\t\t\t\t\t\t\t\t\t  JOIN cdm.CONCEPT c\r\n\t\t\t\t\t\t\t\t\t\t\t\t    ON t.device_type_concept_id = c.CONCEPT_ID \r\n\t\t\t\t\t\t\t\t\t\t\t     WHERE c.STANDARD_CONCEPT != 'S' OR c.INVALID_REASON IS NOT NULL ) \r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.DEVICE_EXPOSURE\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":440,"QUERY_TEXT":"\r\n/*********\r\nFIELD_IS_STANDARD_VALID_CONCEPT\r\n\r\nall standard concept id fields are standard and valid\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = MEASUREMENT\r\ncdmFieldName = measurement_concept_id\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'MEASUREMENT.measurement_concept_id' AS violating_field, MEASUREMENT.* \r\n\t\t  FROM cdm.MEASUREMENT\r\n\t\t WHERE MEASUREMENT.measurement_concept_id IN ( SELECT t.measurement_concept_id \r\n\t\t                                          FROM cdm.MEASUREMENT t   \r\n\t\t\t\t\t\t\t\t\t\t\t\t  JOIN cdm.CONCEPT c\r\n\t\t\t\t\t\t\t\t\t\t\t\t    ON t.measurement_concept_id = c.CONCEPT_ID \r\n\t\t\t\t\t\t\t\t\t\t\t     WHERE c.STANDARD_CONCEPT != 'S' OR c.INVALID_REASON IS NOT NULL ) \r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.MEASUREMENT\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":441,"QUERY_TEXT":"\r\n/*********\r\nFIELD_IS_STANDARD_VALID_CONCEPT\r\n\r\nall standard concept id fields are standard and valid\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = MEASUREMENT\r\ncdmFieldName = measurement_type_concept_id\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'MEASUREMENT.measurement_type_concept_id' AS violating_field, MEASUREMENT.* \r\n\t\t  FROM cdm.MEASUREMENT\r\n\t\t WHERE MEASUREMENT.measurement_type_concept_id IN ( SELECT t.measurement_type_concept_id \r\n\t\t                                          FROM cdm.MEASUREMENT t   \r\n\t\t\t\t\t\t\t\t\t\t\t\t  JOIN cdm.CONCEPT c\r\n\t\t\t\t\t\t\t\t\t\t\t\t    ON t.measurement_type_concept_id = c.CONCEPT_ID \r\n\t\t\t\t\t\t\t\t\t\t\t     WHERE c.STANDARD_CONCEPT != 'S' OR c.INVALID_REASON IS NOT NULL ) \r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.MEASUREMENT\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":3993412,"PCT_VIOLATED_ROWS":0.2891,"CHECK_ID":442,"QUERY_TEXT":"\r\n/*********\r\nFIELD_IS_STANDARD_VALID_CONCEPT\r\n\r\nall standard concept id fields are standard and valid\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = MEASUREMENT\r\ncdmFieldName = unit_concept_id\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'MEASUREMENT.unit_concept_id' AS violating_field, MEASUREMENT.* \r\n\t\t  FROM cdm.MEASUREMENT\r\n\t\t WHERE MEASUREMENT.unit_concept_id IN ( SELECT t.unit_concept_id \r\n\t\t                                          FROM cdm.MEASUREMENT t   \r\n\t\t\t\t\t\t\t\t\t\t\t\t  JOIN cdm.CONCEPT c\r\n\t\t\t\t\t\t\t\t\t\t\t\t    ON t.unit_concept_id = c.CONCEPT_ID \r\n\t\t\t\t\t\t\t\t\t\t\t     WHERE c.STANDARD_CONCEPT != 'S' OR c.INVALID_REASON IS NOT NULL ) \r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.MEASUREMENT\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":443,"QUERY_TEXT":"\r\n/*********\r\nFIELD_IS_STANDARD_VALID_CONCEPT\r\n\r\nall standard concept id fields are standard and valid\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = VISIT_DETAIL\r\ncdmFieldName = visit_detail_concept_id\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'VISIT_DETAIL.visit_detail_concept_id' AS violating_field, VISIT_DETAIL.* \r\n\t\t  FROM cdm.VISIT_DETAIL\r\n\t\t WHERE VISIT_DETAIL.visit_detail_concept_id IN ( SELECT t.visit_detail_concept_id \r\n\t\t                                          FROM cdm.VISIT_DETAIL t   \r\n\t\t\t\t\t\t\t\t\t\t\t\t  JOIN cdm.CONCEPT c\r\n\t\t\t\t\t\t\t\t\t\t\t\t    ON t.visit_detail_concept_id = c.CONCEPT_ID \r\n\t\t\t\t\t\t\t\t\t\t\t     WHERE c.STANDARD_CONCEPT != 'S' OR c.INVALID_REASON IS NOT NULL ) \r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.VISIT_DETAIL\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":444,"QUERY_TEXT":"\r\n/*********\r\nFIELD_IS_STANDARD_VALID_CONCEPT\r\n\r\nall standard concept id fields are standard and valid\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = VISIT_DETAIL\r\ncdmFieldName = visit_detail_type_concept_id\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'VISIT_DETAIL.visit_detail_type_concept_id' AS violating_field, VISIT_DETAIL.* \r\n\t\t  FROM cdm.VISIT_DETAIL\r\n\t\t WHERE VISIT_DETAIL.visit_detail_type_concept_id IN ( SELECT t.visit_detail_type_concept_id \r\n\t\t                                          FROM cdm.VISIT_DETAIL t   \r\n\t\t\t\t\t\t\t\t\t\t\t\t  JOIN cdm.CONCEPT c\r\n\t\t\t\t\t\t\t\t\t\t\t\t    ON t.visit_detail_type_concept_id = c.CONCEPT_ID \r\n\t\t\t\t\t\t\t\t\t\t\t     WHERE c.STANDARD_CONCEPT != 'S' OR c.INVALID_REASON IS NOT NULL ) \r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.VISIT_DETAIL\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":445,"QUERY_TEXT":"\r\n/*********\r\nFIELD_IS_STANDARD_VALID_CONCEPT\r\n\r\nall standard concept id fields are standard and valid\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = NOTE\r\ncdmFieldName = note_type_concept_id\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'NOTE.note_type_concept_id' AS violating_field, NOTE.* \r\n\t\t  FROM cdm.NOTE\r\n\t\t WHERE NOTE.note_type_concept_id IN ( SELECT t.note_type_concept_id \r\n\t\t                                          FROM cdm.NOTE t   \r\n\t\t\t\t\t\t\t\t\t\t\t\t  JOIN cdm.CONCEPT c\r\n\t\t\t\t\t\t\t\t\t\t\t\t    ON t.note_type_concept_id = c.CONCEPT_ID \r\n\t\t\t\t\t\t\t\t\t\t\t     WHERE c.STANDARD_CONCEPT != 'S' OR c.INVALID_REASON IS NOT NULL ) \r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.NOTE\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":446,"QUERY_TEXT":"\r\n/*********\r\nFIELD_IS_STANDARD_VALID_CONCEPT\r\n\r\nall standard concept id fields are standard and valid\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = NOTE\r\ncdmFieldName = note_class_concept_id\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'NOTE.note_class_concept_id' AS violating_field, NOTE.* \r\n\t\t  FROM cdm.NOTE\r\n\t\t WHERE NOTE.note_class_concept_id IN ( SELECT t.note_class_concept_id \r\n\t\t                                          FROM cdm.NOTE t   \r\n\t\t\t\t\t\t\t\t\t\t\t\t  JOIN cdm.CONCEPT c\r\n\t\t\t\t\t\t\t\t\t\t\t\t    ON t.note_class_concept_id = c.CONCEPT_ID \r\n\t\t\t\t\t\t\t\t\t\t\t     WHERE c.STANDARD_CONCEPT != 'S' OR c.INVALID_REASON IS NOT NULL ) \r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.NOTE\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":447,"QUERY_TEXT":"\r\n/*********\r\nFIELD_IS_STANDARD_VALID_CONCEPT\r\n\r\nall standard concept id fields are standard and valid\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = NOTE\r\ncdmFieldName = encoding_concept_id\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'NOTE.encoding_concept_id' AS violating_field, NOTE.* \r\n\t\t  FROM cdm.NOTE\r\n\t\t WHERE NOTE.encoding_concept_id IN ( SELECT t.encoding_concept_id \r\n\t\t                                          FROM cdm.NOTE t   \r\n\t\t\t\t\t\t\t\t\t\t\t\t  JOIN cdm.CONCEPT c\r\n\t\t\t\t\t\t\t\t\t\t\t\t    ON t.encoding_concept_id = c.CONCEPT_ID \r\n\t\t\t\t\t\t\t\t\t\t\t     WHERE c.STANDARD_CONCEPT != 'S' OR c.INVALID_REASON IS NOT NULL ) \r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.NOTE\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":448,"QUERY_TEXT":"\r\n/*********\r\nFIELD_IS_STANDARD_VALID_CONCEPT\r\n\r\nall standard concept id fields are standard and valid\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = NOTE\r\ncdmFieldName = language_concept_id\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'NOTE.language_concept_id' AS violating_field, NOTE.* \r\n\t\t  FROM cdm.NOTE\r\n\t\t WHERE NOTE.language_concept_id IN ( SELECT t.language_concept_id \r\n\t\t                                          FROM cdm.NOTE t   \r\n\t\t\t\t\t\t\t\t\t\t\t\t  JOIN cdm.CONCEPT c\r\n\t\t\t\t\t\t\t\t\t\t\t\t    ON t.language_concept_id = c.CONCEPT_ID \r\n\t\t\t\t\t\t\t\t\t\t\t     WHERE c.STANDARD_CONCEPT != 'S' OR c.INVALID_REASON IS NOT NULL ) \r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.NOTE\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":449,"QUERY_TEXT":"\r\n/*********\r\nFIELD_IS_STANDARD_VALID_CONCEPT\r\n\r\nall standard concept id fields are standard and valid\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = NOTE_NLP\r\ncdmFieldName = section_concept_id\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'NOTE_NLP.section_concept_id' AS violating_field, NOTE_NLP.* \r\n\t\t  FROM cdm.NOTE_NLP\r\n\t\t WHERE NOTE_NLP.section_concept_id IN ( SELECT t.section_concept_id \r\n\t\t                                          FROM cdm.NOTE_NLP t   \r\n\t\t\t\t\t\t\t\t\t\t\t\t  JOIN cdm.CONCEPT c\r\n\t\t\t\t\t\t\t\t\t\t\t\t    ON t.section_concept_id = c.CONCEPT_ID \r\n\t\t\t\t\t\t\t\t\t\t\t     WHERE c.STANDARD_CONCEPT != 'S' OR c.INVALID_REASON IS NOT NULL ) \r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.NOTE_NLP\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":450,"QUERY_TEXT":"\r\n/*********\r\nFIELD_IS_STANDARD_VALID_CONCEPT\r\n\r\nall standard concept id fields are standard and valid\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = NOTE_NLP\r\ncdmFieldName = note_nlp_concept_id\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'NOTE_NLP.note_nlp_concept_id' AS violating_field, NOTE_NLP.* \r\n\t\t  FROM cdm.NOTE_NLP\r\n\t\t WHERE NOTE_NLP.note_nlp_concept_id IN ( SELECT t.note_nlp_concept_id \r\n\t\t                                          FROM cdm.NOTE_NLP t   \r\n\t\t\t\t\t\t\t\t\t\t\t\t  JOIN cdm.CONCEPT c\r\n\t\t\t\t\t\t\t\t\t\t\t\t    ON t.note_nlp_concept_id = c.CONCEPT_ID \r\n\t\t\t\t\t\t\t\t\t\t\t     WHERE c.STANDARD_CONCEPT != 'S' OR c.INVALID_REASON IS NOT NULL ) \r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.NOTE_NLP\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":29786,"PCT_VIOLATED_ROWS":0.4815,"CHECK_ID":451,"QUERY_TEXT":"\r\n/*********\r\nFIELD_IS_STANDARD_VALID_CONCEPT\r\n\r\nall standard concept id fields are standard and valid\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = OBSERVATION\r\ncdmFieldName = observation_concept_id\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'OBSERVATION.observation_concept_id' AS violating_field, OBSERVATION.* \r\n\t\t  FROM cdm.OBSERVATION\r\n\t\t WHERE OBSERVATION.observation_concept_id IN ( SELECT t.observation_concept_id \r\n\t\t                                          FROM cdm.OBSERVATION t   \r\n\t\t\t\t\t\t\t\t\t\t\t\t  JOIN cdm.CONCEPT c\r\n\t\t\t\t\t\t\t\t\t\t\t\t    ON t.observation_concept_id = c.CONCEPT_ID \r\n\t\t\t\t\t\t\t\t\t\t\t     WHERE c.STANDARD_CONCEPT != 'S' OR c.INVALID_REASON IS NOT NULL ) \r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.OBSERVATION\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":452,"QUERY_TEXT":"\r\n/*********\r\nFIELD_IS_STANDARD_VALID_CONCEPT\r\n\r\nall standard concept id fields are standard and valid\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = OBSERVATION\r\ncdmFieldName = observation_type_concept_id\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'OBSERVATION.observation_type_concept_id' AS violating_field, OBSERVATION.* \r\n\t\t  FROM cdm.OBSERVATION\r\n\t\t WHERE OBSERVATION.observation_type_concept_id IN ( SELECT t.observation_type_concept_id \r\n\t\t                                          FROM cdm.OBSERVATION t   \r\n\t\t\t\t\t\t\t\t\t\t\t\t  JOIN cdm.CONCEPT c\r\n\t\t\t\t\t\t\t\t\t\t\t\t    ON t.observation_type_concept_id = c.CONCEPT_ID \r\n\t\t\t\t\t\t\t\t\t\t\t     WHERE c.STANDARD_CONCEPT != 'S' OR c.INVALID_REASON IS NOT NULL ) \r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.OBSERVATION\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":61864,"PCT_VIOLATED_ROWS":1,"CHECK_ID":453,"QUERY_TEXT":"\r\n/*********\r\nFIELD_IS_STANDARD_VALID_CONCEPT\r\n\r\nall standard concept id fields are standard and valid\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = OBSERVATION\r\ncdmFieldName = qualifier_concept_id\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'OBSERVATION.qualifier_concept_id' AS violating_field, OBSERVATION.* \r\n\t\t  FROM cdm.OBSERVATION\r\n\t\t WHERE OBSERVATION.qualifier_concept_id IN ( SELECT t.qualifier_concept_id \r\n\t\t                                          FROM cdm.OBSERVATION t   \r\n\t\t\t\t\t\t\t\t\t\t\t\t  JOIN cdm.CONCEPT c\r\n\t\t\t\t\t\t\t\t\t\t\t\t    ON t.qualifier_concept_id = c.CONCEPT_ID \r\n\t\t\t\t\t\t\t\t\t\t\t     WHERE c.STANDARD_CONCEPT != 'S' OR c.INVALID_REASON IS NOT NULL ) \r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.OBSERVATION\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":61864,"PCT_VIOLATED_ROWS":1,"CHECK_ID":454,"QUERY_TEXT":"\r\n/*********\r\nFIELD_IS_STANDARD_VALID_CONCEPT\r\n\r\nall standard concept id fields are standard and valid\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = OBSERVATION\r\ncdmFieldName = unit_concept_id\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'OBSERVATION.unit_concept_id' AS violating_field, OBSERVATION.* \r\n\t\t  FROM cdm.OBSERVATION\r\n\t\t WHERE OBSERVATION.unit_concept_id IN ( SELECT t.unit_concept_id \r\n\t\t                                          FROM cdm.OBSERVATION t   \r\n\t\t\t\t\t\t\t\t\t\t\t\t  JOIN cdm.CONCEPT c\r\n\t\t\t\t\t\t\t\t\t\t\t\t    ON t.unit_concept_id = c.CONCEPT_ID \r\n\t\t\t\t\t\t\t\t\t\t\t     WHERE c.STANDARD_CONCEPT != 'S' OR c.INVALID_REASON IS NOT NULL ) \r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.OBSERVATION\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":455,"QUERY_TEXT":"\r\n/*********\r\nFIELD_IS_STANDARD_VALID_CONCEPT\r\n\r\nall standard concept id fields are standard and valid\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = SPECIMEN\r\ncdmFieldName = specimen_concept_id\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'SPECIMEN.specimen_concept_id' AS violating_field, SPECIMEN.* \r\n\t\t  FROM cdm.SPECIMEN\r\n\t\t WHERE SPECIMEN.specimen_concept_id IN ( SELECT t.specimen_concept_id \r\n\t\t                                          FROM cdm.SPECIMEN t   \r\n\t\t\t\t\t\t\t\t\t\t\t\t  JOIN cdm.CONCEPT c\r\n\t\t\t\t\t\t\t\t\t\t\t\t    ON t.specimen_concept_id = c.CONCEPT_ID \r\n\t\t\t\t\t\t\t\t\t\t\t     WHERE c.STANDARD_CONCEPT != 'S' OR c.INVALID_REASON IS NOT NULL ) \r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.SPECIMEN\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":456,"QUERY_TEXT":"\r\n/*********\r\nFIELD_IS_STANDARD_VALID_CONCEPT\r\n\r\nall standard concept id fields are standard and valid\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = SPECIMEN\r\ncdmFieldName = specimen_type_concept_id\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'SPECIMEN.specimen_type_concept_id' AS violating_field, SPECIMEN.* \r\n\t\t  FROM cdm.SPECIMEN\r\n\t\t WHERE SPECIMEN.specimen_type_concept_id IN ( SELECT t.specimen_type_concept_id \r\n\t\t                                          FROM cdm.SPECIMEN t   \r\n\t\t\t\t\t\t\t\t\t\t\t\t  JOIN cdm.CONCEPT c\r\n\t\t\t\t\t\t\t\t\t\t\t\t    ON t.specimen_type_concept_id = c.CONCEPT_ID \r\n\t\t\t\t\t\t\t\t\t\t\t     WHERE c.STANDARD_CONCEPT != 'S' OR c.INVALID_REASON IS NOT NULL ) \r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.SPECIMEN\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":457,"QUERY_TEXT":"\r\n/*********\r\nFIELD_IS_STANDARD_VALID_CONCEPT\r\n\r\nall standard concept id fields are standard and valid\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = SPECIMEN\r\ncdmFieldName = unit_concept_id\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'SPECIMEN.unit_concept_id' AS violating_field, SPECIMEN.* \r\n\t\t  FROM cdm.SPECIMEN\r\n\t\t WHERE SPECIMEN.unit_concept_id IN ( SELECT t.unit_concept_id \r\n\t\t                                          FROM cdm.SPECIMEN t   \r\n\t\t\t\t\t\t\t\t\t\t\t\t  JOIN cdm.CONCEPT c\r\n\t\t\t\t\t\t\t\t\t\t\t\t    ON t.unit_concept_id = c.CONCEPT_ID \r\n\t\t\t\t\t\t\t\t\t\t\t     WHERE c.STANDARD_CONCEPT != 'S' OR c.INVALID_REASON IS NOT NULL ) \r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.SPECIMEN\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":458,"QUERY_TEXT":"\r\n/*********\r\nFIELD_IS_STANDARD_VALID_CONCEPT\r\n\r\nall standard concept id fields are standard and valid\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = SPECIMEN\r\ncdmFieldName = anatomic_site_concept_id\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'SPECIMEN.anatomic_site_concept_id' AS violating_field, SPECIMEN.* \r\n\t\t  FROM cdm.SPECIMEN\r\n\t\t WHERE SPECIMEN.anatomic_site_concept_id IN ( SELECT t.anatomic_site_concept_id \r\n\t\t                                          FROM cdm.SPECIMEN t   \r\n\t\t\t\t\t\t\t\t\t\t\t\t  JOIN cdm.CONCEPT c\r\n\t\t\t\t\t\t\t\t\t\t\t\t    ON t.anatomic_site_concept_id = c.CONCEPT_ID \r\n\t\t\t\t\t\t\t\t\t\t\t     WHERE c.STANDARD_CONCEPT != 'S' OR c.INVALID_REASON IS NOT NULL ) \r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.SPECIMEN\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":459,"QUERY_TEXT":"\r\n/*********\r\nFIELD_IS_STANDARD_VALID_CONCEPT\r\n\r\nall standard concept id fields are standard and valid\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = SPECIMEN\r\ncdmFieldName = disease_status_concept_id\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'SPECIMEN.disease_status_concept_id' AS violating_field, SPECIMEN.* \r\n\t\t  FROM cdm.SPECIMEN\r\n\t\t WHERE SPECIMEN.disease_status_concept_id IN ( SELECT t.disease_status_concept_id \r\n\t\t                                          FROM cdm.SPECIMEN t   \r\n\t\t\t\t\t\t\t\t\t\t\t\t  JOIN cdm.CONCEPT c\r\n\t\t\t\t\t\t\t\t\t\t\t\t    ON t.disease_status_concept_id = c.CONCEPT_ID \r\n\t\t\t\t\t\t\t\t\t\t\t     WHERE c.STANDARD_CONCEPT != 'S' OR c.INVALID_REASON IS NOT NULL ) \r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.SPECIMEN\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":172,"PCT_VIOLATED_ROWS":1,"CHECK_ID":460,"QUERY_TEXT":"\r\n/*********\r\nFIELD_IS_STANDARD_VALID_CONCEPT\r\n\r\nall standard concept id fields are standard and valid\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = CARE_SITE\r\ncdmFieldName = place_of_service_concept_id\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'CARE_SITE.place_of_service_concept_id' AS violating_field, CARE_SITE.* \r\n\t\t  FROM cdm.CARE_SITE\r\n\t\t WHERE CARE_SITE.place_of_service_concept_id IN ( SELECT t.place_of_service_concept_id \r\n\t\t                                          FROM cdm.CARE_SITE t   \r\n\t\t\t\t\t\t\t\t\t\t\t\t  JOIN cdm.CONCEPT c\r\n\t\t\t\t\t\t\t\t\t\t\t\t    ON t.place_of_service_concept_id = c.CONCEPT_ID \r\n\t\t\t\t\t\t\t\t\t\t\t     WHERE c.STANDARD_CONCEPT != 'S' OR c.INVALID_REASON IS NOT NULL ) \r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.CARE_SITE\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":1102,"PCT_VIOLATED_ROWS":1,"CHECK_ID":461,"QUERY_TEXT":"\r\n/*********\r\nFIELD_IS_STANDARD_VALID_CONCEPT\r\n\r\nall standard concept id fields are standard and valid\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = PROVIDER\r\ncdmFieldName = specialty_concept_id\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'PROVIDER.specialty_concept_id' AS violating_field, PROVIDER.* \r\n\t\t  FROM cdm.PROVIDER\r\n\t\t WHERE PROVIDER.specialty_concept_id IN ( SELECT t.specialty_concept_id \r\n\t\t                                          FROM cdm.PROVIDER t   \r\n\t\t\t\t\t\t\t\t\t\t\t\t  JOIN cdm.CONCEPT c\r\n\t\t\t\t\t\t\t\t\t\t\t\t    ON t.specialty_concept_id = c.CONCEPT_ID \r\n\t\t\t\t\t\t\t\t\t\t\t     WHERE c.STANDARD_CONCEPT != 'S' OR c.INVALID_REASON IS NOT NULL ) \r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.PROVIDER\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":1102,"PCT_VIOLATED_ROWS":1,"CHECK_ID":462,"QUERY_TEXT":"\r\n/*********\r\nFIELD_IS_STANDARD_VALID_CONCEPT\r\n\r\nall standard concept id fields are standard and valid\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = PROVIDER\r\ncdmFieldName = gender_concept_id\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'PROVIDER.gender_concept_id' AS violating_field, PROVIDER.* \r\n\t\t  FROM cdm.PROVIDER\r\n\t\t WHERE PROVIDER.gender_concept_id IN ( SELECT t.gender_concept_id \r\n\t\t                                          FROM cdm.PROVIDER t   \r\n\t\t\t\t\t\t\t\t\t\t\t\t  JOIN cdm.CONCEPT c\r\n\t\t\t\t\t\t\t\t\t\t\t\t    ON t.gender_concept_id = c.CONCEPT_ID \r\n\t\t\t\t\t\t\t\t\t\t\t     WHERE c.STANDARD_CONCEPT != 'S' OR c.INVALID_REASON IS NOT NULL ) \r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.PROVIDER\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":463,"QUERY_TEXT":"\r\n/*********\r\nFIELD_IS_STANDARD_VALID_CONCEPT\r\n\r\nall standard concept id fields are standard and valid\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = COST\r\ncdmFieldName = cost_type_concept_id\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'COST.cost_type_concept_id' AS violating_field, COST.* \r\n\t\t  FROM cdm.COST\r\n\t\t WHERE COST.cost_type_concept_id IN ( SELECT t.cost_type_concept_id \r\n\t\t                                          FROM cdm.COST t   \r\n\t\t\t\t\t\t\t\t\t\t\t\t  JOIN cdm.CONCEPT c\r\n\t\t\t\t\t\t\t\t\t\t\t\t    ON t.cost_type_concept_id = c.CONCEPT_ID \r\n\t\t\t\t\t\t\t\t\t\t\t     WHERE c.STANDARD_CONCEPT != 'S' OR c.INVALID_REASON IS NOT NULL ) \r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.COST\r\n) denominator\r\n;","CATEGORY":"Conformance"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":464,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = PERSON\r\ncdmFieldName = person_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'PERSON.person_id' AS violating_field, PERSON.* \r\n\t\tFROM cdm.PERSON\r\n\t\tWHERE cdm.PERSON.person_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.PERSON\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":465,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = PERSON\r\ncdmFieldName = gender_concept_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'PERSON.gender_concept_id' AS violating_field, PERSON.* \r\n\t\tFROM cdm.PERSON\r\n\t\tWHERE cdm.PERSON.gender_concept_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.PERSON\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":466,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = PERSON\r\ncdmFieldName = year_of_birth\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'PERSON.year_of_birth' AS violating_field, PERSON.* \r\n\t\tFROM cdm.PERSON\r\n\t\tWHERE cdm.PERSON.year_of_birth IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.PERSON\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness"},{"NUM_VIOLATED_ROWS":9572,"PCT_VIOLATED_ROWS":1,"CHECK_ID":467,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = PERSON\r\ncdmFieldName = month_of_birth\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'PERSON.month_of_birth' AS violating_field, PERSON.* \r\n\t\tFROM cdm.PERSON\r\n\t\tWHERE cdm.PERSON.month_of_birth IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.PERSON\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness"},{"NUM_VIOLATED_ROWS":9572,"PCT_VIOLATED_ROWS":1,"CHECK_ID":468,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = PERSON\r\ncdmFieldName = day_of_birth\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'PERSON.day_of_birth' AS violating_field, PERSON.* \r\n\t\tFROM cdm.PERSON\r\n\t\tWHERE cdm.PERSON.day_of_birth IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.PERSON\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness"},{"NUM_VIOLATED_ROWS":9572,"PCT_VIOLATED_ROWS":1,"CHECK_ID":469,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = PERSON\r\ncdmFieldName = birth_datetime\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'PERSON.birth_datetime' AS violating_field, PERSON.* \r\n\t\tFROM cdm.PERSON\r\n\t\tWHERE cdm.PERSON.birth_datetime IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.PERSON\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":470,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = PERSON\r\ncdmFieldName = race_concept_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'PERSON.race_concept_id' AS violating_field, PERSON.* \r\n\t\tFROM cdm.PERSON\r\n\t\tWHERE cdm.PERSON.race_concept_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.PERSON\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":471,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = PERSON\r\ncdmFieldName = ethnicity_concept_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'PERSON.ethnicity_concept_id' AS violating_field, PERSON.* \r\n\t\tFROM cdm.PERSON\r\n\t\tWHERE cdm.PERSON.ethnicity_concept_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.PERSON\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":472,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = PERSON\r\ncdmFieldName = location_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'PERSON.location_id' AS violating_field, PERSON.* \r\n\t\tFROM cdm.PERSON\r\n\t\tWHERE cdm.PERSON.location_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.PERSON\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness"},{"NUM_VIOLATED_ROWS":1144,"PCT_VIOLATED_ROWS":0.1195,"CHECK_ID":473,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = PERSON\r\ncdmFieldName = provider_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'PERSON.provider_id' AS violating_field, PERSON.* \r\n\t\tFROM cdm.PERSON\r\n\t\tWHERE cdm.PERSON.provider_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.PERSON\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":474,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = PERSON\r\ncdmFieldName = care_site_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'PERSON.care_site_id' AS violating_field, PERSON.* \r\n\t\tFROM cdm.PERSON\r\n\t\tWHERE cdm.PERSON.care_site_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.PERSON\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":475,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = PERSON\r\ncdmFieldName = person_source_value\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'PERSON.person_source_value' AS violating_field, PERSON.* \r\n\t\tFROM cdm.PERSON\r\n\t\tWHERE cdm.PERSON.person_source_value IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.PERSON\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":476,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = PERSON\r\ncdmFieldName = gender_source_value\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'PERSON.gender_source_value' AS violating_field, PERSON.* \r\n\t\tFROM cdm.PERSON\r\n\t\tWHERE cdm.PERSON.gender_source_value IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.PERSON\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":477,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = PERSON\r\ncdmFieldName = gender_source_concept_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'PERSON.gender_source_concept_id' AS violating_field, PERSON.* \r\n\t\tFROM cdm.PERSON\r\n\t\tWHERE cdm.PERSON.gender_source_concept_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.PERSON\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":478,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = PERSON\r\ncdmFieldName = race_source_value\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'PERSON.race_source_value' AS violating_field, PERSON.* \r\n\t\tFROM cdm.PERSON\r\n\t\tWHERE cdm.PERSON.race_source_value IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.PERSON\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":479,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = PERSON\r\ncdmFieldName = race_source_concept_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'PERSON.race_source_concept_id' AS violating_field, PERSON.* \r\n\t\tFROM cdm.PERSON\r\n\t\tWHERE cdm.PERSON.race_source_concept_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.PERSON\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":480,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = PERSON\r\ncdmFieldName = ethnicity_source_value\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'PERSON.ethnicity_source_value' AS violating_field, PERSON.* \r\n\t\tFROM cdm.PERSON\r\n\t\tWHERE cdm.PERSON.ethnicity_source_value IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.PERSON\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":481,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = PERSON\r\ncdmFieldName = ethnicity_source_concept_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'PERSON.ethnicity_source_concept_id' AS violating_field, PERSON.* \r\n\t\tFROM cdm.PERSON\r\n\t\tWHERE cdm.PERSON.ethnicity_source_concept_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.PERSON\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":482,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = OBSERVATION_PERIOD\r\ncdmFieldName = observation_period_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'OBSERVATION_PERIOD.observation_period_id' AS violating_field, OBSERVATION_PERIOD.* \r\n\t\tFROM cdm.OBSERVATION_PERIOD\r\n\t\tWHERE cdm.OBSERVATION_PERIOD.observation_period_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.OBSERVATION_PERIOD\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":483,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = OBSERVATION_PERIOD\r\ncdmFieldName = person_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'OBSERVATION_PERIOD.person_id' AS violating_field, OBSERVATION_PERIOD.* \r\n\t\tFROM cdm.OBSERVATION_PERIOD\r\n\t\tWHERE cdm.OBSERVATION_PERIOD.person_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.OBSERVATION_PERIOD\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":484,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = OBSERVATION_PERIOD\r\ncdmFieldName = observation_period_start_date\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'OBSERVATION_PERIOD.observation_period_start_date' AS violating_field, OBSERVATION_PERIOD.* \r\n\t\tFROM cdm.OBSERVATION_PERIOD\r\n\t\tWHERE cdm.OBSERVATION_PERIOD.observation_period_start_date IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.OBSERVATION_PERIOD\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":485,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = OBSERVATION_PERIOD\r\ncdmFieldName = observation_period_end_date\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'OBSERVATION_PERIOD.observation_period_end_date' AS violating_field, OBSERVATION_PERIOD.* \r\n\t\tFROM cdm.OBSERVATION_PERIOD\r\n\t\tWHERE cdm.OBSERVATION_PERIOD.observation_period_end_date IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.OBSERVATION_PERIOD\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":486,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = OBSERVATION_PERIOD\r\ncdmFieldName = period_type_concept_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'OBSERVATION_PERIOD.period_type_concept_id' AS violating_field, OBSERVATION_PERIOD.* \r\n\t\tFROM cdm.OBSERVATION_PERIOD\r\n\t\tWHERE cdm.OBSERVATION_PERIOD.period_type_concept_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.OBSERVATION_PERIOD\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":487,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = VISIT_OCCURRENCE\r\ncdmFieldName = visit_occurrence_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'VISIT_OCCURRENCE.visit_occurrence_id' AS violating_field, VISIT_OCCURRENCE.* \r\n\t\tFROM cdm.VISIT_OCCURRENCE\r\n\t\tWHERE cdm.VISIT_OCCURRENCE.visit_occurrence_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.VISIT_OCCURRENCE\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":488,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = VISIT_OCCURRENCE\r\ncdmFieldName = person_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'VISIT_OCCURRENCE.person_id' AS violating_field, VISIT_OCCURRENCE.* \r\n\t\tFROM cdm.VISIT_OCCURRENCE\r\n\t\tWHERE cdm.VISIT_OCCURRENCE.person_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.VISIT_OCCURRENCE\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":489,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = VISIT_OCCURRENCE\r\ncdmFieldName = visit_concept_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'VISIT_OCCURRENCE.visit_concept_id' AS violating_field, VISIT_OCCURRENCE.* \r\n\t\tFROM cdm.VISIT_OCCURRENCE\r\n\t\tWHERE cdm.VISIT_OCCURRENCE.visit_concept_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.VISIT_OCCURRENCE\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":490,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = VISIT_OCCURRENCE\r\ncdmFieldName = visit_start_date\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'VISIT_OCCURRENCE.visit_start_date' AS violating_field, VISIT_OCCURRENCE.* \r\n\t\tFROM cdm.VISIT_OCCURRENCE\r\n\t\tWHERE cdm.VISIT_OCCURRENCE.visit_start_date IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.VISIT_OCCURRENCE\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness"},{"NUM_VIOLATED_ROWS":620709,"PCT_VIOLATED_ROWS":1,"CHECK_ID":491,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = VISIT_OCCURRENCE\r\ncdmFieldName = visit_start_datetime\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'VISIT_OCCURRENCE.visit_start_datetime' AS violating_field, VISIT_OCCURRENCE.* \r\n\t\tFROM cdm.VISIT_OCCURRENCE\r\n\t\tWHERE cdm.VISIT_OCCURRENCE.visit_start_datetime IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.VISIT_OCCURRENCE\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":492,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = VISIT_OCCURRENCE\r\ncdmFieldName = visit_end_date\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'VISIT_OCCURRENCE.visit_end_date' AS violating_field, VISIT_OCCURRENCE.* \r\n\t\tFROM cdm.VISIT_OCCURRENCE\r\n\t\tWHERE cdm.VISIT_OCCURRENCE.visit_end_date IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.VISIT_OCCURRENCE\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness"},{"NUM_VIOLATED_ROWS":620709,"PCT_VIOLATED_ROWS":1,"CHECK_ID":493,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = VISIT_OCCURRENCE\r\ncdmFieldName = visit_end_datetime\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'VISIT_OCCURRENCE.visit_end_datetime' AS violating_field, VISIT_OCCURRENCE.* \r\n\t\tFROM cdm.VISIT_OCCURRENCE\r\n\t\tWHERE cdm.VISIT_OCCURRENCE.visit_end_datetime IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.VISIT_OCCURRENCE\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":494,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = VISIT_OCCURRENCE\r\ncdmFieldName = visit_type_concept_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'VISIT_OCCURRENCE.visit_type_concept_id' AS violating_field, VISIT_OCCURRENCE.* \r\n\t\tFROM cdm.VISIT_OCCURRENCE\r\n\t\tWHERE cdm.VISIT_OCCURRENCE.visit_type_concept_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.VISIT_OCCURRENCE\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness"},{"NUM_VIOLATED_ROWS":620709,"PCT_VIOLATED_ROWS":1,"CHECK_ID":495,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = VISIT_OCCURRENCE\r\ncdmFieldName = provider_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'VISIT_OCCURRENCE.provider_id' AS violating_field, VISIT_OCCURRENCE.* \r\n\t\tFROM cdm.VISIT_OCCURRENCE\r\n\t\tWHERE cdm.VISIT_OCCURRENCE.provider_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.VISIT_OCCURRENCE\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness"},{"NUM_VIOLATED_ROWS":620709,"PCT_VIOLATED_ROWS":1,"CHECK_ID":496,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = VISIT_OCCURRENCE\r\ncdmFieldName = care_site_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'VISIT_OCCURRENCE.care_site_id' AS violating_field, VISIT_OCCURRENCE.* \r\n\t\tFROM cdm.VISIT_OCCURRENCE\r\n\t\tWHERE cdm.VISIT_OCCURRENCE.care_site_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.VISIT_OCCURRENCE\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":497,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = VISIT_OCCURRENCE\r\ncdmFieldName = visit_source_value\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'VISIT_OCCURRENCE.visit_source_value' AS violating_field, VISIT_OCCURRENCE.* \r\n\t\tFROM cdm.VISIT_OCCURRENCE\r\n\t\tWHERE cdm.VISIT_OCCURRENCE.visit_source_value IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.VISIT_OCCURRENCE\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":498,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = VISIT_OCCURRENCE\r\ncdmFieldName = visit_source_concept_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'VISIT_OCCURRENCE.visit_source_concept_id' AS violating_field, VISIT_OCCURRENCE.* \r\n\t\tFROM cdm.VISIT_OCCURRENCE\r\n\t\tWHERE cdm.VISIT_OCCURRENCE.visit_source_concept_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.VISIT_OCCURRENCE\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":499,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = VISIT_OCCURRENCE\r\ncdmFieldName = admitting_source_concept_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'VISIT_OCCURRENCE.admitting_source_concept_id' AS violating_field, VISIT_OCCURRENCE.* \r\n\t\tFROM cdm.VISIT_OCCURRENCE\r\n\t\tWHERE cdm.VISIT_OCCURRENCE.admitting_source_concept_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.VISIT_OCCURRENCE\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness"},{"NUM_VIOLATED_ROWS":620709,"PCT_VIOLATED_ROWS":1,"CHECK_ID":500,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = VISIT_OCCURRENCE\r\ncdmFieldName = admitting_source_value\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'VISIT_OCCURRENCE.admitting_source_value' AS violating_field, VISIT_OCCURRENCE.* \r\n\t\tFROM cdm.VISIT_OCCURRENCE\r\n\t\tWHERE cdm.VISIT_OCCURRENCE.admitting_source_value IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.VISIT_OCCURRENCE\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":501,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = VISIT_OCCURRENCE\r\ncdmFieldName = discharge_to_concept_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'VISIT_OCCURRENCE.discharge_to_concept_id' AS violating_field, VISIT_OCCURRENCE.* \r\n\t\tFROM cdm.VISIT_OCCURRENCE\r\n\t\tWHERE cdm.VISIT_OCCURRENCE.discharge_to_concept_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.VISIT_OCCURRENCE\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness"},{"NUM_VIOLATED_ROWS":620709,"PCT_VIOLATED_ROWS":1,"CHECK_ID":502,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = VISIT_OCCURRENCE\r\ncdmFieldName = discharge_to_source_value\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'VISIT_OCCURRENCE.discharge_to_source_value' AS violating_field, VISIT_OCCURRENCE.* \r\n\t\tFROM cdm.VISIT_OCCURRENCE\r\n\t\tWHERE cdm.VISIT_OCCURRENCE.discharge_to_source_value IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.VISIT_OCCURRENCE\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":503,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = VISIT_OCCURRENCE\r\ncdmFieldName = preceding_visit_occurrence_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'VISIT_OCCURRENCE.preceding_visit_occurrence_id' AS violating_field, VISIT_OCCURRENCE.* \r\n\t\tFROM cdm.VISIT_OCCURRENCE\r\n\t\tWHERE cdm.VISIT_OCCURRENCE.preceding_visit_occurrence_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.VISIT_OCCURRENCE\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":504,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = CONDITION_OCCURRENCE\r\ncdmFieldName = condition_occurrence_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'CONDITION_OCCURRENCE.condition_occurrence_id' AS violating_field, CONDITION_OCCURRENCE.* \r\n\t\tFROM cdm.CONDITION_OCCURRENCE\r\n\t\tWHERE cdm.CONDITION_OCCURRENCE.condition_occurrence_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.CONDITION_OCCURRENCE\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":505,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = CONDITION_OCCURRENCE\r\ncdmFieldName = person_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'CONDITION_OCCURRENCE.person_id' AS violating_field, CONDITION_OCCURRENCE.* \r\n\t\tFROM cdm.CONDITION_OCCURRENCE\r\n\t\tWHERE cdm.CONDITION_OCCURRENCE.person_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.CONDITION_OCCURRENCE\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":506,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = CONDITION_OCCURRENCE\r\ncdmFieldName = condition_concept_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'CONDITION_OCCURRENCE.condition_concept_id' AS violating_field, CONDITION_OCCURRENCE.* \r\n\t\tFROM cdm.CONDITION_OCCURRENCE\r\n\t\tWHERE cdm.CONDITION_OCCURRENCE.condition_concept_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.CONDITION_OCCURRENCE\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":507,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = CONDITION_OCCURRENCE\r\ncdmFieldName = condition_start_date\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'CONDITION_OCCURRENCE.condition_start_date' AS violating_field, CONDITION_OCCURRENCE.* \r\n\t\tFROM cdm.CONDITION_OCCURRENCE\r\n\t\tWHERE cdm.CONDITION_OCCURRENCE.condition_start_date IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.CONDITION_OCCURRENCE\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness"},{"NUM_VIOLATED_ROWS":245805,"PCT_VIOLATED_ROWS":1,"CHECK_ID":508,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = CONDITION_OCCURRENCE\r\ncdmFieldName = condition_start_datetime\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'CONDITION_OCCURRENCE.condition_start_datetime' AS violating_field, CONDITION_OCCURRENCE.* \r\n\t\tFROM cdm.CONDITION_OCCURRENCE\r\n\t\tWHERE cdm.CONDITION_OCCURRENCE.condition_start_datetime IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.CONDITION_OCCURRENCE\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness"},{"NUM_VIOLATED_ROWS":245805,"PCT_VIOLATED_ROWS":1,"CHECK_ID":509,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = CONDITION_OCCURRENCE\r\ncdmFieldName = condition_end_date\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'CONDITION_OCCURRENCE.condition_end_date' AS violating_field, CONDITION_OCCURRENCE.* \r\n\t\tFROM cdm.CONDITION_OCCURRENCE\r\n\t\tWHERE cdm.CONDITION_OCCURRENCE.condition_end_date IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.CONDITION_OCCURRENCE\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness"},{"NUM_VIOLATED_ROWS":245805,"PCT_VIOLATED_ROWS":1,"CHECK_ID":510,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = CONDITION_OCCURRENCE\r\ncdmFieldName = condition_end_datetime\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'CONDITION_OCCURRENCE.condition_end_datetime' AS violating_field, CONDITION_OCCURRENCE.* \r\n\t\tFROM cdm.CONDITION_OCCURRENCE\r\n\t\tWHERE cdm.CONDITION_OCCURRENCE.condition_end_datetime IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.CONDITION_OCCURRENCE\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":511,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = CONDITION_OCCURRENCE\r\ncdmFieldName = condition_type_concept_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'CONDITION_OCCURRENCE.condition_type_concept_id' AS violating_field, CONDITION_OCCURRENCE.* \r\n\t\tFROM cdm.CONDITION_OCCURRENCE\r\n\t\tWHERE cdm.CONDITION_OCCURRENCE.condition_type_concept_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.CONDITION_OCCURRENCE\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":512,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = CONDITION_OCCURRENCE\r\ncdmFieldName = condition_status_concept_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'CONDITION_OCCURRENCE.condition_status_concept_id' AS violating_field, CONDITION_OCCURRENCE.* \r\n\t\tFROM cdm.CONDITION_OCCURRENCE\r\n\t\tWHERE cdm.CONDITION_OCCURRENCE.condition_status_concept_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.CONDITION_OCCURRENCE\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness"},{"NUM_VIOLATED_ROWS":245805,"PCT_VIOLATED_ROWS":1,"CHECK_ID":513,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = CONDITION_OCCURRENCE\r\ncdmFieldName = stop_reason\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'CONDITION_OCCURRENCE.stop_reason' AS violating_field, CONDITION_OCCURRENCE.* \r\n\t\tFROM cdm.CONDITION_OCCURRENCE\r\n\t\tWHERE cdm.CONDITION_OCCURRENCE.stop_reason IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.CONDITION_OCCURRENCE\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness"},{"NUM_VIOLATED_ROWS":245805,"PCT_VIOLATED_ROWS":1,"CHECK_ID":514,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = CONDITION_OCCURRENCE\r\ncdmFieldName = provider_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'CONDITION_OCCURRENCE.provider_id' AS violating_field, CONDITION_OCCURRENCE.* \r\n\t\tFROM cdm.CONDITION_OCCURRENCE\r\n\t\tWHERE cdm.CONDITION_OCCURRENCE.provider_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.CONDITION_OCCURRENCE\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness"},{"NUM_VIOLATED_ROWS":54564,"PCT_VIOLATED_ROWS":0.222,"CHECK_ID":515,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = CONDITION_OCCURRENCE\r\ncdmFieldName = visit_occurrence_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'CONDITION_OCCURRENCE.visit_occurrence_id' AS violating_field, CONDITION_OCCURRENCE.* \r\n\t\tFROM cdm.CONDITION_OCCURRENCE\r\n\t\tWHERE cdm.CONDITION_OCCURRENCE.visit_occurrence_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.CONDITION_OCCURRENCE\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness"},{"NUM_VIOLATED_ROWS":245805,"PCT_VIOLATED_ROWS":1,"CHECK_ID":516,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = CONDITION_OCCURRENCE\r\ncdmFieldName = visit_detail_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'CONDITION_OCCURRENCE.visit_detail_id' AS violating_field, CONDITION_OCCURRENCE.* \r\n\t\tFROM cdm.CONDITION_OCCURRENCE\r\n\t\tWHERE cdm.CONDITION_OCCURRENCE.visit_detail_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.CONDITION_OCCURRENCE\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":517,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = CONDITION_OCCURRENCE\r\ncdmFieldName = condition_source_value\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'CONDITION_OCCURRENCE.condition_source_value' AS violating_field, CONDITION_OCCURRENCE.* \r\n\t\tFROM cdm.CONDITION_OCCURRENCE\r\n\t\tWHERE cdm.CONDITION_OCCURRENCE.condition_source_value IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.CONDITION_OCCURRENCE\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":518,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = CONDITION_OCCURRENCE\r\ncdmFieldName = condition_source_concept_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'CONDITION_OCCURRENCE.condition_source_concept_id' AS violating_field, CONDITION_OCCURRENCE.* \r\n\t\tFROM cdm.CONDITION_OCCURRENCE\r\n\t\tWHERE cdm.CONDITION_OCCURRENCE.condition_source_concept_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.CONDITION_OCCURRENCE\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness"},{"NUM_VIOLATED_ROWS":245805,"PCT_VIOLATED_ROWS":1,"CHECK_ID":519,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = CONDITION_OCCURRENCE\r\ncdmFieldName = condition_status_source_value\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'CONDITION_OCCURRENCE.condition_status_source_value' AS violating_field, CONDITION_OCCURRENCE.* \r\n\t\tFROM cdm.CONDITION_OCCURRENCE\r\n\t\tWHERE cdm.CONDITION_OCCURRENCE.condition_status_source_value IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.CONDITION_OCCURRENCE\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":520,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = DRUG_EXPOSURE\r\ncdmFieldName = drug_exposure_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'DRUG_EXPOSURE.drug_exposure_id' AS violating_field, DRUG_EXPOSURE.* \r\n\t\tFROM cdm.DRUG_EXPOSURE\r\n\t\tWHERE cdm.DRUG_EXPOSURE.drug_exposure_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.DRUG_EXPOSURE\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":521,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = DRUG_EXPOSURE\r\ncdmFieldName = person_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'DRUG_EXPOSURE.person_id' AS violating_field, DRUG_EXPOSURE.* \r\n\t\tFROM cdm.DRUG_EXPOSURE\r\n\t\tWHERE cdm.DRUG_EXPOSURE.person_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.DRUG_EXPOSURE\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":522,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = DRUG_EXPOSURE\r\ncdmFieldName = drug_concept_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'DRUG_EXPOSURE.drug_concept_id' AS violating_field, DRUG_EXPOSURE.* \r\n\t\tFROM cdm.DRUG_EXPOSURE\r\n\t\tWHERE cdm.DRUG_EXPOSURE.drug_concept_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.DRUG_EXPOSURE\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":523,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = DRUG_EXPOSURE\r\ncdmFieldName = drug_exposure_start_date\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'DRUG_EXPOSURE.drug_exposure_start_date' AS violating_field, DRUG_EXPOSURE.* \r\n\t\tFROM cdm.DRUG_EXPOSURE\r\n\t\tWHERE cdm.DRUG_EXPOSURE.drug_exposure_start_date IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.DRUG_EXPOSURE\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness"},{"NUM_VIOLATED_ROWS":512038,"PCT_VIOLATED_ROWS":1,"CHECK_ID":524,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = DRUG_EXPOSURE\r\ncdmFieldName = drug_exposure_start_datetime\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'DRUG_EXPOSURE.drug_exposure_start_datetime' AS violating_field, DRUG_EXPOSURE.* \r\n\t\tFROM cdm.DRUG_EXPOSURE\r\n\t\tWHERE cdm.DRUG_EXPOSURE.drug_exposure_start_datetime IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.DRUG_EXPOSURE\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":525,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = DRUG_EXPOSURE\r\ncdmFieldName = drug_exposure_end_date\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'DRUG_EXPOSURE.drug_exposure_end_date' AS violating_field, DRUG_EXPOSURE.* \r\n\t\tFROM cdm.DRUG_EXPOSURE\r\n\t\tWHERE cdm.DRUG_EXPOSURE.drug_exposure_end_date IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.DRUG_EXPOSURE\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness"},{"NUM_VIOLATED_ROWS":512038,"PCT_VIOLATED_ROWS":1,"CHECK_ID":526,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = DRUG_EXPOSURE\r\ncdmFieldName = drug_exposure_end_datetime\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'DRUG_EXPOSURE.drug_exposure_end_datetime' AS violating_field, DRUG_EXPOSURE.* \r\n\t\tFROM cdm.DRUG_EXPOSURE\r\n\t\tWHERE cdm.DRUG_EXPOSURE.drug_exposure_end_datetime IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.DRUG_EXPOSURE\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness"},{"NUM_VIOLATED_ROWS":512038,"PCT_VIOLATED_ROWS":1,"CHECK_ID":527,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = DRUG_EXPOSURE\r\ncdmFieldName = verbatim_end_date\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'DRUG_EXPOSURE.verbatim_end_date' AS violating_field, DRUG_EXPOSURE.* \r\n\t\tFROM cdm.DRUG_EXPOSURE\r\n\t\tWHERE cdm.DRUG_EXPOSURE.verbatim_end_date IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.DRUG_EXPOSURE\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":528,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = DRUG_EXPOSURE\r\ncdmFieldName = drug_type_concept_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'DRUG_EXPOSURE.drug_type_concept_id' AS violating_field, DRUG_EXPOSURE.* \r\n\t\tFROM cdm.DRUG_EXPOSURE\r\n\t\tWHERE cdm.DRUG_EXPOSURE.drug_type_concept_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.DRUG_EXPOSURE\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness"},{"NUM_VIOLATED_ROWS":512038,"PCT_VIOLATED_ROWS":1,"CHECK_ID":529,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = DRUG_EXPOSURE\r\ncdmFieldName = stop_reason\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'DRUG_EXPOSURE.stop_reason' AS violating_field, DRUG_EXPOSURE.* \r\n\t\tFROM cdm.DRUG_EXPOSURE\r\n\t\tWHERE cdm.DRUG_EXPOSURE.stop_reason IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.DRUG_EXPOSURE\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness"},{"NUM_VIOLATED_ROWS":301935,"PCT_VIOLATED_ROWS":0.5897,"CHECK_ID":530,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = DRUG_EXPOSURE\r\ncdmFieldName = refills\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'DRUG_EXPOSURE.refills' AS violating_field, DRUG_EXPOSURE.* \r\n\t\tFROM cdm.DRUG_EXPOSURE\r\n\t\tWHERE cdm.DRUG_EXPOSURE.refills IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.DRUG_EXPOSURE\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness"},{"NUM_VIOLATED_ROWS":512038,"PCT_VIOLATED_ROWS":1,"CHECK_ID":531,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = DRUG_EXPOSURE\r\ncdmFieldName = quantity\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'DRUG_EXPOSURE.quantity' AS violating_field, DRUG_EXPOSURE.* \r\n\t\tFROM cdm.DRUG_EXPOSURE\r\n\t\tWHERE cdm.DRUG_EXPOSURE.quantity IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.DRUG_EXPOSURE\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness"},{"NUM_VIOLATED_ROWS":512038,"PCT_VIOLATED_ROWS":1,"CHECK_ID":532,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = DRUG_EXPOSURE\r\ncdmFieldName = days_supply\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'DRUG_EXPOSURE.days_supply' AS violating_field, DRUG_EXPOSURE.* \r\n\t\tFROM cdm.DRUG_EXPOSURE\r\n\t\tWHERE cdm.DRUG_EXPOSURE.days_supply IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.DRUG_EXPOSURE\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness"},{"NUM_VIOLATED_ROWS":210103,"PCT_VIOLATED_ROWS":0.4103,"CHECK_ID":533,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = DRUG_EXPOSURE\r\ncdmFieldName = sig\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'DRUG_EXPOSURE.sig' AS violating_field, DRUG_EXPOSURE.* \r\n\t\tFROM cdm.DRUG_EXPOSURE\r\n\t\tWHERE cdm.DRUG_EXPOSURE.sig IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.DRUG_EXPOSURE\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":534,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = DRUG_EXPOSURE\r\ncdmFieldName = route_concept_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'DRUG_EXPOSURE.route_concept_id' AS violating_field, DRUG_EXPOSURE.* \r\n\t\tFROM cdm.DRUG_EXPOSURE\r\n\t\tWHERE cdm.DRUG_EXPOSURE.route_concept_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.DRUG_EXPOSURE\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness"},{"NUM_VIOLATED_ROWS":512038,"PCT_VIOLATED_ROWS":1,"CHECK_ID":535,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = DRUG_EXPOSURE\r\ncdmFieldName = lot_number\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'DRUG_EXPOSURE.lot_number' AS violating_field, DRUG_EXPOSURE.* \r\n\t\tFROM cdm.DRUG_EXPOSURE\r\n\t\tWHERE cdm.DRUG_EXPOSURE.lot_number IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.DRUG_EXPOSURE\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness"},{"NUM_VIOLATED_ROWS":512038,"PCT_VIOLATED_ROWS":1,"CHECK_ID":536,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = DRUG_EXPOSURE\r\ncdmFieldName = provider_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'DRUG_EXPOSURE.provider_id' AS violating_field, DRUG_EXPOSURE.* \r\n\t\tFROM cdm.DRUG_EXPOSURE\r\n\t\tWHERE cdm.DRUG_EXPOSURE.provider_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.DRUG_EXPOSURE\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness"},{"NUM_VIOLATED_ROWS":512038,"PCT_VIOLATED_ROWS":1,"CHECK_ID":537,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = DRUG_EXPOSURE\r\ncdmFieldName = visit_occurrence_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'DRUG_EXPOSURE.visit_occurrence_id' AS violating_field, DRUG_EXPOSURE.* \r\n\t\tFROM cdm.DRUG_EXPOSURE\r\n\t\tWHERE cdm.DRUG_EXPOSURE.visit_occurrence_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.DRUG_EXPOSURE\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness"},{"NUM_VIOLATED_ROWS":512038,"PCT_VIOLATED_ROWS":1,"CHECK_ID":538,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = DRUG_EXPOSURE\r\ncdmFieldName = visit_detail_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'DRUG_EXPOSURE.visit_detail_id' AS violating_field, DRUG_EXPOSURE.* \r\n\t\tFROM cdm.DRUG_EXPOSURE\r\n\t\tWHERE cdm.DRUG_EXPOSURE.visit_detail_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.DRUG_EXPOSURE\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness"},{"NUM_VIOLATED_ROWS":301935,"PCT_VIOLATED_ROWS":0.5897,"CHECK_ID":539,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = DRUG_EXPOSURE\r\ncdmFieldName = drug_source_value\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'DRUG_EXPOSURE.drug_source_value' AS violating_field, DRUG_EXPOSURE.* \r\n\t\tFROM cdm.DRUG_EXPOSURE\r\n\t\tWHERE cdm.DRUG_EXPOSURE.drug_source_value IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.DRUG_EXPOSURE\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":540,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = DRUG_EXPOSURE\r\ncdmFieldName = drug_source_concept_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'DRUG_EXPOSURE.drug_source_concept_id' AS violating_field, DRUG_EXPOSURE.* \r\n\t\tFROM cdm.DRUG_EXPOSURE\r\n\t\tWHERE cdm.DRUG_EXPOSURE.drug_source_concept_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.DRUG_EXPOSURE\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":541,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = DRUG_EXPOSURE\r\ncdmFieldName = route_source_value\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'DRUG_EXPOSURE.route_source_value' AS violating_field, DRUG_EXPOSURE.* \r\n\t\tFROM cdm.DRUG_EXPOSURE\r\n\t\tWHERE cdm.DRUG_EXPOSURE.route_source_value IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.DRUG_EXPOSURE\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness"},{"NUM_VIOLATED_ROWS":512038,"PCT_VIOLATED_ROWS":1,"CHECK_ID":542,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = DRUG_EXPOSURE\r\ncdmFieldName = dose_unit_source_value\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'DRUG_EXPOSURE.dose_unit_source_value' AS violating_field, DRUG_EXPOSURE.* \r\n\t\tFROM cdm.DRUG_EXPOSURE\r\n\t\tWHERE cdm.DRUG_EXPOSURE.dose_unit_source_value IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.DRUG_EXPOSURE\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":543,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = PROCEDURE_OCCURRENCE\r\ncdmFieldName = procedure_occurrence_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'PROCEDURE_OCCURRENCE.procedure_occurrence_id' AS violating_field, PROCEDURE_OCCURRENCE.* \r\n\t\tFROM cdm.PROCEDURE_OCCURRENCE\r\n\t\tWHERE cdm.PROCEDURE_OCCURRENCE.procedure_occurrence_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.PROCEDURE_OCCURRENCE\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":544,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = PROCEDURE_OCCURRENCE\r\ncdmFieldName = person_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'PROCEDURE_OCCURRENCE.person_id' AS violating_field, PROCEDURE_OCCURRENCE.* \r\n\t\tFROM cdm.PROCEDURE_OCCURRENCE\r\n\t\tWHERE cdm.PROCEDURE_OCCURRENCE.person_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.PROCEDURE_OCCURRENCE\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":545,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = PROCEDURE_OCCURRENCE\r\ncdmFieldName = procedure_concept_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'PROCEDURE_OCCURRENCE.procedure_concept_id' AS violating_field, PROCEDURE_OCCURRENCE.* \r\n\t\tFROM cdm.PROCEDURE_OCCURRENCE\r\n\t\tWHERE cdm.PROCEDURE_OCCURRENCE.procedure_concept_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.PROCEDURE_OCCURRENCE\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":546,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = PROCEDURE_OCCURRENCE\r\ncdmFieldName = procedure_date\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'PROCEDURE_OCCURRENCE.procedure_date' AS violating_field, PROCEDURE_OCCURRENCE.* \r\n\t\tFROM cdm.PROCEDURE_OCCURRENCE\r\n\t\tWHERE cdm.PROCEDURE_OCCURRENCE.procedure_date IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.PROCEDURE_OCCURRENCE\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness"},{"NUM_VIOLATED_ROWS":15268,"PCT_VIOLATED_ROWS":1,"CHECK_ID":547,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = PROCEDURE_OCCURRENCE\r\ncdmFieldName = procedure_datetime\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'PROCEDURE_OCCURRENCE.procedure_datetime' AS violating_field, PROCEDURE_OCCURRENCE.* \r\n\t\tFROM cdm.PROCEDURE_OCCURRENCE\r\n\t\tWHERE cdm.PROCEDURE_OCCURRENCE.procedure_datetime IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.PROCEDURE_OCCURRENCE\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":548,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = PROCEDURE_OCCURRENCE\r\ncdmFieldName = procedure_type_concept_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'PROCEDURE_OCCURRENCE.procedure_type_concept_id' AS violating_field, PROCEDURE_OCCURRENCE.* \r\n\t\tFROM cdm.PROCEDURE_OCCURRENCE\r\n\t\tWHERE cdm.PROCEDURE_OCCURRENCE.procedure_type_concept_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.PROCEDURE_OCCURRENCE\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":549,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = PROCEDURE_OCCURRENCE\r\ncdmFieldName = modifier_concept_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'PROCEDURE_OCCURRENCE.modifier_concept_id' AS violating_field, PROCEDURE_OCCURRENCE.* \r\n\t\tFROM cdm.PROCEDURE_OCCURRENCE\r\n\t\tWHERE cdm.PROCEDURE_OCCURRENCE.modifier_concept_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.PROCEDURE_OCCURRENCE\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness"},{"NUM_VIOLATED_ROWS":15268,"PCT_VIOLATED_ROWS":1,"CHECK_ID":550,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = PROCEDURE_OCCURRENCE\r\ncdmFieldName = quantity\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'PROCEDURE_OCCURRENCE.quantity' AS violating_field, PROCEDURE_OCCURRENCE.* \r\n\t\tFROM cdm.PROCEDURE_OCCURRENCE\r\n\t\tWHERE cdm.PROCEDURE_OCCURRENCE.quantity IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.PROCEDURE_OCCURRENCE\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness"},{"NUM_VIOLATED_ROWS":15268,"PCT_VIOLATED_ROWS":1,"CHECK_ID":551,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = PROCEDURE_OCCURRENCE\r\ncdmFieldName = provider_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'PROCEDURE_OCCURRENCE.provider_id' AS violating_field, PROCEDURE_OCCURRENCE.* \r\n\t\tFROM cdm.PROCEDURE_OCCURRENCE\r\n\t\tWHERE cdm.PROCEDURE_OCCURRENCE.provider_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.PROCEDURE_OCCURRENCE\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness"},{"NUM_VIOLATED_ROWS":2538,"PCT_VIOLATED_ROWS":0.1662,"CHECK_ID":552,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = PROCEDURE_OCCURRENCE\r\ncdmFieldName = visit_occurrence_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'PROCEDURE_OCCURRENCE.visit_occurrence_id' AS violating_field, PROCEDURE_OCCURRENCE.* \r\n\t\tFROM cdm.PROCEDURE_OCCURRENCE\r\n\t\tWHERE cdm.PROCEDURE_OCCURRENCE.visit_occurrence_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.PROCEDURE_OCCURRENCE\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness"},{"NUM_VIOLATED_ROWS":15268,"PCT_VIOLATED_ROWS":1,"CHECK_ID":553,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = PROCEDURE_OCCURRENCE\r\ncdmFieldName = visit_detail_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'PROCEDURE_OCCURRENCE.visit_detail_id' AS violating_field, PROCEDURE_OCCURRENCE.* \r\n\t\tFROM cdm.PROCEDURE_OCCURRENCE\r\n\t\tWHERE cdm.PROCEDURE_OCCURRENCE.visit_detail_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.PROCEDURE_OCCURRENCE\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":554,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = PROCEDURE_OCCURRENCE\r\ncdmFieldName = procedure_source_value\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'PROCEDURE_OCCURRENCE.procedure_source_value' AS violating_field, PROCEDURE_OCCURRENCE.* \r\n\t\tFROM cdm.PROCEDURE_OCCURRENCE\r\n\t\tWHERE cdm.PROCEDURE_OCCURRENCE.procedure_source_value IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.PROCEDURE_OCCURRENCE\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":555,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = PROCEDURE_OCCURRENCE\r\ncdmFieldName = procedure_source_concept_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'PROCEDURE_OCCURRENCE.procedure_source_concept_id' AS violating_field, PROCEDURE_OCCURRENCE.* \r\n\t\tFROM cdm.PROCEDURE_OCCURRENCE\r\n\t\tWHERE cdm.PROCEDURE_OCCURRENCE.procedure_source_concept_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.PROCEDURE_OCCURRENCE\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness"},{"NUM_VIOLATED_ROWS":15268,"PCT_VIOLATED_ROWS":1,"CHECK_ID":556,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = PROCEDURE_OCCURRENCE\r\ncdmFieldName = modifier_source_value\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'PROCEDURE_OCCURRENCE.modifier_source_value' AS violating_field, PROCEDURE_OCCURRENCE.* \r\n\t\tFROM cdm.PROCEDURE_OCCURRENCE\r\n\t\tWHERE cdm.PROCEDURE_OCCURRENCE.modifier_source_value IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.PROCEDURE_OCCURRENCE\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness"},{"CHECK_ID":557,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = DEVICE_EXPOSURE\r\ncdmFieldName = device_exposure_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'DEVICE_EXPOSURE.device_exposure_id' AS violating_field, DEVICE_EXPOSURE.* \r\n\t\tFROM cdm.DEVICE_EXPOSURE\r\n\t\tWHERE cdm.DEVICE_EXPOSURE.device_exposure_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.DEVICE_EXPOSURE\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: Divide by zero;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":558,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = DEVICE_EXPOSURE\r\ncdmFieldName = person_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'DEVICE_EXPOSURE.person_id' AS violating_field, DEVICE_EXPOSURE.* \r\n\t\tFROM cdm.DEVICE_EXPOSURE\r\n\t\tWHERE cdm.DEVICE_EXPOSURE.person_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.DEVICE_EXPOSURE\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: Divide by zero;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":559,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = DEVICE_EXPOSURE\r\ncdmFieldName = device_concept_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'DEVICE_EXPOSURE.device_concept_id' AS violating_field, DEVICE_EXPOSURE.* \r\n\t\tFROM cdm.DEVICE_EXPOSURE\r\n\t\tWHERE cdm.DEVICE_EXPOSURE.device_concept_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.DEVICE_EXPOSURE\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: Divide by zero;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":560,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = DEVICE_EXPOSURE\r\ncdmFieldName = device_exposure_start_date\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'DEVICE_EXPOSURE.device_exposure_start_date' AS violating_field, DEVICE_EXPOSURE.* \r\n\t\tFROM cdm.DEVICE_EXPOSURE\r\n\t\tWHERE cdm.DEVICE_EXPOSURE.device_exposure_start_date IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.DEVICE_EXPOSURE\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: Divide by zero;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":561,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = DEVICE_EXPOSURE\r\ncdmFieldName = device_exposure_start_datetime\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'DEVICE_EXPOSURE.device_exposure_start_datetime' AS violating_field, DEVICE_EXPOSURE.* \r\n\t\tFROM cdm.DEVICE_EXPOSURE\r\n\t\tWHERE cdm.DEVICE_EXPOSURE.device_exposure_start_datetime IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.DEVICE_EXPOSURE\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: Divide by zero;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":562,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = DEVICE_EXPOSURE\r\ncdmFieldName = device_exposure_end_date\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'DEVICE_EXPOSURE.device_exposure_end_date' AS violating_field, DEVICE_EXPOSURE.* \r\n\t\tFROM cdm.DEVICE_EXPOSURE\r\n\t\tWHERE cdm.DEVICE_EXPOSURE.device_exposure_end_date IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.DEVICE_EXPOSURE\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: Divide by zero;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":563,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = DEVICE_EXPOSURE\r\ncdmFieldName = device_exposure_end_datetime\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'DEVICE_EXPOSURE.device_exposure_end_datetime' AS violating_field, DEVICE_EXPOSURE.* \r\n\t\tFROM cdm.DEVICE_EXPOSURE\r\n\t\tWHERE cdm.DEVICE_EXPOSURE.device_exposure_end_datetime IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.DEVICE_EXPOSURE\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: Divide by zero;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":564,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = DEVICE_EXPOSURE\r\ncdmFieldName = device_type_concept_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'DEVICE_EXPOSURE.device_type_concept_id' AS violating_field, DEVICE_EXPOSURE.* \r\n\t\tFROM cdm.DEVICE_EXPOSURE\r\n\t\tWHERE cdm.DEVICE_EXPOSURE.device_type_concept_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.DEVICE_EXPOSURE\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: Divide by zero;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":565,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = DEVICE_EXPOSURE\r\ncdmFieldName = unique_device_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'DEVICE_EXPOSURE.unique_device_id' AS violating_field, DEVICE_EXPOSURE.* \r\n\t\tFROM cdm.DEVICE_EXPOSURE\r\n\t\tWHERE cdm.DEVICE_EXPOSURE.unique_device_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.DEVICE_EXPOSURE\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: Divide by zero;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":566,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = DEVICE_EXPOSURE\r\ncdmFieldName = quantity\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'DEVICE_EXPOSURE.quantity' AS violating_field, DEVICE_EXPOSURE.* \r\n\t\tFROM cdm.DEVICE_EXPOSURE\r\n\t\tWHERE cdm.DEVICE_EXPOSURE.quantity IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.DEVICE_EXPOSURE\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: Divide by zero;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":567,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = DEVICE_EXPOSURE\r\ncdmFieldName = provider_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'DEVICE_EXPOSURE.provider_id' AS violating_field, DEVICE_EXPOSURE.* \r\n\t\tFROM cdm.DEVICE_EXPOSURE\r\n\t\tWHERE cdm.DEVICE_EXPOSURE.provider_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.DEVICE_EXPOSURE\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: Divide by zero;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":568,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = DEVICE_EXPOSURE\r\ncdmFieldName = visit_occurrence_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'DEVICE_EXPOSURE.visit_occurrence_id' AS violating_field, DEVICE_EXPOSURE.* \r\n\t\tFROM cdm.DEVICE_EXPOSURE\r\n\t\tWHERE cdm.DEVICE_EXPOSURE.visit_occurrence_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.DEVICE_EXPOSURE\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: Divide by zero;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":569,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = DEVICE_EXPOSURE\r\ncdmFieldName = visit_detail_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'DEVICE_EXPOSURE.visit_detail_id' AS violating_field, DEVICE_EXPOSURE.* \r\n\t\tFROM cdm.DEVICE_EXPOSURE\r\n\t\tWHERE cdm.DEVICE_EXPOSURE.visit_detail_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.DEVICE_EXPOSURE\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: Divide by zero;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":570,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = DEVICE_EXPOSURE\r\ncdmFieldName = device_source_value\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'DEVICE_EXPOSURE.device_source_value' AS violating_field, DEVICE_EXPOSURE.* \r\n\t\tFROM cdm.DEVICE_EXPOSURE\r\n\t\tWHERE cdm.DEVICE_EXPOSURE.device_source_value IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.DEVICE_EXPOSURE\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: Divide by zero;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":571,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = DEVICE_EXPOSURE\r\ncdmFieldName = device_source_concept_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'DEVICE_EXPOSURE.device_source_concept_id' AS violating_field, DEVICE_EXPOSURE.* \r\n\t\tFROM cdm.DEVICE_EXPOSURE\r\n\t\tWHERE cdm.DEVICE_EXPOSURE.device_source_concept_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.DEVICE_EXPOSURE\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: Divide by zero;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":572,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = MEASUREMENT\r\ncdmFieldName = measurement_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'MEASUREMENT.measurement_id' AS violating_field, MEASUREMENT.* \r\n\t\tFROM cdm.MEASUREMENT\r\n\t\tWHERE cdm.MEASUREMENT.measurement_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.MEASUREMENT\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":573,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = MEASUREMENT\r\ncdmFieldName = person_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'MEASUREMENT.person_id' AS violating_field, MEASUREMENT.* \r\n\t\tFROM cdm.MEASUREMENT\r\n\t\tWHERE cdm.MEASUREMENT.person_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.MEASUREMENT\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":574,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = MEASUREMENT\r\ncdmFieldName = measurement_concept_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'MEASUREMENT.measurement_concept_id' AS violating_field, MEASUREMENT.* \r\n\t\tFROM cdm.MEASUREMENT\r\n\t\tWHERE cdm.MEASUREMENT.measurement_concept_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.MEASUREMENT\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":575,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = MEASUREMENT\r\ncdmFieldName = measurement_date\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'MEASUREMENT.measurement_date' AS violating_field, MEASUREMENT.* \r\n\t\tFROM cdm.MEASUREMENT\r\n\t\tWHERE cdm.MEASUREMENT.measurement_date IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.MEASUREMENT\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness"},{"NUM_VIOLATED_ROWS":13813277,"PCT_VIOLATED_ROWS":1,"CHECK_ID":576,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = MEASUREMENT\r\ncdmFieldName = measurement_datetime\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'MEASUREMENT.measurement_datetime' AS violating_field, MEASUREMENT.* \r\n\t\tFROM cdm.MEASUREMENT\r\n\t\tWHERE cdm.MEASUREMENT.measurement_datetime IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.MEASUREMENT\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness"},{"NUM_VIOLATED_ROWS":158544,"PCT_VIOLATED_ROWS":0.0115,"CHECK_ID":577,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = MEASUREMENT\r\ncdmFieldName = measurement_time\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'MEASUREMENT.measurement_time' AS violating_field, MEASUREMENT.* \r\n\t\tFROM cdm.MEASUREMENT\r\n\t\tWHERE cdm.MEASUREMENT.measurement_time IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.MEASUREMENT\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":578,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = MEASUREMENT\r\ncdmFieldName = measurement_type_concept_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'MEASUREMENT.measurement_type_concept_id' AS violating_field, MEASUREMENT.* \r\n\t\tFROM cdm.MEASUREMENT\r\n\t\tWHERE cdm.MEASUREMENT.measurement_type_concept_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.MEASUREMENT\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":579,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = MEASUREMENT\r\ncdmFieldName = operator_concept_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'MEASUREMENT.operator_concept_id' AS violating_field, MEASUREMENT.* \r\n\t\tFROM cdm.MEASUREMENT\r\n\t\tWHERE cdm.MEASUREMENT.operator_concept_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.MEASUREMENT\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness"},{"NUM_VIOLATED_ROWS":347314,"PCT_VIOLATED_ROWS":0.0251,"CHECK_ID":580,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = MEASUREMENT\r\ncdmFieldName = value_as_number\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'MEASUREMENT.value_as_number' AS violating_field, MEASUREMENT.* \r\n\t\tFROM cdm.MEASUREMENT\r\n\t\tWHERE cdm.MEASUREMENT.value_as_number IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.MEASUREMENT\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":581,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = MEASUREMENT\r\ncdmFieldName = value_as_concept_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'MEASUREMENT.value_as_concept_id' AS violating_field, MEASUREMENT.* \r\n\t\tFROM cdm.MEASUREMENT\r\n\t\tWHERE cdm.MEASUREMENT.value_as_concept_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.MEASUREMENT\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":582,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = MEASUREMENT\r\ncdmFieldName = unit_concept_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'MEASUREMENT.unit_concept_id' AS violating_field, MEASUREMENT.* \r\n\t\tFROM cdm.MEASUREMENT\r\n\t\tWHERE cdm.MEASUREMENT.unit_concept_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.MEASUREMENT\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness"},{"NUM_VIOLATED_ROWS":3974125,"PCT_VIOLATED_ROWS":0.2877,"CHECK_ID":583,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = MEASUREMENT\r\ncdmFieldName = range_low\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'MEASUREMENT.range_low' AS violating_field, MEASUREMENT.* \r\n\t\tFROM cdm.MEASUREMENT\r\n\t\tWHERE cdm.MEASUREMENT.range_low IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.MEASUREMENT\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness"},{"NUM_VIOLATED_ROWS":3994798,"PCT_VIOLATED_ROWS":0.2892,"CHECK_ID":584,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = MEASUREMENT\r\ncdmFieldName = range_high\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'MEASUREMENT.range_high' AS violating_field, MEASUREMENT.* \r\n\t\tFROM cdm.MEASUREMENT\r\n\t\tWHERE cdm.MEASUREMENT.range_high IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.MEASUREMENT\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness"},{"NUM_VIOLATED_ROWS":13813277,"PCT_VIOLATED_ROWS":1,"CHECK_ID":585,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = MEASUREMENT\r\ncdmFieldName = provider_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'MEASUREMENT.provider_id' AS violating_field, MEASUREMENT.* \r\n\t\tFROM cdm.MEASUREMENT\r\n\t\tWHERE cdm.MEASUREMENT.provider_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.MEASUREMENT\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness"},{"NUM_VIOLATED_ROWS":158893,"PCT_VIOLATED_ROWS":0.0115,"CHECK_ID":586,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = MEASUREMENT\r\ncdmFieldName = visit_occurrence_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'MEASUREMENT.visit_occurrence_id' AS violating_field, MEASUREMENT.* \r\n\t\tFROM cdm.MEASUREMENT\r\n\t\tWHERE cdm.MEASUREMENT.visit_occurrence_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.MEASUREMENT\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness"},{"NUM_VIOLATED_ROWS":13813277,"PCT_VIOLATED_ROWS":1,"CHECK_ID":587,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = MEASUREMENT\r\ncdmFieldName = visit_detail_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'MEASUREMENT.visit_detail_id' AS violating_field, MEASUREMENT.* \r\n\t\tFROM cdm.MEASUREMENT\r\n\t\tWHERE cdm.MEASUREMENT.visit_detail_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.MEASUREMENT\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness"},{"NUM_VIOLATED_ROWS":158544,"PCT_VIOLATED_ROWS":0.0115,"CHECK_ID":588,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = MEASUREMENT\r\ncdmFieldName = measurement_source_value\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'MEASUREMENT.measurement_source_value' AS violating_field, MEASUREMENT.* \r\n\t\tFROM cdm.MEASUREMENT\r\n\t\tWHERE cdm.MEASUREMENT.measurement_source_value IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.MEASUREMENT\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":589,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = MEASUREMENT\r\ncdmFieldName = measurement_source_concept_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'MEASUREMENT.measurement_source_concept_id' AS violating_field, MEASUREMENT.* \r\n\t\tFROM cdm.MEASUREMENT\r\n\t\tWHERE cdm.MEASUREMENT.measurement_source_concept_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.MEASUREMENT\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness"},{"NUM_VIOLATED_ROWS":159973,"PCT_VIOLATED_ROWS":0.0116,"CHECK_ID":590,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = MEASUREMENT\r\ncdmFieldName = unit_source_value\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'MEASUREMENT.unit_source_value' AS violating_field, MEASUREMENT.* \r\n\t\tFROM cdm.MEASUREMENT\r\n\t\tWHERE cdm.MEASUREMENT.unit_source_value IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.MEASUREMENT\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness"},{"NUM_VIOLATED_ROWS":13813277,"PCT_VIOLATED_ROWS":1,"CHECK_ID":591,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = MEASUREMENT\r\ncdmFieldName = value_source_value\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'MEASUREMENT.value_source_value' AS violating_field, MEASUREMENT.* \r\n\t\tFROM cdm.MEASUREMENT\r\n\t\tWHERE cdm.MEASUREMENT.value_source_value IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.MEASUREMENT\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness"},{"CHECK_ID":592,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = VISIT_DETAIL\r\ncdmFieldName = visit_detail_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'VISIT_DETAIL.visit_detail_id' AS violating_field, VISIT_DETAIL.* \r\n\t\tFROM cdm.VISIT_DETAIL\r\n\t\tWHERE cdm.VISIT_DETAIL.visit_detail_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.VISIT_DETAIL\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: Divide by zero;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":593,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = VISIT_DETAIL\r\ncdmFieldName = person_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'VISIT_DETAIL.person_id' AS violating_field, VISIT_DETAIL.* \r\n\t\tFROM cdm.VISIT_DETAIL\r\n\t\tWHERE cdm.VISIT_DETAIL.person_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.VISIT_DETAIL\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: Divide by zero;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":594,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = VISIT_DETAIL\r\ncdmFieldName = visit_detail_concept_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'VISIT_DETAIL.visit_detail_concept_id' AS violating_field, VISIT_DETAIL.* \r\n\t\tFROM cdm.VISIT_DETAIL\r\n\t\tWHERE cdm.VISIT_DETAIL.visit_detail_concept_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.VISIT_DETAIL\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: Divide by zero;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":595,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = VISIT_DETAIL\r\ncdmFieldName = visit_detail_start_date\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'VISIT_DETAIL.visit_detail_start_date' AS violating_field, VISIT_DETAIL.* \r\n\t\tFROM cdm.VISIT_DETAIL\r\n\t\tWHERE cdm.VISIT_DETAIL.visit_detail_start_date IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.VISIT_DETAIL\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: Divide by zero;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":596,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = VISIT_DETAIL\r\ncdmFieldName = visit_detail_start_datetime\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'VISIT_DETAIL.visit_detail_start_datetime' AS violating_field, VISIT_DETAIL.* \r\n\t\tFROM cdm.VISIT_DETAIL\r\n\t\tWHERE cdm.VISIT_DETAIL.visit_detail_start_datetime IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.VISIT_DETAIL\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: Divide by zero;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":597,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = VISIT_DETAIL\r\ncdmFieldName = visit_detail_end_date\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'VISIT_DETAIL.visit_detail_end_date' AS violating_field, VISIT_DETAIL.* \r\n\t\tFROM cdm.VISIT_DETAIL\r\n\t\tWHERE cdm.VISIT_DETAIL.visit_detail_end_date IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.VISIT_DETAIL\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: Divide by zero;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":598,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = VISIT_DETAIL\r\ncdmFieldName = visit_detail_end_datetime\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'VISIT_DETAIL.visit_detail_end_datetime' AS violating_field, VISIT_DETAIL.* \r\n\t\tFROM cdm.VISIT_DETAIL\r\n\t\tWHERE cdm.VISIT_DETAIL.visit_detail_end_datetime IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.VISIT_DETAIL\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: Divide by zero;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":599,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = VISIT_DETAIL\r\ncdmFieldName = visit_detail_type_concept_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'VISIT_DETAIL.visit_detail_type_concept_id' AS violating_field, VISIT_DETAIL.* \r\n\t\tFROM cdm.VISIT_DETAIL\r\n\t\tWHERE cdm.VISIT_DETAIL.visit_detail_type_concept_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.VISIT_DETAIL\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: Divide by zero;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":600,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = VISIT_DETAIL\r\ncdmFieldName = provider_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'VISIT_DETAIL.provider_id' AS violating_field, VISIT_DETAIL.* \r\n\t\tFROM cdm.VISIT_DETAIL\r\n\t\tWHERE cdm.VISIT_DETAIL.provider_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.VISIT_DETAIL\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: Divide by zero;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":601,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = VISIT_DETAIL\r\ncdmFieldName = care_site_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'VISIT_DETAIL.care_site_id' AS violating_field, VISIT_DETAIL.* \r\n\t\tFROM cdm.VISIT_DETAIL\r\n\t\tWHERE cdm.VISIT_DETAIL.care_site_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.VISIT_DETAIL\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: Divide by zero;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":602,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = VISIT_DETAIL\r\ncdmFieldName = visit_detail_source_value\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'VISIT_DETAIL.visit_detail_source_value' AS violating_field, VISIT_DETAIL.* \r\n\t\tFROM cdm.VISIT_DETAIL\r\n\t\tWHERE cdm.VISIT_DETAIL.visit_detail_source_value IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.VISIT_DETAIL\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: Divide by zero;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":603,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = VISIT_DETAIL\r\ncdmFieldName = visit_detail_source_concept_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'VISIT_DETAIL.visit_detail_source_concept_id' AS violating_field, VISIT_DETAIL.* \r\n\t\tFROM cdm.VISIT_DETAIL\r\n\t\tWHERE cdm.VISIT_DETAIL.visit_detail_source_concept_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.VISIT_DETAIL\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: Divide by zero;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":604,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = VISIT_DETAIL\r\ncdmFieldName = admitting_source_value\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'VISIT_DETAIL.admitting_source_value' AS violating_field, VISIT_DETAIL.* \r\n\t\tFROM cdm.VISIT_DETAIL\r\n\t\tWHERE cdm.VISIT_DETAIL.admitting_source_value IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.VISIT_DETAIL\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: Divide by zero;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":605,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = VISIT_DETAIL\r\ncdmFieldName = admitting_source_concept_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'VISIT_DETAIL.admitting_source_concept_id' AS violating_field, VISIT_DETAIL.* \r\n\t\tFROM cdm.VISIT_DETAIL\r\n\t\tWHERE cdm.VISIT_DETAIL.admitting_source_concept_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.VISIT_DETAIL\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: Divide by zero;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":606,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = VISIT_DETAIL\r\ncdmFieldName = discharge_to_source_value\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'VISIT_DETAIL.discharge_to_source_value' AS violating_field, VISIT_DETAIL.* \r\n\t\tFROM cdm.VISIT_DETAIL\r\n\t\tWHERE cdm.VISIT_DETAIL.discharge_to_source_value IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.VISIT_DETAIL\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: Divide by zero;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":607,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = VISIT_DETAIL\r\ncdmFieldName = discharge_to_concept_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'VISIT_DETAIL.discharge_to_concept_id' AS violating_field, VISIT_DETAIL.* \r\n\t\tFROM cdm.VISIT_DETAIL\r\n\t\tWHERE cdm.VISIT_DETAIL.discharge_to_concept_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.VISIT_DETAIL\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: Divide by zero;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":608,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = VISIT_DETAIL\r\ncdmFieldName = preceding_visit_detail_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'VISIT_DETAIL.preceding_visit_detail_id' AS violating_field, VISIT_DETAIL.* \r\n\t\tFROM cdm.VISIT_DETAIL\r\n\t\tWHERE cdm.VISIT_DETAIL.preceding_visit_detail_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.VISIT_DETAIL\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: Divide by zero;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":609,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = VISIT_DETAIL\r\ncdmFieldName = visit_detail_parent_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'VISIT_DETAIL.visit_detail_parent_id' AS violating_field, VISIT_DETAIL.* \r\n\t\tFROM cdm.VISIT_DETAIL\r\n\t\tWHERE cdm.VISIT_DETAIL.visit_detail_parent_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.VISIT_DETAIL\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: Divide by zero;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":610,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = VISIT_DETAIL\r\ncdmFieldName = visit_occurrence_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'VISIT_DETAIL.visit_occurrence_id' AS violating_field, VISIT_DETAIL.* \r\n\t\tFROM cdm.VISIT_DETAIL\r\n\t\tWHERE cdm.VISIT_DETAIL.visit_occurrence_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.VISIT_DETAIL\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: Divide by zero;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":611,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = NOTE\r\ncdmFieldName = note_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'NOTE.note_id' AS violating_field, NOTE.* \r\n\t\tFROM cdm.NOTE\r\n\t\tWHERE cdm.NOTE.note_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.NOTE\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: Divide by zero;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":612,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = NOTE\r\ncdmFieldName = person_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'NOTE.person_id' AS violating_field, NOTE.* \r\n\t\tFROM cdm.NOTE\r\n\t\tWHERE cdm.NOTE.person_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.NOTE\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: Divide by zero;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":613,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = NOTE\r\ncdmFieldName = note_date\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'NOTE.note_date' AS violating_field, NOTE.* \r\n\t\tFROM cdm.NOTE\r\n\t\tWHERE cdm.NOTE.note_date IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.NOTE\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: Divide by zero;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":614,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = NOTE\r\ncdmFieldName = note_datetime\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'NOTE.note_datetime' AS violating_field, NOTE.* \r\n\t\tFROM cdm.NOTE\r\n\t\tWHERE cdm.NOTE.note_datetime IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.NOTE\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: Divide by zero;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":615,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = NOTE\r\ncdmFieldName = note_type_concept_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'NOTE.note_type_concept_id' AS violating_field, NOTE.* \r\n\t\tFROM cdm.NOTE\r\n\t\tWHERE cdm.NOTE.note_type_concept_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.NOTE\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: Divide by zero;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":616,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = NOTE\r\ncdmFieldName = note_class_concept_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'NOTE.note_class_concept_id' AS violating_field, NOTE.* \r\n\t\tFROM cdm.NOTE\r\n\t\tWHERE cdm.NOTE.note_class_concept_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.NOTE\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: Divide by zero;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":617,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = NOTE\r\ncdmFieldName = note_title\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'NOTE.note_title' AS violating_field, NOTE.* \r\n\t\tFROM cdm.NOTE\r\n\t\tWHERE cdm.NOTE.note_title IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.NOTE\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: Divide by zero;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":618,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = NOTE\r\ncdmFieldName = note_text\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'NOTE.note_text' AS violating_field, NOTE.* \r\n\t\tFROM cdm.NOTE\r\n\t\tWHERE cdm.NOTE.note_text IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.NOTE\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: Divide by zero;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":619,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = NOTE\r\ncdmFieldName = encoding_concept_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'NOTE.encoding_concept_id' AS violating_field, NOTE.* \r\n\t\tFROM cdm.NOTE\r\n\t\tWHERE cdm.NOTE.encoding_concept_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.NOTE\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: Divide by zero;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":620,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = NOTE\r\ncdmFieldName = language_concept_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'NOTE.language_concept_id' AS violating_field, NOTE.* \r\n\t\tFROM cdm.NOTE\r\n\t\tWHERE cdm.NOTE.language_concept_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.NOTE\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: Divide by zero;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":621,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = NOTE\r\ncdmFieldName = provider_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'NOTE.provider_id' AS violating_field, NOTE.* \r\n\t\tFROM cdm.NOTE\r\n\t\tWHERE cdm.NOTE.provider_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.NOTE\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: Divide by zero;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":622,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = NOTE\r\ncdmFieldName = visit_occurrence_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'NOTE.visit_occurrence_id' AS violating_field, NOTE.* \r\n\t\tFROM cdm.NOTE\r\n\t\tWHERE cdm.NOTE.visit_occurrence_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.NOTE\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: Divide by zero;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":623,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = NOTE\r\ncdmFieldName = visit_detail_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'NOTE.visit_detail_id' AS violating_field, NOTE.* \r\n\t\tFROM cdm.NOTE\r\n\t\tWHERE cdm.NOTE.visit_detail_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.NOTE\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: Divide by zero;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":624,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = NOTE\r\ncdmFieldName = note_source_value\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'NOTE.note_source_value' AS violating_field, NOTE.* \r\n\t\tFROM cdm.NOTE\r\n\t\tWHERE cdm.NOTE.note_source_value IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.NOTE\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: Divide by zero;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":625,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = NOTE_NLP\r\ncdmFieldName = note_nlp_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'NOTE_NLP.note_nlp_id' AS violating_field, NOTE_NLP.* \r\n\t\tFROM cdm.NOTE_NLP\r\n\t\tWHERE cdm.NOTE_NLP.note_nlp_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.NOTE_NLP\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: Divide by zero;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":626,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = NOTE_NLP\r\ncdmFieldName = note_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'NOTE_NLP.note_id' AS violating_field, NOTE_NLP.* \r\n\t\tFROM cdm.NOTE_NLP\r\n\t\tWHERE cdm.NOTE_NLP.note_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.NOTE_NLP\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: Divide by zero;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":627,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = NOTE_NLP\r\ncdmFieldName = section_concept_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'NOTE_NLP.section_concept_id' AS violating_field, NOTE_NLP.* \r\n\t\tFROM cdm.NOTE_NLP\r\n\t\tWHERE cdm.NOTE_NLP.section_concept_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.NOTE_NLP\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: Divide by zero;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":628,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = NOTE_NLP\r\ncdmFieldName = snippet\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'NOTE_NLP.snippet' AS violating_field, NOTE_NLP.* \r\n\t\tFROM cdm.NOTE_NLP\r\n\t\tWHERE cdm.NOTE_NLP.snippet IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.NOTE_NLP\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: Divide by zero;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":629,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = NOTE_NLP\r\ncdmFieldName = offset\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'NOTE_NLP.offset' AS violating_field, NOTE_NLP.* \r\n\t\tFROM cdm.NOTE_NLP\r\n\t\tWHERE cdm.NOTE_NLP.offset IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.NOTE_NLP\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: Divide by zero;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":630,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = NOTE_NLP\r\ncdmFieldName = lexical_variant\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'NOTE_NLP.lexical_variant' AS violating_field, NOTE_NLP.* \r\n\t\tFROM cdm.NOTE_NLP\r\n\t\tWHERE cdm.NOTE_NLP.lexical_variant IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.NOTE_NLP\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: Divide by zero;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":631,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = NOTE_NLP\r\ncdmFieldName = note_nlp_concept_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'NOTE_NLP.note_nlp_concept_id' AS violating_field, NOTE_NLP.* \r\n\t\tFROM cdm.NOTE_NLP\r\n\t\tWHERE cdm.NOTE_NLP.note_nlp_concept_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.NOTE_NLP\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: Divide by zero;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":632,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = NOTE_NLP\r\ncdmFieldName = note_nlp_source_concept_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'NOTE_NLP.note_nlp_source_concept_id' AS violating_field, NOTE_NLP.* \r\n\t\tFROM cdm.NOTE_NLP\r\n\t\tWHERE cdm.NOTE_NLP.note_nlp_source_concept_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.NOTE_NLP\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: Divide by zero;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":633,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = NOTE_NLP\r\ncdmFieldName = nlp_system\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'NOTE_NLP.nlp_system' AS violating_field, NOTE_NLP.* \r\n\t\tFROM cdm.NOTE_NLP\r\n\t\tWHERE cdm.NOTE_NLP.nlp_system IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.NOTE_NLP\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: Divide by zero;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":634,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = NOTE_NLP\r\ncdmFieldName = nlp_date\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'NOTE_NLP.nlp_date' AS violating_field, NOTE_NLP.* \r\n\t\tFROM cdm.NOTE_NLP\r\n\t\tWHERE cdm.NOTE_NLP.nlp_date IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.NOTE_NLP\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: Divide by zero;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":635,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = NOTE_NLP\r\ncdmFieldName = nlp_datetime\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'NOTE_NLP.nlp_datetime' AS violating_field, NOTE_NLP.* \r\n\t\tFROM cdm.NOTE_NLP\r\n\t\tWHERE cdm.NOTE_NLP.nlp_datetime IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.NOTE_NLP\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: Divide by zero;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":636,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = NOTE_NLP\r\ncdmFieldName = term_exists\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'NOTE_NLP.term_exists' AS violating_field, NOTE_NLP.* \r\n\t\tFROM cdm.NOTE_NLP\r\n\t\tWHERE cdm.NOTE_NLP.term_exists IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.NOTE_NLP\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: Divide by zero;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":637,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = NOTE_NLP\r\ncdmFieldName = term_temporal\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'NOTE_NLP.term_temporal' AS violating_field, NOTE_NLP.* \r\n\t\tFROM cdm.NOTE_NLP\r\n\t\tWHERE cdm.NOTE_NLP.term_temporal IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.NOTE_NLP\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: Divide by zero;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":638,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = NOTE_NLP\r\ncdmFieldName = term_modifiers\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'NOTE_NLP.term_modifiers' AS violating_field, NOTE_NLP.* \r\n\t\tFROM cdm.NOTE_NLP\r\n\t\tWHERE cdm.NOTE_NLP.term_modifiers IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.NOTE_NLP\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: Divide by zero;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":639,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = OBSERVATION\r\ncdmFieldName = observation_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'OBSERVATION.observation_id' AS violating_field, OBSERVATION.* \r\n\t\tFROM cdm.OBSERVATION\r\n\t\tWHERE cdm.OBSERVATION.observation_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.OBSERVATION\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":640,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = OBSERVATION\r\ncdmFieldName = person_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'OBSERVATION.person_id' AS violating_field, OBSERVATION.* \r\n\t\tFROM cdm.OBSERVATION\r\n\t\tWHERE cdm.OBSERVATION.person_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.OBSERVATION\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":641,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = OBSERVATION\r\ncdmFieldName = observation_concept_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'OBSERVATION.observation_concept_id' AS violating_field, OBSERVATION.* \r\n\t\tFROM cdm.OBSERVATION\r\n\t\tWHERE cdm.OBSERVATION.observation_concept_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.OBSERVATION\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":642,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = OBSERVATION\r\ncdmFieldName = observation_date\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'OBSERVATION.observation_date' AS violating_field, OBSERVATION.* \r\n\t\tFROM cdm.OBSERVATION\r\n\t\tWHERE cdm.OBSERVATION.observation_date IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.OBSERVATION\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness"},{"NUM_VIOLATED_ROWS":61864,"PCT_VIOLATED_ROWS":1,"CHECK_ID":643,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = OBSERVATION\r\ncdmFieldName = observation_datetime\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'OBSERVATION.observation_datetime' AS violating_field, OBSERVATION.* \r\n\t\tFROM cdm.OBSERVATION\r\n\t\tWHERE cdm.OBSERVATION.observation_datetime IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.OBSERVATION\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":644,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = OBSERVATION\r\ncdmFieldName = observation_type_concept_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'OBSERVATION.observation_type_concept_id' AS violating_field, OBSERVATION.* \r\n\t\tFROM cdm.OBSERVATION\r\n\t\tWHERE cdm.OBSERVATION.observation_type_concept_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.OBSERVATION\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness"},{"NUM_VIOLATED_ROWS":60758,"PCT_VIOLATED_ROWS":0.9821,"CHECK_ID":645,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = OBSERVATION\r\ncdmFieldName = value_as_number\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'OBSERVATION.value_as_number' AS violating_field, OBSERVATION.* \r\n\t\tFROM cdm.OBSERVATION\r\n\t\tWHERE cdm.OBSERVATION.value_as_number IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.OBSERVATION\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness"},{"NUM_VIOLATED_ROWS":34821,"PCT_VIOLATED_ROWS":0.5629,"CHECK_ID":646,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = OBSERVATION\r\ncdmFieldName = value_as_string\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'OBSERVATION.value_as_string' AS violating_field, OBSERVATION.* \r\n\t\tFROM cdm.OBSERVATION\r\n\t\tWHERE cdm.OBSERVATION.value_as_string IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.OBSERVATION\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":647,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = OBSERVATION\r\ncdmFieldName = value_as_concept_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'OBSERVATION.value_as_concept_id' AS violating_field, OBSERVATION.* \r\n\t\tFROM cdm.OBSERVATION\r\n\t\tWHERE cdm.OBSERVATION.value_as_concept_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.OBSERVATION\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":648,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = OBSERVATION\r\ncdmFieldName = qualifier_concept_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'OBSERVATION.qualifier_concept_id' AS violating_field, OBSERVATION.* \r\n\t\tFROM cdm.OBSERVATION\r\n\t\tWHERE cdm.OBSERVATION.qualifier_concept_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.OBSERVATION\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":649,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = OBSERVATION\r\ncdmFieldName = unit_concept_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'OBSERVATION.unit_concept_id' AS violating_field, OBSERVATION.* \r\n\t\tFROM cdm.OBSERVATION\r\n\t\tWHERE cdm.OBSERVATION.unit_concept_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.OBSERVATION\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness"},{"NUM_VIOLATED_ROWS":61864,"PCT_VIOLATED_ROWS":1,"CHECK_ID":650,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = OBSERVATION\r\ncdmFieldName = provider_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'OBSERVATION.provider_id' AS violating_field, OBSERVATION.* \r\n\t\tFROM cdm.OBSERVATION\r\n\t\tWHERE cdm.OBSERVATION.provider_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.OBSERVATION\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness"},{"NUM_VIOLATED_ROWS":35163,"PCT_VIOLATED_ROWS":0.5684,"CHECK_ID":651,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = OBSERVATION\r\ncdmFieldName = visit_occurrence_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'OBSERVATION.visit_occurrence_id' AS violating_field, OBSERVATION.* \r\n\t\tFROM cdm.OBSERVATION\r\n\t\tWHERE cdm.OBSERVATION.visit_occurrence_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.OBSERVATION\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness"},{"NUM_VIOLATED_ROWS":61864,"PCT_VIOLATED_ROWS":1,"CHECK_ID":652,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = OBSERVATION\r\ncdmFieldName = visit_detail_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'OBSERVATION.visit_detail_id' AS violating_field, OBSERVATION.* \r\n\t\tFROM cdm.OBSERVATION\r\n\t\tWHERE cdm.OBSERVATION.visit_detail_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.OBSERVATION\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":653,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = OBSERVATION\r\ncdmFieldName = observation_source_value\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'OBSERVATION.observation_source_value' AS violating_field, OBSERVATION.* \r\n\t\tFROM cdm.OBSERVATION\r\n\t\tWHERE cdm.OBSERVATION.observation_source_value IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.OBSERVATION\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":654,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = OBSERVATION\r\ncdmFieldName = observation_source_concept_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'OBSERVATION.observation_source_concept_id' AS violating_field, OBSERVATION.* \r\n\t\tFROM cdm.OBSERVATION\r\n\t\tWHERE cdm.OBSERVATION.observation_source_concept_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.OBSERVATION\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness"},{"NUM_VIOLATED_ROWS":60757,"PCT_VIOLATED_ROWS":0.9821,"CHECK_ID":655,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = OBSERVATION\r\ncdmFieldName = unit_source_value\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'OBSERVATION.unit_source_value' AS violating_field, OBSERVATION.* \r\n\t\tFROM cdm.OBSERVATION\r\n\t\tWHERE cdm.OBSERVATION.unit_source_value IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.OBSERVATION\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness"},{"NUM_VIOLATED_ROWS":61864,"PCT_VIOLATED_ROWS":1,"CHECK_ID":656,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = OBSERVATION\r\ncdmFieldName = qualifier_source_value\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'OBSERVATION.qualifier_source_value' AS violating_field, OBSERVATION.* \r\n\t\tFROM cdm.OBSERVATION\r\n\t\tWHERE cdm.OBSERVATION.qualifier_source_value IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.OBSERVATION\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness"},{"CHECK_ID":657,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = SPECIMEN\r\ncdmFieldName = specimen_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'SPECIMEN.specimen_id' AS violating_field, SPECIMEN.* \r\n\t\tFROM cdm.SPECIMEN\r\n\t\tWHERE cdm.SPECIMEN.specimen_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.SPECIMEN\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: Divide by zero;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":658,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = SPECIMEN\r\ncdmFieldName = person_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'SPECIMEN.person_id' AS violating_field, SPECIMEN.* \r\n\t\tFROM cdm.SPECIMEN\r\n\t\tWHERE cdm.SPECIMEN.person_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.SPECIMEN\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: Divide by zero;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":659,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = SPECIMEN\r\ncdmFieldName = specimen_concept_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'SPECIMEN.specimen_concept_id' AS violating_field, SPECIMEN.* \r\n\t\tFROM cdm.SPECIMEN\r\n\t\tWHERE cdm.SPECIMEN.specimen_concept_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.SPECIMEN\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: Divide by zero;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":660,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = SPECIMEN\r\ncdmFieldName = specimen_type_concept_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'SPECIMEN.specimen_type_concept_id' AS violating_field, SPECIMEN.* \r\n\t\tFROM cdm.SPECIMEN\r\n\t\tWHERE cdm.SPECIMEN.specimen_type_concept_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.SPECIMEN\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: Divide by zero;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":661,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = SPECIMEN\r\ncdmFieldName = specimen_date\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'SPECIMEN.specimen_date' AS violating_field, SPECIMEN.* \r\n\t\tFROM cdm.SPECIMEN\r\n\t\tWHERE cdm.SPECIMEN.specimen_date IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.SPECIMEN\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: Divide by zero;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":662,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = SPECIMEN\r\ncdmFieldName = specimen_datetime\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'SPECIMEN.specimen_datetime' AS violating_field, SPECIMEN.* \r\n\t\tFROM cdm.SPECIMEN\r\n\t\tWHERE cdm.SPECIMEN.specimen_datetime IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.SPECIMEN\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: Divide by zero;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":663,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = SPECIMEN\r\ncdmFieldName = quantity\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'SPECIMEN.quantity' AS violating_field, SPECIMEN.* \r\n\t\tFROM cdm.SPECIMEN\r\n\t\tWHERE cdm.SPECIMEN.quantity IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.SPECIMEN\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: Divide by zero;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":664,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = SPECIMEN\r\ncdmFieldName = unit_concept_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'SPECIMEN.unit_concept_id' AS violating_field, SPECIMEN.* \r\n\t\tFROM cdm.SPECIMEN\r\n\t\tWHERE cdm.SPECIMEN.unit_concept_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.SPECIMEN\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: Divide by zero;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":665,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = SPECIMEN\r\ncdmFieldName = anatomic_site_concept_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'SPECIMEN.anatomic_site_concept_id' AS violating_field, SPECIMEN.* \r\n\t\tFROM cdm.SPECIMEN\r\n\t\tWHERE cdm.SPECIMEN.anatomic_site_concept_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.SPECIMEN\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: Divide by zero;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":666,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = SPECIMEN\r\ncdmFieldName = disease_status_concept_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'SPECIMEN.disease_status_concept_id' AS violating_field, SPECIMEN.* \r\n\t\tFROM cdm.SPECIMEN\r\n\t\tWHERE cdm.SPECIMEN.disease_status_concept_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.SPECIMEN\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: Divide by zero;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":667,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = SPECIMEN\r\ncdmFieldName = specimen_source_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'SPECIMEN.specimen_source_id' AS violating_field, SPECIMEN.* \r\n\t\tFROM cdm.SPECIMEN\r\n\t\tWHERE cdm.SPECIMEN.specimen_source_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.SPECIMEN\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: Divide by zero;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":668,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = SPECIMEN\r\ncdmFieldName = specimen_source_value\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'SPECIMEN.specimen_source_value' AS violating_field, SPECIMEN.* \r\n\t\tFROM cdm.SPECIMEN\r\n\t\tWHERE cdm.SPECIMEN.specimen_source_value IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.SPECIMEN\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: Divide by zero;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":669,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = SPECIMEN\r\ncdmFieldName = unit_source_value\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'SPECIMEN.unit_source_value' AS violating_field, SPECIMEN.* \r\n\t\tFROM cdm.SPECIMEN\r\n\t\tWHERE cdm.SPECIMEN.unit_source_value IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.SPECIMEN\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: Divide by zero;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":670,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = SPECIMEN\r\ncdmFieldName = anatomic_site_source_value\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'SPECIMEN.anatomic_site_source_value' AS violating_field, SPECIMEN.* \r\n\t\tFROM cdm.SPECIMEN\r\n\t\tWHERE cdm.SPECIMEN.anatomic_site_source_value IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.SPECIMEN\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: Divide by zero;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":671,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = SPECIMEN\r\ncdmFieldName = disease_status_source_value\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'SPECIMEN.disease_status_source_value' AS violating_field, SPECIMEN.* \r\n\t\tFROM cdm.SPECIMEN\r\n\t\tWHERE cdm.SPECIMEN.disease_status_source_value IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.SPECIMEN\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: Divide by zero;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":672,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = FACT_RELATIONSHIP\r\ncdmFieldName = domain_concept_id_1\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'FACT_RELATIONSHIP.domain_concept_id_1' AS violating_field, FACT_RELATIONSHIP.* \r\n\t\tFROM cdm.FACT_RELATIONSHIP\r\n\t\tWHERE cdm.FACT_RELATIONSHIP.domain_concept_id_1 IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.FACT_RELATIONSHIP\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: Divide by zero;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":673,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = FACT_RELATIONSHIP\r\ncdmFieldName = fact_id_1\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'FACT_RELATIONSHIP.fact_id_1' AS violating_field, FACT_RELATIONSHIP.* \r\n\t\tFROM cdm.FACT_RELATIONSHIP\r\n\t\tWHERE cdm.FACT_RELATIONSHIP.fact_id_1 IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.FACT_RELATIONSHIP\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: Divide by zero;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":674,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = FACT_RELATIONSHIP\r\ncdmFieldName = domain_concept_id_2\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'FACT_RELATIONSHIP.domain_concept_id_2' AS violating_field, FACT_RELATIONSHIP.* \r\n\t\tFROM cdm.FACT_RELATIONSHIP\r\n\t\tWHERE cdm.FACT_RELATIONSHIP.domain_concept_id_2 IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.FACT_RELATIONSHIP\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: Divide by zero;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":675,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = FACT_RELATIONSHIP\r\ncdmFieldName = fact_id_2\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'FACT_RELATIONSHIP.fact_id_2' AS violating_field, FACT_RELATIONSHIP.* \r\n\t\tFROM cdm.FACT_RELATIONSHIP\r\n\t\tWHERE cdm.FACT_RELATIONSHIP.fact_id_2 IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.FACT_RELATIONSHIP\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: Divide by zero;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":676,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = FACT_RELATIONSHIP\r\ncdmFieldName = relationship_concept_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'FACT_RELATIONSHIP.relationship_concept_id' AS violating_field, FACT_RELATIONSHIP.* \r\n\t\tFROM cdm.FACT_RELATIONSHIP\r\n\t\tWHERE cdm.FACT_RELATIONSHIP.relationship_concept_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.FACT_RELATIONSHIP\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: Divide by zero;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":677,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = LOCATION\r\ncdmFieldName = location_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'LOCATION.location_id' AS violating_field, LOCATION.* \r\n\t\tFROM cdm.LOCATION\r\n\t\tWHERE cdm.LOCATION.location_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.LOCATION\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness"},{"NUM_VIOLATED_ROWS":46,"PCT_VIOLATED_ROWS":1,"CHECK_ID":678,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = LOCATION\r\ncdmFieldName = address_1\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'LOCATION.address_1' AS violating_field, LOCATION.* \r\n\t\tFROM cdm.LOCATION\r\n\t\tWHERE cdm.LOCATION.address_1 IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.LOCATION\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness"},{"NUM_VIOLATED_ROWS":46,"PCT_VIOLATED_ROWS":1,"CHECK_ID":679,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = LOCATION\r\ncdmFieldName = address_2\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'LOCATION.address_2' AS violating_field, LOCATION.* \r\n\t\tFROM cdm.LOCATION\r\n\t\tWHERE cdm.LOCATION.address_2 IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.LOCATION\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness"},{"NUM_VIOLATED_ROWS":46,"PCT_VIOLATED_ROWS":1,"CHECK_ID":680,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = LOCATION\r\ncdmFieldName = city\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'LOCATION.city' AS violating_field, LOCATION.* \r\n\t\tFROM cdm.LOCATION\r\n\t\tWHERE cdm.LOCATION.city IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.LOCATION\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":681,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = LOCATION\r\ncdmFieldName = state\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'LOCATION.state' AS violating_field, LOCATION.* \r\n\t\tFROM cdm.LOCATION\r\n\t\tWHERE cdm.LOCATION.state IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.LOCATION\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness"},{"NUM_VIOLATED_ROWS":46,"PCT_VIOLATED_ROWS":1,"CHECK_ID":682,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = LOCATION\r\ncdmFieldName = zip\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'LOCATION.zip' AS violating_field, LOCATION.* \r\n\t\tFROM cdm.LOCATION\r\n\t\tWHERE cdm.LOCATION.zip IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.LOCATION\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness"},{"NUM_VIOLATED_ROWS":46,"PCT_VIOLATED_ROWS":1,"CHECK_ID":683,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = LOCATION\r\ncdmFieldName = county\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'LOCATION.county' AS violating_field, LOCATION.* \r\n\t\tFROM cdm.LOCATION\r\n\t\tWHERE cdm.LOCATION.county IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.LOCATION\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":684,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = LOCATION\r\ncdmFieldName = location_source_value\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'LOCATION.location_source_value' AS violating_field, LOCATION.* \r\n\t\tFROM cdm.LOCATION\r\n\t\tWHERE cdm.LOCATION.location_source_value IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.LOCATION\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":685,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = CARE_SITE\r\ncdmFieldName = care_site_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'CARE_SITE.care_site_id' AS violating_field, CARE_SITE.* \r\n\t\tFROM cdm.CARE_SITE\r\n\t\tWHERE cdm.CARE_SITE.care_site_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.CARE_SITE\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness"},{"NUM_VIOLATED_ROWS":172,"PCT_VIOLATED_ROWS":1,"CHECK_ID":686,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = CARE_SITE\r\ncdmFieldName = care_site_name\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'CARE_SITE.care_site_name' AS violating_field, CARE_SITE.* \r\n\t\tFROM cdm.CARE_SITE\r\n\t\tWHERE cdm.CARE_SITE.care_site_name IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.CARE_SITE\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":687,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = CARE_SITE\r\ncdmFieldName = place_of_service_concept_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'CARE_SITE.place_of_service_concept_id' AS violating_field, CARE_SITE.* \r\n\t\tFROM cdm.CARE_SITE\r\n\t\tWHERE cdm.CARE_SITE.place_of_service_concept_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.CARE_SITE\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness"},{"NUM_VIOLATED_ROWS":172,"PCT_VIOLATED_ROWS":1,"CHECK_ID":688,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = CARE_SITE\r\ncdmFieldName = location_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'CARE_SITE.location_id' AS violating_field, CARE_SITE.* \r\n\t\tFROM cdm.CARE_SITE\r\n\t\tWHERE cdm.CARE_SITE.location_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.CARE_SITE\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":689,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = CARE_SITE\r\ncdmFieldName = care_site_source_value\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'CARE_SITE.care_site_source_value' AS violating_field, CARE_SITE.* \r\n\t\tFROM cdm.CARE_SITE\r\n\t\tWHERE cdm.CARE_SITE.care_site_source_value IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.CARE_SITE\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":690,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = CARE_SITE\r\ncdmFieldName = place_of_service_source_value\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'CARE_SITE.place_of_service_source_value' AS violating_field, CARE_SITE.* \r\n\t\tFROM cdm.CARE_SITE\r\n\t\tWHERE cdm.CARE_SITE.place_of_service_source_value IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.CARE_SITE\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":691,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = PROVIDER\r\ncdmFieldName = provider_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'PROVIDER.provider_id' AS violating_field, PROVIDER.* \r\n\t\tFROM cdm.PROVIDER\r\n\t\tWHERE cdm.PROVIDER.provider_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.PROVIDER\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness"},{"NUM_VIOLATED_ROWS":1102,"PCT_VIOLATED_ROWS":1,"CHECK_ID":692,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = PROVIDER\r\ncdmFieldName = provider_name\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'PROVIDER.provider_name' AS violating_field, PROVIDER.* \r\n\t\tFROM cdm.PROVIDER\r\n\t\tWHERE cdm.PROVIDER.provider_name IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.PROVIDER\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness"},{"NUM_VIOLATED_ROWS":1102,"PCT_VIOLATED_ROWS":1,"CHECK_ID":693,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = PROVIDER\r\ncdmFieldName = npi\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'PROVIDER.npi' AS violating_field, PROVIDER.* \r\n\t\tFROM cdm.PROVIDER\r\n\t\tWHERE cdm.PROVIDER.npi IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.PROVIDER\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness"},{"NUM_VIOLATED_ROWS":1102,"PCT_VIOLATED_ROWS":1,"CHECK_ID":694,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = PROVIDER\r\ncdmFieldName = dea\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'PROVIDER.dea' AS violating_field, PROVIDER.* \r\n\t\tFROM cdm.PROVIDER\r\n\t\tWHERE cdm.PROVIDER.dea IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.PROVIDER\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":695,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = PROVIDER\r\ncdmFieldName = specialty_concept_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'PROVIDER.specialty_concept_id' AS violating_field, PROVIDER.* \r\n\t\tFROM cdm.PROVIDER\r\n\t\tWHERE cdm.PROVIDER.specialty_concept_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.PROVIDER\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":696,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = PROVIDER\r\ncdmFieldName = care_site_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'PROVIDER.care_site_id' AS violating_field, PROVIDER.* \r\n\t\tFROM cdm.PROVIDER\r\n\t\tWHERE cdm.PROVIDER.care_site_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.PROVIDER\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness"},{"NUM_VIOLATED_ROWS":1102,"PCT_VIOLATED_ROWS":1,"CHECK_ID":697,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = PROVIDER\r\ncdmFieldName = year_of_birth\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'PROVIDER.year_of_birth' AS violating_field, PROVIDER.* \r\n\t\tFROM cdm.PROVIDER\r\n\t\tWHERE cdm.PROVIDER.year_of_birth IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.PROVIDER\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":698,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = PROVIDER\r\ncdmFieldName = gender_concept_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'PROVIDER.gender_concept_id' AS violating_field, PROVIDER.* \r\n\t\tFROM cdm.PROVIDER\r\n\t\tWHERE cdm.PROVIDER.gender_concept_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.PROVIDER\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":699,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = PROVIDER\r\ncdmFieldName = provider_source_value\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'PROVIDER.provider_source_value' AS violating_field, PROVIDER.* \r\n\t\tFROM cdm.PROVIDER\r\n\t\tWHERE cdm.PROVIDER.provider_source_value IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.PROVIDER\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness"},{"NUM_VIOLATED_ROWS":1102,"PCT_VIOLATED_ROWS":1,"CHECK_ID":700,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = PROVIDER\r\ncdmFieldName = specialty_source_value\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'PROVIDER.specialty_source_value' AS violating_field, PROVIDER.* \r\n\t\tFROM cdm.PROVIDER\r\n\t\tWHERE cdm.PROVIDER.specialty_source_value IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.PROVIDER\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":701,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = PROVIDER\r\ncdmFieldName = specialty_source_concept_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'PROVIDER.specialty_source_concept_id' AS violating_field, PROVIDER.* \r\n\t\tFROM cdm.PROVIDER\r\n\t\tWHERE cdm.PROVIDER.specialty_source_concept_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.PROVIDER\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness"},{"NUM_VIOLATED_ROWS":1102,"PCT_VIOLATED_ROWS":1,"CHECK_ID":702,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = PROVIDER\r\ncdmFieldName = gender_source_value\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'PROVIDER.gender_source_value' AS violating_field, PROVIDER.* \r\n\t\tFROM cdm.PROVIDER\r\n\t\tWHERE cdm.PROVIDER.gender_source_value IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.PROVIDER\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":703,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = PROVIDER\r\ncdmFieldName = gender_source_concept_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'PROVIDER.gender_source_concept_id' AS violating_field, PROVIDER.* \r\n\t\tFROM cdm.PROVIDER\r\n\t\tWHERE cdm.PROVIDER.gender_source_concept_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.PROVIDER\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness"},{"CHECK_ID":704,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = PAYER_PLAN_PERIOD\r\ncdmFieldName = payer_plan_period_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'PAYER_PLAN_PERIOD.payer_plan_period_id' AS violating_field, PAYER_PLAN_PERIOD.* \r\n\t\tFROM cdm.PAYER_PLAN_PERIOD\r\n\t\tWHERE cdm.PAYER_PLAN_PERIOD.payer_plan_period_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.PAYER_PLAN_PERIOD\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: Divide by zero;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":705,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = PAYER_PLAN_PERIOD\r\ncdmFieldName = person_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'PAYER_PLAN_PERIOD.person_id' AS violating_field, PAYER_PLAN_PERIOD.* \r\n\t\tFROM cdm.PAYER_PLAN_PERIOD\r\n\t\tWHERE cdm.PAYER_PLAN_PERIOD.person_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.PAYER_PLAN_PERIOD\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: Divide by zero;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":706,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = PAYER_PLAN_PERIOD\r\ncdmFieldName = contract_person_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'PAYER_PLAN_PERIOD.contract_person_id' AS violating_field, PAYER_PLAN_PERIOD.* \r\n\t\tFROM cdm.PAYER_PLAN_PERIOD\r\n\t\tWHERE cdm.PAYER_PLAN_PERIOD.contract_person_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.PAYER_PLAN_PERIOD\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: column payer_plan_period.contract_person_id does not exist;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":707,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = PAYER_PLAN_PERIOD\r\ncdmFieldName = payer_plan_period_start_date\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'PAYER_PLAN_PERIOD.payer_plan_period_start_date' AS violating_field, PAYER_PLAN_PERIOD.* \r\n\t\tFROM cdm.PAYER_PLAN_PERIOD\r\n\t\tWHERE cdm.PAYER_PLAN_PERIOD.payer_plan_period_start_date IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.PAYER_PLAN_PERIOD\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: Divide by zero;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":708,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = PAYER_PLAN_PERIOD\r\ncdmFieldName = payer_plan_period_end_date\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'PAYER_PLAN_PERIOD.payer_plan_period_end_date' AS violating_field, PAYER_PLAN_PERIOD.* \r\n\t\tFROM cdm.PAYER_PLAN_PERIOD\r\n\t\tWHERE cdm.PAYER_PLAN_PERIOD.payer_plan_period_end_date IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.PAYER_PLAN_PERIOD\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: Divide by zero;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":709,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = PAYER_PLAN_PERIOD\r\ncdmFieldName = payer_concept_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'PAYER_PLAN_PERIOD.payer_concept_id' AS violating_field, PAYER_PLAN_PERIOD.* \r\n\t\tFROM cdm.PAYER_PLAN_PERIOD\r\n\t\tWHERE cdm.PAYER_PLAN_PERIOD.payer_concept_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.PAYER_PLAN_PERIOD\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: Divide by zero;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":710,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = PAYER_PLAN_PERIOD\r\ncdmFieldName = payer_source_value\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'PAYER_PLAN_PERIOD.payer_source_value' AS violating_field, PAYER_PLAN_PERIOD.* \r\n\t\tFROM cdm.PAYER_PLAN_PERIOD\r\n\t\tWHERE cdm.PAYER_PLAN_PERIOD.payer_source_value IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.PAYER_PLAN_PERIOD\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: Divide by zero;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":711,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = PAYER_PLAN_PERIOD\r\ncdmFieldName = payer_source_concept_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'PAYER_PLAN_PERIOD.payer_source_concept_id' AS violating_field, PAYER_PLAN_PERIOD.* \r\n\t\tFROM cdm.PAYER_PLAN_PERIOD\r\n\t\tWHERE cdm.PAYER_PLAN_PERIOD.payer_source_concept_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.PAYER_PLAN_PERIOD\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: Divide by zero;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":712,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = PAYER_PLAN_PERIOD\r\ncdmFieldName = plan_concept_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'PAYER_PLAN_PERIOD.plan_concept_id' AS violating_field, PAYER_PLAN_PERIOD.* \r\n\t\tFROM cdm.PAYER_PLAN_PERIOD\r\n\t\tWHERE cdm.PAYER_PLAN_PERIOD.plan_concept_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.PAYER_PLAN_PERIOD\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: Divide by zero;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":713,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = PAYER_PLAN_PERIOD\r\ncdmFieldName = plan_source_value\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'PAYER_PLAN_PERIOD.plan_source_value' AS violating_field, PAYER_PLAN_PERIOD.* \r\n\t\tFROM cdm.PAYER_PLAN_PERIOD\r\n\t\tWHERE cdm.PAYER_PLAN_PERIOD.plan_source_value IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.PAYER_PLAN_PERIOD\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: Divide by zero;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":714,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = PAYER_PLAN_PERIOD\r\ncdmFieldName = plan_source_concept_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'PAYER_PLAN_PERIOD.plan_source_concept_id' AS violating_field, PAYER_PLAN_PERIOD.* \r\n\t\tFROM cdm.PAYER_PLAN_PERIOD\r\n\t\tWHERE cdm.PAYER_PLAN_PERIOD.plan_source_concept_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.PAYER_PLAN_PERIOD\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: Divide by zero;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":715,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = PAYER_PLAN_PERIOD\r\ncdmFieldName = sponsor_concept_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'PAYER_PLAN_PERIOD.sponsor_concept_id' AS violating_field, PAYER_PLAN_PERIOD.* \r\n\t\tFROM cdm.PAYER_PLAN_PERIOD\r\n\t\tWHERE cdm.PAYER_PLAN_PERIOD.sponsor_concept_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.PAYER_PLAN_PERIOD\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: Divide by zero;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":716,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = PAYER_PLAN_PERIOD\r\ncdmFieldName = sponsor_source_value\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'PAYER_PLAN_PERIOD.sponsor_source_value' AS violating_field, PAYER_PLAN_PERIOD.* \r\n\t\tFROM cdm.PAYER_PLAN_PERIOD\r\n\t\tWHERE cdm.PAYER_PLAN_PERIOD.sponsor_source_value IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.PAYER_PLAN_PERIOD\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: Divide by zero;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":717,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = PAYER_PLAN_PERIOD\r\ncdmFieldName = sponsor_source_concept_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'PAYER_PLAN_PERIOD.sponsor_source_concept_id' AS violating_field, PAYER_PLAN_PERIOD.* \r\n\t\tFROM cdm.PAYER_PLAN_PERIOD\r\n\t\tWHERE cdm.PAYER_PLAN_PERIOD.sponsor_source_concept_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.PAYER_PLAN_PERIOD\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: Divide by zero;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":718,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = PAYER_PLAN_PERIOD\r\ncdmFieldName = family_source_value\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'PAYER_PLAN_PERIOD.family_source_value' AS violating_field, PAYER_PLAN_PERIOD.* \r\n\t\tFROM cdm.PAYER_PLAN_PERIOD\r\n\t\tWHERE cdm.PAYER_PLAN_PERIOD.family_source_value IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.PAYER_PLAN_PERIOD\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: Divide by zero;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":719,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = PAYER_PLAN_PERIOD\r\ncdmFieldName = stop_reason_concept_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'PAYER_PLAN_PERIOD.stop_reason_concept_id' AS violating_field, PAYER_PLAN_PERIOD.* \r\n\t\tFROM cdm.PAYER_PLAN_PERIOD\r\n\t\tWHERE cdm.PAYER_PLAN_PERIOD.stop_reason_concept_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.PAYER_PLAN_PERIOD\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: Divide by zero;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":720,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = PAYER_PLAN_PERIOD\r\ncdmFieldName = stop_reason_source_value\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'PAYER_PLAN_PERIOD.stop_reason_source_value' AS violating_field, PAYER_PLAN_PERIOD.* \r\n\t\tFROM cdm.PAYER_PLAN_PERIOD\r\n\t\tWHERE cdm.PAYER_PLAN_PERIOD.stop_reason_source_value IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.PAYER_PLAN_PERIOD\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: Divide by zero;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":721,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = PAYER_PLAN_PERIOD\r\ncdmFieldName = stop_reason_source_concept_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'PAYER_PLAN_PERIOD.stop_reason_source_concept_id' AS violating_field, PAYER_PLAN_PERIOD.* \r\n\t\tFROM cdm.PAYER_PLAN_PERIOD\r\n\t\tWHERE cdm.PAYER_PLAN_PERIOD.stop_reason_source_concept_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.PAYER_PLAN_PERIOD\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: Divide by zero;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":722,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = COST\r\ncdmFieldName = cost_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'COST.cost_id' AS violating_field, COST.* \r\n\t\tFROM cdm.COST\r\n\t\tWHERE cdm.COST.cost_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.COST\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: Divide by zero;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":723,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = COST\r\ncdmFieldName = cost_event_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'COST.cost_event_id' AS violating_field, COST.* \r\n\t\tFROM cdm.COST\r\n\t\tWHERE cdm.COST.cost_event_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.COST\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: Divide by zero;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":724,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = COST\r\ncdmFieldName = cost_domain_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'COST.cost_domain_id' AS violating_field, COST.* \r\n\t\tFROM cdm.COST\r\n\t\tWHERE cdm.COST.cost_domain_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.COST\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: Divide by zero;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":725,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = COST\r\ncdmFieldName = cost_type_concept_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'COST.cost_type_concept_id' AS violating_field, COST.* \r\n\t\tFROM cdm.COST\r\n\t\tWHERE cdm.COST.cost_type_concept_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.COST\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: Divide by zero;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":726,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = COST\r\ncdmFieldName = currency_concept_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'COST.currency_concept_id' AS violating_field, COST.* \r\n\t\tFROM cdm.COST\r\n\t\tWHERE cdm.COST.currency_concept_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.COST\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: Divide by zero;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":727,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = COST\r\ncdmFieldName = total_charge\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'COST.total_charge' AS violating_field, COST.* \r\n\t\tFROM cdm.COST\r\n\t\tWHERE cdm.COST.total_charge IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.COST\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: Divide by zero;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":728,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = COST\r\ncdmFieldName = total_cost\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'COST.total_cost' AS violating_field, COST.* \r\n\t\tFROM cdm.COST\r\n\t\tWHERE cdm.COST.total_cost IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.COST\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: Divide by zero;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":729,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = COST\r\ncdmFieldName = total_paid\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'COST.total_paid' AS violating_field, COST.* \r\n\t\tFROM cdm.COST\r\n\t\tWHERE cdm.COST.total_paid IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.COST\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: Divide by zero;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":730,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = COST\r\ncdmFieldName = paid_by_payer\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'COST.paid_by_payer' AS violating_field, COST.* \r\n\t\tFROM cdm.COST\r\n\t\tWHERE cdm.COST.paid_by_payer IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.COST\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: Divide by zero;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":731,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = COST\r\ncdmFieldName = paid_by_patient\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'COST.paid_by_patient' AS violating_field, COST.* \r\n\t\tFROM cdm.COST\r\n\t\tWHERE cdm.COST.paid_by_patient IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.COST\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: Divide by zero;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":732,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = COST\r\ncdmFieldName = paid_patient_copay\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'COST.paid_patient_copay' AS violating_field, COST.* \r\n\t\tFROM cdm.COST\r\n\t\tWHERE cdm.COST.paid_patient_copay IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.COST\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: Divide by zero;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":733,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = COST\r\ncdmFieldName = paid_patient_coinsurance\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'COST.paid_patient_coinsurance' AS violating_field, COST.* \r\n\t\tFROM cdm.COST\r\n\t\tWHERE cdm.COST.paid_patient_coinsurance IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.COST\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: Divide by zero;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":734,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = COST\r\ncdmFieldName = paid_patient_deductible\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'COST.paid_patient_deductible' AS violating_field, COST.* \r\n\t\tFROM cdm.COST\r\n\t\tWHERE cdm.COST.paid_patient_deductible IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.COST\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: Divide by zero;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":735,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = COST\r\ncdmFieldName = paid_by_primary\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'COST.paid_by_primary' AS violating_field, COST.* \r\n\t\tFROM cdm.COST\r\n\t\tWHERE cdm.COST.paid_by_primary IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.COST\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: Divide by zero;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":736,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = COST\r\ncdmFieldName = paid_ingredient_cost\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'COST.paid_ingredient_cost' AS violating_field, COST.* \r\n\t\tFROM cdm.COST\r\n\t\tWHERE cdm.COST.paid_ingredient_cost IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.COST\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: Divide by zero;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":737,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = COST\r\ncdmFieldName = paid_dispensing_fee\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'COST.paid_dispensing_fee' AS violating_field, COST.* \r\n\t\tFROM cdm.COST\r\n\t\tWHERE cdm.COST.paid_dispensing_fee IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.COST\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: Divide by zero;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":738,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = COST\r\ncdmFieldName = payer_plan_period_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'COST.payer_plan_period_id' AS violating_field, COST.* \r\n\t\tFROM cdm.COST\r\n\t\tWHERE cdm.COST.payer_plan_period_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.COST\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: Divide by zero;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":739,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = COST\r\ncdmFieldName = amount_allowed\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'COST.amount_allowed' AS violating_field, COST.* \r\n\t\tFROM cdm.COST\r\n\t\tWHERE cdm.COST.amount_allowed IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.COST\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: Divide by zero;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":740,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = COST\r\ncdmFieldName = revenue_code_concept_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'COST.revenue_code_concept_id' AS violating_field, COST.* \r\n\t\tFROM cdm.COST\r\n\t\tWHERE cdm.COST.revenue_code_concept_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.COST\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: Divide by zero;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":741,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = COST\r\ncdmFieldName = revenue_code_source_value\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'COST.revenue_code_source_value' AS violating_field, COST.* \r\n\t\tFROM cdm.COST\r\n\t\tWHERE cdm.COST.revenue_code_source_value IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.COST\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: column cost.revenue_code_source_value does not exist;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":742,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = COST\r\ncdmFieldName = drg_concept_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'COST.drg_concept_id' AS violating_field, COST.* \r\n\t\tFROM cdm.COST\r\n\t\tWHERE cdm.COST.drg_concept_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.COST\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: Divide by zero;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":743,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = COST\r\ncdmFieldName = drg_source_value\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'COST.drg_source_value' AS violating_field, COST.* \r\n\t\tFROM cdm.COST\r\n\t\tWHERE cdm.COST.drg_source_value IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.COST\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: Divide by zero;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":744,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = DRUG_ERA\r\ncdmFieldName = drug_era_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'DRUG_ERA.drug_era_id' AS violating_field, DRUG_ERA.* \r\n\t\tFROM cdm.DRUG_ERA\r\n\t\tWHERE cdm.DRUG_ERA.drug_era_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.DRUG_ERA\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":745,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = DRUG_ERA\r\ncdmFieldName = person_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'DRUG_ERA.person_id' AS violating_field, DRUG_ERA.* \r\n\t\tFROM cdm.DRUG_ERA\r\n\t\tWHERE cdm.DRUG_ERA.person_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.DRUG_ERA\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":746,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = DRUG_ERA\r\ncdmFieldName = drug_concept_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'DRUG_ERA.drug_concept_id' AS violating_field, DRUG_ERA.* \r\n\t\tFROM cdm.DRUG_ERA\r\n\t\tWHERE cdm.DRUG_ERA.drug_concept_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.DRUG_ERA\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":747,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = DRUG_ERA\r\ncdmFieldName = drug_era_start_date\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'DRUG_ERA.drug_era_start_date' AS violating_field, DRUG_ERA.* \r\n\t\tFROM cdm.DRUG_ERA\r\n\t\tWHERE cdm.DRUG_ERA.drug_era_start_date IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.DRUG_ERA\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":748,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = DRUG_ERA\r\ncdmFieldName = drug_era_end_date\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'DRUG_ERA.drug_era_end_date' AS violating_field, DRUG_ERA.* \r\n\t\tFROM cdm.DRUG_ERA\r\n\t\tWHERE cdm.DRUG_ERA.drug_era_end_date IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.DRUG_ERA\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":749,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = DRUG_ERA\r\ncdmFieldName = drug_exposure_count\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'DRUG_ERA.drug_exposure_count' AS violating_field, DRUG_ERA.* \r\n\t\tFROM cdm.DRUG_ERA\r\n\t\tWHERE cdm.DRUG_ERA.drug_exposure_count IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.DRUG_ERA\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":750,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = DRUG_ERA\r\ncdmFieldName = gap_days\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'DRUG_ERA.gap_days' AS violating_field, DRUG_ERA.* \r\n\t\tFROM cdm.DRUG_ERA\r\n\t\tWHERE cdm.DRUG_ERA.gap_days IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.DRUG_ERA\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness"},{"CHECK_ID":751,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = DOSE_ERA\r\ncdmFieldName = dose_era_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'DOSE_ERA.dose_era_id' AS violating_field, DOSE_ERA.* \r\n\t\tFROM cdm.DOSE_ERA\r\n\t\tWHERE cdm.DOSE_ERA.dose_era_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.DOSE_ERA\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: Divide by zero;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":752,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = DOSE_ERA\r\ncdmFieldName = person_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'DOSE_ERA.person_id' AS violating_field, DOSE_ERA.* \r\n\t\tFROM cdm.DOSE_ERA\r\n\t\tWHERE cdm.DOSE_ERA.person_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.DOSE_ERA\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: Divide by zero;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":753,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = DOSE_ERA\r\ncdmFieldName = drug_concept_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'DOSE_ERA.drug_concept_id' AS violating_field, DOSE_ERA.* \r\n\t\tFROM cdm.DOSE_ERA\r\n\t\tWHERE cdm.DOSE_ERA.drug_concept_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.DOSE_ERA\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: Divide by zero;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":754,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = DOSE_ERA\r\ncdmFieldName = unit_concept_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'DOSE_ERA.unit_concept_id' AS violating_field, DOSE_ERA.* \r\n\t\tFROM cdm.DOSE_ERA\r\n\t\tWHERE cdm.DOSE_ERA.unit_concept_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.DOSE_ERA\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: Divide by zero;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":755,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = DOSE_ERA\r\ncdmFieldName = dose_value\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'DOSE_ERA.dose_value' AS violating_field, DOSE_ERA.* \r\n\t\tFROM cdm.DOSE_ERA\r\n\t\tWHERE cdm.DOSE_ERA.dose_value IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.DOSE_ERA\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: Divide by zero;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":756,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = DOSE_ERA\r\ncdmFieldName = dose_era_start_date\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'DOSE_ERA.dose_era_start_date' AS violating_field, DOSE_ERA.* \r\n\t\tFROM cdm.DOSE_ERA\r\n\t\tWHERE cdm.DOSE_ERA.dose_era_start_date IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.DOSE_ERA\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: Divide by zero;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":757,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = DOSE_ERA\r\ncdmFieldName = dose_era_end_date\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'DOSE_ERA.dose_era_end_date' AS violating_field, DOSE_ERA.* \r\n\t\tFROM cdm.DOSE_ERA\r\n\t\tWHERE cdm.DOSE_ERA.dose_era_end_date IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.DOSE_ERA\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: Divide by zero;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":758,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = CONDITION_ERA\r\ncdmFieldName = condition_era_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'CONDITION_ERA.condition_era_id' AS violating_field, CONDITION_ERA.* \r\n\t\tFROM cdm.CONDITION_ERA\r\n\t\tWHERE cdm.CONDITION_ERA.condition_era_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.CONDITION_ERA\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":759,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = CONDITION_ERA\r\ncdmFieldName = person_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'CONDITION_ERA.person_id' AS violating_field, CONDITION_ERA.* \r\n\t\tFROM cdm.CONDITION_ERA\r\n\t\tWHERE cdm.CONDITION_ERA.person_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.CONDITION_ERA\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":760,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = CONDITION_ERA\r\ncdmFieldName = condition_concept_id\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'CONDITION_ERA.condition_concept_id' AS violating_field, CONDITION_ERA.* \r\n\t\tFROM cdm.CONDITION_ERA\r\n\t\tWHERE cdm.CONDITION_ERA.condition_concept_id IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.CONDITION_ERA\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":761,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = CONDITION_ERA\r\ncdmFieldName = condition_era_start_date\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'CONDITION_ERA.condition_era_start_date' AS violating_field, CONDITION_ERA.* \r\n\t\tFROM cdm.CONDITION_ERA\r\n\t\tWHERE cdm.CONDITION_ERA.condition_era_start_date IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.CONDITION_ERA\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":762,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = CONDITION_ERA\r\ncdmFieldName = condition_era_end_date\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'CONDITION_ERA.condition_era_end_date' AS violating_field, CONDITION_ERA.* \r\n\t\tFROM cdm.CONDITION_ERA\r\n\t\tWHERE cdm.CONDITION_ERA.condition_era_end_date IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.CONDITION_ERA\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":763,"QUERY_TEXT":"\r\n/*********\r\nMEASURE_VALUE_COMPLETENESS\r\nComputing number of null values and the proportion to total records per field\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = CONDITION_ERA\r\ncdmFieldName = condition_occurrence_count\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'CONDITION_ERA.condition_occurrence_count' AS violating_field, CONDITION_ERA.* \r\n\t\tFROM cdm.CONDITION_ERA\r\n\t\tWHERE cdm.CONDITION_ERA.condition_occurrence_count IS NULL\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.CONDITION_ERA\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":764,"QUERY_TEXT":"/*********\r\nCONCEPT_RECORD_COMPLETENESS\r\nnumber of 0s / total number of records\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = PERSON\r\ncdmFieldName = gender_concept_id\r\n**********/\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'PERSON.gender_concept_id' AS violating_field, PERSON.* \r\n\t\tFROM cdm.PERSON\r\n\t\tWHERE cdm.PERSON.gender_concept_id = 0\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.PERSON\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness"},{"NUM_VIOLATED_ROWS":3595,"PCT_VIOLATED_ROWS":0.3756,"CHECK_ID":765,"QUERY_TEXT":"/*********\r\nCONCEPT_RECORD_COMPLETENESS\r\nnumber of 0s / total number of records\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = PERSON\r\ncdmFieldName = race_concept_id\r\n**********/\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'PERSON.race_concept_id' AS violating_field, PERSON.* \r\n\t\tFROM cdm.PERSON\r\n\t\tWHERE cdm.PERSON.race_concept_id = 0\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.PERSON\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness"},{"NUM_VIOLATED_ROWS":8849,"PCT_VIOLATED_ROWS":0.9245,"CHECK_ID":766,"QUERY_TEXT":"/*********\r\nCONCEPT_RECORD_COMPLETENESS\r\nnumber of 0s / total number of records\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = PERSON\r\ncdmFieldName = ethnicity_concept_id\r\n**********/\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'PERSON.ethnicity_concept_id' AS violating_field, PERSON.* \r\n\t\tFROM cdm.PERSON\r\n\t\tWHERE cdm.PERSON.ethnicity_concept_id = 0\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.PERSON\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness"},{"NUM_VIOLATED_ROWS":9572,"PCT_VIOLATED_ROWS":1,"CHECK_ID":767,"QUERY_TEXT":"/*********\r\nCONCEPT_RECORD_COMPLETENESS\r\nnumber of 0s / total number of records\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = OBSERVATION_PERIOD\r\ncdmFieldName = period_type_concept_id\r\n**********/\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'OBSERVATION_PERIOD.period_type_concept_id' AS violating_field, OBSERVATION_PERIOD.* \r\n\t\tFROM cdm.OBSERVATION_PERIOD\r\n\t\tWHERE cdm.OBSERVATION_PERIOD.period_type_concept_id = 0\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.OBSERVATION_PERIOD\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":768,"QUERY_TEXT":"/*********\r\nCONCEPT_RECORD_COMPLETENESS\r\nnumber of 0s / total number of records\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = VISIT_OCCURRENCE\r\ncdmFieldName = visit_concept_id\r\n**********/\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'VISIT_OCCURRENCE.visit_concept_id' AS violating_field, VISIT_OCCURRENCE.* \r\n\t\tFROM cdm.VISIT_OCCURRENCE\r\n\t\tWHERE cdm.VISIT_OCCURRENCE.visit_concept_id = 0\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.VISIT_OCCURRENCE\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":769,"QUERY_TEXT":"/*********\r\nCONCEPT_RECORD_COMPLETENESS\r\nnumber of 0s / total number of records\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = CONDITION_OCCURRENCE\r\ncdmFieldName = condition_concept_id\r\n**********/\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'CONDITION_OCCURRENCE.condition_concept_id' AS violating_field, CONDITION_OCCURRENCE.* \r\n\t\tFROM cdm.CONDITION_OCCURRENCE\r\n\t\tWHERE cdm.CONDITION_OCCURRENCE.condition_concept_id = 0\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.CONDITION_OCCURRENCE\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":770,"QUERY_TEXT":"/*********\r\nCONCEPT_RECORD_COMPLETENESS\r\nnumber of 0s / total number of records\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = CONDITION_OCCURRENCE\r\ncdmFieldName = condition_type_concept_id\r\n**********/\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'CONDITION_OCCURRENCE.condition_type_concept_id' AS violating_field, CONDITION_OCCURRENCE.* \r\n\t\tFROM cdm.CONDITION_OCCURRENCE\r\n\t\tWHERE cdm.CONDITION_OCCURRENCE.condition_type_concept_id = 0\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.CONDITION_OCCURRENCE\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness"},{"NUM_VIOLATED_ROWS":245805,"PCT_VIOLATED_ROWS":1,"CHECK_ID":771,"QUERY_TEXT":"/*********\r\nCONCEPT_RECORD_COMPLETENESS\r\nnumber of 0s / total number of records\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = CONDITION_OCCURRENCE\r\ncdmFieldName = condition_status_concept_id\r\n**********/\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'CONDITION_OCCURRENCE.condition_status_concept_id' AS violating_field, CONDITION_OCCURRENCE.* \r\n\t\tFROM cdm.CONDITION_OCCURRENCE\r\n\t\tWHERE cdm.CONDITION_OCCURRENCE.condition_status_concept_id = 0\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.CONDITION_OCCURRENCE\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":772,"QUERY_TEXT":"/*********\r\nCONCEPT_RECORD_COMPLETENESS\r\nnumber of 0s / total number of records\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = DRUG_EXPOSURE\r\ncdmFieldName = drug_concept_id\r\n**********/\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'DRUG_EXPOSURE.drug_concept_id' AS violating_field, DRUG_EXPOSURE.* \r\n\t\tFROM cdm.DRUG_EXPOSURE\r\n\t\tWHERE cdm.DRUG_EXPOSURE.drug_concept_id = 0\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.DRUG_EXPOSURE\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":773,"QUERY_TEXT":"/*********\r\nCONCEPT_RECORD_COMPLETENESS\r\nnumber of 0s / total number of records\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = DRUG_EXPOSURE\r\ncdmFieldName = drug_type_concept_id\r\n**********/\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'DRUG_EXPOSURE.drug_type_concept_id' AS violating_field, DRUG_EXPOSURE.* \r\n\t\tFROM cdm.DRUG_EXPOSURE\r\n\t\tWHERE cdm.DRUG_EXPOSURE.drug_type_concept_id = 0\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.DRUG_EXPOSURE\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":774,"QUERY_TEXT":"/*********\r\nCONCEPT_RECORD_COMPLETENESS\r\nnumber of 0s / total number of records\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = PROCEDURE_OCCURRENCE\r\ncdmFieldName = procedure_concept_id\r\n**********/\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'PROCEDURE_OCCURRENCE.procedure_concept_id' AS violating_field, PROCEDURE_OCCURRENCE.* \r\n\t\tFROM cdm.PROCEDURE_OCCURRENCE\r\n\t\tWHERE cdm.PROCEDURE_OCCURRENCE.procedure_concept_id = 0\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.PROCEDURE_OCCURRENCE\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":775,"QUERY_TEXT":"/*********\r\nCONCEPT_RECORD_COMPLETENESS\r\nnumber of 0s / total number of records\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = PROCEDURE_OCCURRENCE\r\ncdmFieldName = procedure_type_concept_id\r\n**********/\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'PROCEDURE_OCCURRENCE.procedure_type_concept_id' AS violating_field, PROCEDURE_OCCURRENCE.* \r\n\t\tFROM cdm.PROCEDURE_OCCURRENCE\r\n\t\tWHERE cdm.PROCEDURE_OCCURRENCE.procedure_type_concept_id = 0\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.PROCEDURE_OCCURRENCE\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness"},{"CHECK_ID":776,"QUERY_TEXT":"/*********\r\nCONCEPT_RECORD_COMPLETENESS\r\nnumber of 0s / total number of records\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = DEVICE_EXPOSURE\r\ncdmFieldName = device_concept_id\r\n**********/\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'DEVICE_EXPOSURE.device_concept_id' AS violating_field, DEVICE_EXPOSURE.* \r\n\t\tFROM cdm.DEVICE_EXPOSURE\r\n\t\tWHERE cdm.DEVICE_EXPOSURE.device_concept_id = 0\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.DEVICE_EXPOSURE\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: Divide by zero;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":777,"QUERY_TEXT":"/*********\r\nCONCEPT_RECORD_COMPLETENESS\r\nnumber of 0s / total number of records\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = DEVICE_EXPOSURE\r\ncdmFieldName = device_type_concept_id\r\n**********/\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'DEVICE_EXPOSURE.device_type_concept_id' AS violating_field, DEVICE_EXPOSURE.* \r\n\t\tFROM cdm.DEVICE_EXPOSURE\r\n\t\tWHERE cdm.DEVICE_EXPOSURE.device_type_concept_id = 0\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.DEVICE_EXPOSURE\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: Divide by zero;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":778,"QUERY_TEXT":"/*********\r\nCONCEPT_RECORD_COMPLETENESS\r\nnumber of 0s / total number of records\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = MEASUREMENT\r\ncdmFieldName = measurement_concept_id\r\n**********/\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'MEASUREMENT.measurement_concept_id' AS violating_field, MEASUREMENT.* \r\n\t\tFROM cdm.MEASUREMENT\r\n\t\tWHERE cdm.MEASUREMENT.measurement_concept_id = 0\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.MEASUREMENT\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":779,"QUERY_TEXT":"/*********\r\nCONCEPT_RECORD_COMPLETENESS\r\nnumber of 0s / total number of records\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = MEASUREMENT\r\ncdmFieldName = measurement_type_concept_id\r\n**********/\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'MEASUREMENT.measurement_type_concept_id' AS violating_field, MEASUREMENT.* \r\n\t\tFROM cdm.MEASUREMENT\r\n\t\tWHERE cdm.MEASUREMENT.measurement_type_concept_id = 0\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.MEASUREMENT\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness"},{"CHECK_ID":780,"QUERY_TEXT":"/*********\r\nCONCEPT_RECORD_COMPLETENESS\r\nnumber of 0s / total number of records\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = VISIT_DETAIL\r\ncdmFieldName = visit_detail_concept_id\r\n**********/\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'VISIT_DETAIL.visit_detail_concept_id' AS violating_field, VISIT_DETAIL.* \r\n\t\tFROM cdm.VISIT_DETAIL\r\n\t\tWHERE cdm.VISIT_DETAIL.visit_detail_concept_id = 0\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.VISIT_DETAIL\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: Divide by zero;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":781,"QUERY_TEXT":"/*********\r\nCONCEPT_RECORD_COMPLETENESS\r\nnumber of 0s / total number of records\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = VISIT_DETAIL\r\ncdmFieldName = visit_detail_type_concept_id\r\n**********/\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'VISIT_DETAIL.visit_detail_type_concept_id' AS violating_field, VISIT_DETAIL.* \r\n\t\tFROM cdm.VISIT_DETAIL\r\n\t\tWHERE cdm.VISIT_DETAIL.visit_detail_type_concept_id = 0\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.VISIT_DETAIL\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: Divide by zero;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"NUM_VIOLATED_ROWS":29786,"PCT_VIOLATED_ROWS":0.4815,"CHECK_ID":782,"QUERY_TEXT":"/*********\r\nCONCEPT_RECORD_COMPLETENESS\r\nnumber of 0s / total number of records\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = OBSERVATION\r\ncdmFieldName = observation_concept_id\r\n**********/\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'OBSERVATION.observation_concept_id' AS violating_field, OBSERVATION.* \r\n\t\tFROM cdm.OBSERVATION\r\n\t\tWHERE cdm.OBSERVATION.observation_concept_id = 0\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.OBSERVATION\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":783,"QUERY_TEXT":"/*********\r\nCONCEPT_RECORD_COMPLETENESS\r\nnumber of 0s / total number of records\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = OBSERVATION\r\ncdmFieldName = observation_type_concept_id\r\n**********/\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'OBSERVATION.observation_type_concept_id' AS violating_field, OBSERVATION.* \r\n\t\tFROM cdm.OBSERVATION\r\n\t\tWHERE cdm.OBSERVATION.observation_type_concept_id = 0\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.OBSERVATION\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness"},{"CHECK_ID":784,"QUERY_TEXT":"/*********\r\nCONCEPT_RECORD_COMPLETENESS\r\nnumber of 0s / total number of records\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = SPECIMEN\r\ncdmFieldName = specimen_concept_id\r\n**********/\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'SPECIMEN.specimen_concept_id' AS violating_field, SPECIMEN.* \r\n\t\tFROM cdm.SPECIMEN\r\n\t\tWHERE cdm.SPECIMEN.specimen_concept_id = 0\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.SPECIMEN\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: Divide by zero;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":785,"QUERY_TEXT":"/*********\r\nCONCEPT_RECORD_COMPLETENESS\r\nnumber of 0s / total number of records\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = SPECIMEN\r\ncdmFieldName = specimen_type_concept_id\r\n**********/\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'SPECIMEN.specimen_type_concept_id' AS violating_field, SPECIMEN.* \r\n\t\tFROM cdm.SPECIMEN\r\n\t\tWHERE cdm.SPECIMEN.specimen_type_concept_id = 0\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.SPECIMEN\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: Divide by zero;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":786,"QUERY_TEXT":"/*********\r\nCONCEPT_RECORD_COMPLETENESS\r\nnumber of 0s / total number of records\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = COST\r\ncdmFieldName = cost_type_concept_id\r\n**********/\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'COST.cost_type_concept_id' AS violating_field, COST.* \r\n\t\tFROM cdm.COST\r\n\t\tWHERE cdm.COST.cost_type_concept_id = 0\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.COST\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: Divide by zero;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":787,"QUERY_TEXT":"/*********\r\nCONCEPT_RECORD_COMPLETENESS\r\nnumber of 0s / total number of records\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = DRUG_ERA\r\ncdmFieldName = drug_concept_id\r\n**********/\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'DRUG_ERA.drug_concept_id' AS violating_field, DRUG_ERA.* \r\n\t\tFROM cdm.DRUG_ERA\r\n\t\tWHERE cdm.DRUG_ERA.drug_concept_id = 0\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.DRUG_ERA\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness"},{"CHECK_ID":788,"QUERY_TEXT":"/*********\r\nCONCEPT_RECORD_COMPLETENESS\r\nnumber of 0s / total number of records\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = DOSE_ERA\r\ncdmFieldName = drug_concept_id\r\n**********/\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'DOSE_ERA.drug_concept_id' AS violating_field, DOSE_ERA.* \r\n\t\tFROM cdm.DOSE_ERA\r\n\t\tWHERE cdm.DOSE_ERA.drug_concept_id = 0\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.DOSE_ERA\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: Divide by zero;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":789,"QUERY_TEXT":"/*********\r\nCONCEPT_RECORD_COMPLETENESS\r\nnumber of 0s / total number of records\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = CONDITION_ERA\r\ncdmFieldName = condition_concept_id\r\n**********/\r\n\r\nSELECT num_violated_rows, 1.0*num_violated_rows/denominator.num_rows AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'CONDITION_ERA.condition_concept_id' AS violating_field, CONDITION_ERA.* \r\n\t\tFROM cdm.CONDITION_ERA\r\n\t\tWHERE cdm.CONDITION_ERA.condition_concept_id = 0\r\n\t) violated_rows\r\n) violated_row_count,\r\n( \r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.CONDITION_ERA\r\n) denominator\r\n;\r\n","CATEGORY":"Completeness"},{"CHECK_ID":790,"QUERY_TEXT":"\r\n/*********\r\nPLAUSIBLE_VALUE_LOW\r\nget number of records and the proportion to total number of eligible records that fall below this threshold\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = PERSON\r\ncdmFieldName = year_of_birth\r\nthresholdValueLow = @thresholdValueLow\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'PERSON.year_of_birth' AS violating_field, PERSON.*\r\n\t\tfrom cdm.PERSON\r\n    where year_of_birth < @thresholdValueLow\r\n\t) violated_rows\r\n) violated_row_count,\r\n(\r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.PERSON\r\n\twhere year_of_birth is not null\r\n) denominator\r\n;\r\n","CATEGORY":"Plausibility","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: column \"thresholdvaluelow\" does not exist in person;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":791,"QUERY_TEXT":"\r\n/*********\r\nPLAUSIBLE_VALUE_LOW\r\nget number of records and the proportion to total number of eligible records that fall below this threshold\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = PERSON\r\ncdmFieldName = month_of_birth\r\nthresholdValueLow = @thresholdValueLow\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'PERSON.month_of_birth' AS violating_field, PERSON.*\r\n\t\tfrom cdm.PERSON\r\n    where month_of_birth < @thresholdValueLow\r\n\t) violated_rows\r\n) violated_row_count,\r\n(\r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.PERSON\r\n\twhere month_of_birth is not null\r\n) denominator\r\n;\r\n","CATEGORY":"Plausibility","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: column \"thresholdvaluelow\" does not exist in person;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":792,"QUERY_TEXT":"\r\n/*********\r\nPLAUSIBLE_VALUE_LOW\r\nget number of records and the proportion to total number of eligible records that fall below this threshold\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = PERSON\r\ncdmFieldName = day_of_birth\r\nthresholdValueLow = @thresholdValueLow\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'PERSON.day_of_birth' AS violating_field, PERSON.*\r\n\t\tfrom cdm.PERSON\r\n    where day_of_birth < @thresholdValueLow\r\n\t) violated_rows\r\n) violated_row_count,\r\n(\r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.PERSON\r\n\twhere day_of_birth is not null\r\n) denominator\r\n;\r\n","CATEGORY":"Plausibility","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: column \"thresholdvaluelow\" does not exist in person;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":793,"QUERY_TEXT":"\r\n/*********\r\nPLAUSIBLE_VALUE_LOW\r\nget number of records and the proportion to total number of eligible records that fall below this threshold\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = PERSON\r\ncdmFieldName = birth_datetime\r\nthresholdValueLow = @thresholdValueLow\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'PERSON.birth_datetime' AS violating_field, PERSON.*\r\n\t\tfrom cdm.PERSON\r\n    where birth_datetime < @thresholdValueLow\r\n\t) violated_rows\r\n) violated_row_count,\r\n(\r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.PERSON\r\n\twhere birth_datetime is not null\r\n) denominator\r\n;\r\n","CATEGORY":"Plausibility","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: column \"thresholdvaluelow\" does not exist in person;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":794,"QUERY_TEXT":"\r\n/*********\r\nPLAUSIBLE_VALUE_LOW\r\nget number of records and the proportion to total number of eligible records that fall below this threshold\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = OBSERVATION_PERIOD\r\ncdmFieldName = observation_period_start_date\r\nthresholdValueLow = @thresholdValueLow\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'OBSERVATION_PERIOD.observation_period_start_date' AS violating_field, OBSERVATION_PERIOD.*\r\n\t\tfrom cdm.OBSERVATION_PERIOD\r\n    where observation_period_start_date < @thresholdValueLow\r\n\t) violated_rows\r\n) violated_row_count,\r\n(\r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.OBSERVATION_PERIOD\r\n\twhere observation_period_start_date is not null\r\n) denominator\r\n;\r\n","CATEGORY":"Plausibility","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: column \"thresholdvaluelow\" does not exist in observation_period;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":795,"QUERY_TEXT":"\r\n/*********\r\nPLAUSIBLE_VALUE_LOW\r\nget number of records and the proportion to total number of eligible records that fall below this threshold\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = OBSERVATION_PERIOD\r\ncdmFieldName = observation_period_end_date\r\nthresholdValueLow = @thresholdValueLow\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'OBSERVATION_PERIOD.observation_period_end_date' AS violating_field, OBSERVATION_PERIOD.*\r\n\t\tfrom cdm.OBSERVATION_PERIOD\r\n    where observation_period_end_date < @thresholdValueLow\r\n\t) violated_rows\r\n) violated_row_count,\r\n(\r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.OBSERVATION_PERIOD\r\n\twhere observation_period_end_date is not null\r\n) denominator\r\n;\r\n","CATEGORY":"Plausibility","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: column \"thresholdvaluelow\" does not exist in observation_period;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":796,"QUERY_TEXT":"\r\n/*********\r\nPLAUSIBLE_VALUE_LOW\r\nget number of records and the proportion to total number of eligible records that fall below this threshold\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = VISIT_OCCURRENCE\r\ncdmFieldName = visit_start_date\r\nthresholdValueLow = @thresholdValueLow\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'VISIT_OCCURRENCE.visit_start_date' AS violating_field, VISIT_OCCURRENCE.*\r\n\t\tfrom cdm.VISIT_OCCURRENCE\r\n    where visit_start_date < @thresholdValueLow\r\n\t) violated_rows\r\n) violated_row_count,\r\n(\r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.VISIT_OCCURRENCE\r\n\twhere visit_start_date is not null\r\n) denominator\r\n;\r\n","CATEGORY":"Plausibility","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: column \"thresholdvaluelow\" does not exist in visit_occurrence;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":797,"QUERY_TEXT":"\r\n/*********\r\nPLAUSIBLE_VALUE_LOW\r\nget number of records and the proportion to total number of eligible records that fall below this threshold\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = VISIT_OCCURRENCE\r\ncdmFieldName = visit_start_datetime\r\nthresholdValueLow = @thresholdValueLow\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'VISIT_OCCURRENCE.visit_start_datetime' AS violating_field, VISIT_OCCURRENCE.*\r\n\t\tfrom cdm.VISIT_OCCURRENCE\r\n    where visit_start_datetime < @thresholdValueLow\r\n\t) violated_rows\r\n) violated_row_count,\r\n(\r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.VISIT_OCCURRENCE\r\n\twhere visit_start_datetime is not null\r\n) denominator\r\n;\r\n","CATEGORY":"Plausibility","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: column \"thresholdvaluelow\" does not exist in visit_occurrence;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":798,"QUERY_TEXT":"\r\n/*********\r\nPLAUSIBLE_VALUE_LOW\r\nget number of records and the proportion to total number of eligible records that fall below this threshold\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = VISIT_OCCURRENCE\r\ncdmFieldName = visit_end_date\r\nthresholdValueLow = @thresholdValueLow\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'VISIT_OCCURRENCE.visit_end_date' AS violating_field, VISIT_OCCURRENCE.*\r\n\t\tfrom cdm.VISIT_OCCURRENCE\r\n    where visit_end_date < @thresholdValueLow\r\n\t) violated_rows\r\n) violated_row_count,\r\n(\r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.VISIT_OCCURRENCE\r\n\twhere visit_end_date is not null\r\n) denominator\r\n;\r\n","CATEGORY":"Plausibility","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: column \"thresholdvaluelow\" does not exist in visit_occurrence;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":799,"QUERY_TEXT":"\r\n/*********\r\nPLAUSIBLE_VALUE_LOW\r\nget number of records and the proportion to total number of eligible records that fall below this threshold\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = VISIT_OCCURRENCE\r\ncdmFieldName = visit_end_datetime\r\nthresholdValueLow = @thresholdValueLow\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'VISIT_OCCURRENCE.visit_end_datetime' AS violating_field, VISIT_OCCURRENCE.*\r\n\t\tfrom cdm.VISIT_OCCURRENCE\r\n    where visit_end_datetime < @thresholdValueLow\r\n\t) violated_rows\r\n) violated_row_count,\r\n(\r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.VISIT_OCCURRENCE\r\n\twhere visit_end_datetime is not null\r\n) denominator\r\n;\r\n","CATEGORY":"Plausibility","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: column \"thresholdvaluelow\" does not exist in visit_occurrence;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":800,"QUERY_TEXT":"\r\n/*********\r\nPLAUSIBLE_VALUE_LOW\r\nget number of records and the proportion to total number of eligible records that fall below this threshold\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = CONDITION_OCCURRENCE\r\ncdmFieldName = condition_start_date\r\nthresholdValueLow = @thresholdValueLow\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'CONDITION_OCCURRENCE.condition_start_date' AS violating_field, CONDITION_OCCURRENCE.*\r\n\t\tfrom cdm.CONDITION_OCCURRENCE\r\n    where condition_start_date < @thresholdValueLow\r\n\t) violated_rows\r\n) violated_row_count,\r\n(\r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.CONDITION_OCCURRENCE\r\n\twhere condition_start_date is not null\r\n) denominator\r\n;\r\n","CATEGORY":"Plausibility","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: column \"thresholdvaluelow\" does not exist in condition_occurrence;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":801,"QUERY_TEXT":"\r\n/*********\r\nPLAUSIBLE_VALUE_LOW\r\nget number of records and the proportion to total number of eligible records that fall below this threshold\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = CONDITION_OCCURRENCE\r\ncdmFieldName = condition_start_datetime\r\nthresholdValueLow = @thresholdValueLow\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'CONDITION_OCCURRENCE.condition_start_datetime' AS violating_field, CONDITION_OCCURRENCE.*\r\n\t\tfrom cdm.CONDITION_OCCURRENCE\r\n    where condition_start_datetime < @thresholdValueLow\r\n\t) violated_rows\r\n) violated_row_count,\r\n(\r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.CONDITION_OCCURRENCE\r\n\twhere condition_start_datetime is not null\r\n) denominator\r\n;\r\n","CATEGORY":"Plausibility","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: column \"thresholdvaluelow\" does not exist in condition_occurrence;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":802,"QUERY_TEXT":"\r\n/*********\r\nPLAUSIBLE_VALUE_LOW\r\nget number of records and the proportion to total number of eligible records that fall below this threshold\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = CONDITION_OCCURRENCE\r\ncdmFieldName = condition_end_date\r\nthresholdValueLow = @thresholdValueLow\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'CONDITION_OCCURRENCE.condition_end_date' AS violating_field, CONDITION_OCCURRENCE.*\r\n\t\tfrom cdm.CONDITION_OCCURRENCE\r\n    where condition_end_date < @thresholdValueLow\r\n\t) violated_rows\r\n) violated_row_count,\r\n(\r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.CONDITION_OCCURRENCE\r\n\twhere condition_end_date is not null\r\n) denominator\r\n;\r\n","CATEGORY":"Plausibility","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: column \"thresholdvaluelow\" does not exist in condition_occurrence;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":803,"QUERY_TEXT":"\r\n/*********\r\nPLAUSIBLE_VALUE_LOW\r\nget number of records and the proportion to total number of eligible records that fall below this threshold\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = CONDITION_OCCURRENCE\r\ncdmFieldName = condition_end_datetime\r\nthresholdValueLow = @thresholdValueLow\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'CONDITION_OCCURRENCE.condition_end_datetime' AS violating_field, CONDITION_OCCURRENCE.*\r\n\t\tfrom cdm.CONDITION_OCCURRENCE\r\n    where condition_end_datetime < @thresholdValueLow\r\n\t) violated_rows\r\n) violated_row_count,\r\n(\r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.CONDITION_OCCURRENCE\r\n\twhere condition_end_datetime is not null\r\n) denominator\r\n;\r\n","CATEGORY":"Plausibility","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: column \"thresholdvaluelow\" does not exist in condition_occurrence;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":804,"QUERY_TEXT":"\r\n/*********\r\nPLAUSIBLE_VALUE_LOW\r\nget number of records and the proportion to total number of eligible records that fall below this threshold\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = DRUG_EXPOSURE\r\ncdmFieldName = drug_exposure_start_date\r\nthresholdValueLow = @thresholdValueLow\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'DRUG_EXPOSURE.drug_exposure_start_date' AS violating_field, DRUG_EXPOSURE.*\r\n\t\tfrom cdm.DRUG_EXPOSURE\r\n    where drug_exposure_start_date < @thresholdValueLow\r\n\t) violated_rows\r\n) violated_row_count,\r\n(\r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.DRUG_EXPOSURE\r\n\twhere drug_exposure_start_date is not null\r\n) denominator\r\n;\r\n","CATEGORY":"Plausibility","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: column \"thresholdvaluelow\" does not exist in drug_exposure;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":805,"QUERY_TEXT":"\r\n/*********\r\nPLAUSIBLE_VALUE_LOW\r\nget number of records and the proportion to total number of eligible records that fall below this threshold\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = DRUG_EXPOSURE\r\ncdmFieldName = drug_exposure_start_datetime\r\nthresholdValueLow = @thresholdValueLow\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'DRUG_EXPOSURE.drug_exposure_start_datetime' AS violating_field, DRUG_EXPOSURE.*\r\n\t\tfrom cdm.DRUG_EXPOSURE\r\n    where drug_exposure_start_datetime < @thresholdValueLow\r\n\t) violated_rows\r\n) violated_row_count,\r\n(\r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.DRUG_EXPOSURE\r\n\twhere drug_exposure_start_datetime is not null\r\n) denominator\r\n;\r\n","CATEGORY":"Plausibility","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: column \"thresholdvaluelow\" does not exist in drug_exposure;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":806,"QUERY_TEXT":"\r\n/*********\r\nPLAUSIBLE_VALUE_LOW\r\nget number of records and the proportion to total number of eligible records that fall below this threshold\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = DRUG_EXPOSURE\r\ncdmFieldName = drug_exposure_end_date\r\nthresholdValueLow = @thresholdValueLow\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'DRUG_EXPOSURE.drug_exposure_end_date' AS violating_field, DRUG_EXPOSURE.*\r\n\t\tfrom cdm.DRUG_EXPOSURE\r\n    where drug_exposure_end_date < @thresholdValueLow\r\n\t) violated_rows\r\n) violated_row_count,\r\n(\r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.DRUG_EXPOSURE\r\n\twhere drug_exposure_end_date is not null\r\n) denominator\r\n;\r\n","CATEGORY":"Plausibility","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: column \"thresholdvaluelow\" does not exist in drug_exposure;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":807,"QUERY_TEXT":"\r\n/*********\r\nPLAUSIBLE_VALUE_LOW\r\nget number of records and the proportion to total number of eligible records that fall below this threshold\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = DRUG_EXPOSURE\r\ncdmFieldName = drug_exposure_end_datetime\r\nthresholdValueLow = @thresholdValueLow\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'DRUG_EXPOSURE.drug_exposure_end_datetime' AS violating_field, DRUG_EXPOSURE.*\r\n\t\tfrom cdm.DRUG_EXPOSURE\r\n    where drug_exposure_end_datetime < @thresholdValueLow\r\n\t) violated_rows\r\n) violated_row_count,\r\n(\r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.DRUG_EXPOSURE\r\n\twhere drug_exposure_end_datetime is not null\r\n) denominator\r\n;\r\n","CATEGORY":"Plausibility","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: column \"thresholdvaluelow\" does not exist in drug_exposure;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":808,"QUERY_TEXT":"\r\n/*********\r\nPLAUSIBLE_VALUE_LOW\r\nget number of records and the proportion to total number of eligible records that fall below this threshold\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = DRUG_EXPOSURE\r\ncdmFieldName = verbatim_end_date\r\nthresholdValueLow = @thresholdValueLow\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'DRUG_EXPOSURE.verbatim_end_date' AS violating_field, DRUG_EXPOSURE.*\r\n\t\tfrom cdm.DRUG_EXPOSURE\r\n    where verbatim_end_date < @thresholdValueLow\r\n\t) violated_rows\r\n) violated_row_count,\r\n(\r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.DRUG_EXPOSURE\r\n\twhere verbatim_end_date is not null\r\n) denominator\r\n;\r\n","CATEGORY":"Plausibility","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: column \"thresholdvaluelow\" does not exist in drug_exposure;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":809,"QUERY_TEXT":"\r\n/*********\r\nPLAUSIBLE_VALUE_LOW\r\nget number of records and the proportion to total number of eligible records that fall below this threshold\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = DRUG_EXPOSURE\r\ncdmFieldName = refills\r\nthresholdValueLow = @thresholdValueLow\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'DRUG_EXPOSURE.refills' AS violating_field, DRUG_EXPOSURE.*\r\n\t\tfrom cdm.DRUG_EXPOSURE\r\n    where refills < @thresholdValueLow\r\n\t) violated_rows\r\n) violated_row_count,\r\n(\r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.DRUG_EXPOSURE\r\n\twhere refills is not null\r\n) denominator\r\n;\r\n","CATEGORY":"Plausibility","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: column \"thresholdvaluelow\" does not exist in drug_exposure;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":810,"QUERY_TEXT":"\r\n/*********\r\nPLAUSIBLE_VALUE_LOW\r\nget number of records and the proportion to total number of eligible records that fall below this threshold\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = DRUG_EXPOSURE\r\ncdmFieldName = quantity\r\nthresholdValueLow = @thresholdValueLow\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'DRUG_EXPOSURE.quantity' AS violating_field, DRUG_EXPOSURE.*\r\n\t\tfrom cdm.DRUG_EXPOSURE\r\n    where quantity < @thresholdValueLow\r\n\t) violated_rows\r\n) violated_row_count,\r\n(\r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.DRUG_EXPOSURE\r\n\twhere quantity is not null\r\n) denominator\r\n;\r\n","CATEGORY":"Plausibility","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: column \"thresholdvaluelow\" does not exist in drug_exposure;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":811,"QUERY_TEXT":"\r\n/*********\r\nPLAUSIBLE_VALUE_LOW\r\nget number of records and the proportion to total number of eligible records that fall below this threshold\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = DRUG_EXPOSURE\r\ncdmFieldName = days_supply\r\nthresholdValueLow = @thresholdValueLow\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'DRUG_EXPOSURE.days_supply' AS violating_field, DRUG_EXPOSURE.*\r\n\t\tfrom cdm.DRUG_EXPOSURE\r\n    where days_supply < @thresholdValueLow\r\n\t) violated_rows\r\n) violated_row_count,\r\n(\r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.DRUG_EXPOSURE\r\n\twhere days_supply is not null\r\n) denominator\r\n;\r\n","CATEGORY":"Plausibility","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: column \"thresholdvaluelow\" does not exist in drug_exposure;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":812,"QUERY_TEXT":"\r\n/*********\r\nPLAUSIBLE_VALUE_LOW\r\nget number of records and the proportion to total number of eligible records that fall below this threshold\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = PROCEDURE_OCCURRENCE\r\ncdmFieldName = procedure_date\r\nthresholdValueLow = @thresholdValueLow\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'PROCEDURE_OCCURRENCE.procedure_date' AS violating_field, PROCEDURE_OCCURRENCE.*\r\n\t\tfrom cdm.PROCEDURE_OCCURRENCE\r\n    where procedure_date < @thresholdValueLow\r\n\t) violated_rows\r\n) violated_row_count,\r\n(\r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.PROCEDURE_OCCURRENCE\r\n\twhere procedure_date is not null\r\n) denominator\r\n;\r\n","CATEGORY":"Plausibility","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: column \"thresholdvaluelow\" does not exist in procedure_occurrence;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":813,"QUERY_TEXT":"\r\n/*********\r\nPLAUSIBLE_VALUE_LOW\r\nget number of records and the proportion to total number of eligible records that fall below this threshold\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = PROCEDURE_OCCURRENCE\r\ncdmFieldName = procedure_datetime\r\nthresholdValueLow = @thresholdValueLow\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'PROCEDURE_OCCURRENCE.procedure_datetime' AS violating_field, PROCEDURE_OCCURRENCE.*\r\n\t\tfrom cdm.PROCEDURE_OCCURRENCE\r\n    where procedure_datetime < @thresholdValueLow\r\n\t) violated_rows\r\n) violated_row_count,\r\n(\r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.PROCEDURE_OCCURRENCE\r\n\twhere procedure_datetime is not null\r\n) denominator\r\n;\r\n","CATEGORY":"Plausibility","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: column \"thresholdvaluelow\" does not exist in procedure_occurrence;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":814,"QUERY_TEXT":"\r\n/*********\r\nPLAUSIBLE_VALUE_LOW\r\nget number of records and the proportion to total number of eligible records that fall below this threshold\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = PROCEDURE_OCCURRENCE\r\ncdmFieldName = quantity\r\nthresholdValueLow = @thresholdValueLow\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'PROCEDURE_OCCURRENCE.quantity' AS violating_field, PROCEDURE_OCCURRENCE.*\r\n\t\tfrom cdm.PROCEDURE_OCCURRENCE\r\n    where quantity < @thresholdValueLow\r\n\t) violated_rows\r\n) violated_row_count,\r\n(\r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.PROCEDURE_OCCURRENCE\r\n\twhere quantity is not null\r\n) denominator\r\n;\r\n","CATEGORY":"Plausibility","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: column \"thresholdvaluelow\" does not exist in procedure_occurrence;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":815,"QUERY_TEXT":"\r\n/*********\r\nPLAUSIBLE_VALUE_LOW\r\nget number of records and the proportion to total number of eligible records that fall below this threshold\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = DEVICE_EXPOSURE\r\ncdmFieldName = device_exposure_start_date\r\nthresholdValueLow = @thresholdValueLow\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'DEVICE_EXPOSURE.device_exposure_start_date' AS violating_field, DEVICE_EXPOSURE.*\r\n\t\tfrom cdm.DEVICE_EXPOSURE\r\n    where device_exposure_start_date < @thresholdValueLow\r\n\t) violated_rows\r\n) violated_row_count,\r\n(\r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.DEVICE_EXPOSURE\r\n\twhere device_exposure_start_date is not null\r\n) denominator\r\n;\r\n","CATEGORY":"Plausibility","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: column \"thresholdvaluelow\" does not exist in device_exposure;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":816,"QUERY_TEXT":"\r\n/*********\r\nPLAUSIBLE_VALUE_LOW\r\nget number of records and the proportion to total number of eligible records that fall below this threshold\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = DEVICE_EXPOSURE\r\ncdmFieldName = device_exposure_start_datetime\r\nthresholdValueLow = @thresholdValueLow\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'DEVICE_EXPOSURE.device_exposure_start_datetime' AS violating_field, DEVICE_EXPOSURE.*\r\n\t\tfrom cdm.DEVICE_EXPOSURE\r\n    where device_exposure_start_datetime < @thresholdValueLow\r\n\t) violated_rows\r\n) violated_row_count,\r\n(\r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.DEVICE_EXPOSURE\r\n\twhere device_exposure_start_datetime is not null\r\n) denominator\r\n;\r\n","CATEGORY":"Plausibility","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: column \"thresholdvaluelow\" does not exist in device_exposure;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":817,"QUERY_TEXT":"\r\n/*********\r\nPLAUSIBLE_VALUE_LOW\r\nget number of records and the proportion to total number of eligible records that fall below this threshold\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = DEVICE_EXPOSURE\r\ncdmFieldName = device_exposure_end_date\r\nthresholdValueLow = @thresholdValueLow\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'DEVICE_EXPOSURE.device_exposure_end_date' AS violating_field, DEVICE_EXPOSURE.*\r\n\t\tfrom cdm.DEVICE_EXPOSURE\r\n    where device_exposure_end_date < @thresholdValueLow\r\n\t) violated_rows\r\n) violated_row_count,\r\n(\r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.DEVICE_EXPOSURE\r\n\twhere device_exposure_end_date is not null\r\n) denominator\r\n;\r\n","CATEGORY":"Plausibility","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: column \"thresholdvaluelow\" does not exist in device_exposure;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":818,"QUERY_TEXT":"\r\n/*********\r\nPLAUSIBLE_VALUE_LOW\r\nget number of records and the proportion to total number of eligible records that fall below this threshold\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = DEVICE_EXPOSURE\r\ncdmFieldName = device_exposure_end_datetime\r\nthresholdValueLow = @thresholdValueLow\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'DEVICE_EXPOSURE.device_exposure_end_datetime' AS violating_field, DEVICE_EXPOSURE.*\r\n\t\tfrom cdm.DEVICE_EXPOSURE\r\n    where device_exposure_end_datetime < @thresholdValueLow\r\n\t) violated_rows\r\n) violated_row_count,\r\n(\r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.DEVICE_EXPOSURE\r\n\twhere device_exposure_end_datetime is not null\r\n) denominator\r\n;\r\n","CATEGORY":"Plausibility","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: column \"thresholdvaluelow\" does not exist in device_exposure;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":819,"QUERY_TEXT":"\r\n/*********\r\nPLAUSIBLE_VALUE_LOW\r\nget number of records and the proportion to total number of eligible records that fall below this threshold\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = DEVICE_EXPOSURE\r\ncdmFieldName = quantity\r\nthresholdValueLow = @thresholdValueLow\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'DEVICE_EXPOSURE.quantity' AS violating_field, DEVICE_EXPOSURE.*\r\n\t\tfrom cdm.DEVICE_EXPOSURE\r\n    where quantity < @thresholdValueLow\r\n\t) violated_rows\r\n) violated_row_count,\r\n(\r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.DEVICE_EXPOSURE\r\n\twhere quantity is not null\r\n) denominator\r\n;\r\n","CATEGORY":"Plausibility","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: column \"thresholdvaluelow\" does not exist in device_exposure;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":820,"QUERY_TEXT":"\r\n/*********\r\nPLAUSIBLE_VALUE_LOW\r\nget number of records and the proportion to total number of eligible records that fall below this threshold\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = MEASUREMENT\r\ncdmFieldName = measurement_date\r\nthresholdValueLow = @thresholdValueLow\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'MEASUREMENT.measurement_date' AS violating_field, MEASUREMENT.*\r\n\t\tfrom cdm.MEASUREMENT\r\n    where measurement_date < @thresholdValueLow\r\n\t) violated_rows\r\n) violated_row_count,\r\n(\r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.MEASUREMENT\r\n\twhere measurement_date is not null\r\n) denominator\r\n;\r\n","CATEGORY":"Plausibility","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: column \"thresholdvaluelow\" does not exist in measurement;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":821,"QUERY_TEXT":"\r\n/*********\r\nPLAUSIBLE_VALUE_LOW\r\nget number of records and the proportion to total number of eligible records that fall below this threshold\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = VISIT_DETAIL\r\ncdmFieldName = visit_detail_start_date\r\nthresholdValueLow = @thresholdValueLow\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'VISIT_DETAIL.visit_detail_start_date' AS violating_field, VISIT_DETAIL.*\r\n\t\tfrom cdm.VISIT_DETAIL\r\n    where visit_detail_start_date < @thresholdValueLow\r\n\t) violated_rows\r\n) violated_row_count,\r\n(\r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.VISIT_DETAIL\r\n\twhere visit_detail_start_date is not null\r\n) denominator\r\n;\r\n","CATEGORY":"Plausibility","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: column \"thresholdvaluelow\" does not exist in visit_detail;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":822,"QUERY_TEXT":"\r\n/*********\r\nPLAUSIBLE_VALUE_LOW\r\nget number of records and the proportion to total number of eligible records that fall below this threshold\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = VISIT_DETAIL\r\ncdmFieldName = visit_detail_start_datetime\r\nthresholdValueLow = @thresholdValueLow\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'VISIT_DETAIL.visit_detail_start_datetime' AS violating_field, VISIT_DETAIL.*\r\n\t\tfrom cdm.VISIT_DETAIL\r\n    where visit_detail_start_datetime < @thresholdValueLow\r\n\t) violated_rows\r\n) violated_row_count,\r\n(\r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.VISIT_DETAIL\r\n\twhere visit_detail_start_datetime is not null\r\n) denominator\r\n;\r\n","CATEGORY":"Plausibility","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: column \"thresholdvaluelow\" does not exist in visit_detail;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":823,"QUERY_TEXT":"\r\n/*********\r\nPLAUSIBLE_VALUE_LOW\r\nget number of records and the proportion to total number of eligible records that fall below this threshold\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = VISIT_DETAIL\r\ncdmFieldName = visit_detail_end_date\r\nthresholdValueLow = @thresholdValueLow\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'VISIT_DETAIL.visit_detail_end_date' AS violating_field, VISIT_DETAIL.*\r\n\t\tfrom cdm.VISIT_DETAIL\r\n    where visit_detail_end_date < @thresholdValueLow\r\n\t) violated_rows\r\n) violated_row_count,\r\n(\r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.VISIT_DETAIL\r\n\twhere visit_detail_end_date is not null\r\n) denominator\r\n;\r\n","CATEGORY":"Plausibility","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: column \"thresholdvaluelow\" does not exist in visit_detail;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":824,"QUERY_TEXT":"\r\n/*********\r\nPLAUSIBLE_VALUE_LOW\r\nget number of records and the proportion to total number of eligible records that fall below this threshold\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = VISIT_DETAIL\r\ncdmFieldName = visit_detail_end_datetime\r\nthresholdValueLow = @thresholdValueLow\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'VISIT_DETAIL.visit_detail_end_datetime' AS violating_field, VISIT_DETAIL.*\r\n\t\tfrom cdm.VISIT_DETAIL\r\n    where visit_detail_end_datetime < @thresholdValueLow\r\n\t) violated_rows\r\n) violated_row_count,\r\n(\r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.VISIT_DETAIL\r\n\twhere visit_detail_end_datetime is not null\r\n) denominator\r\n;\r\n","CATEGORY":"Plausibility","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: column \"thresholdvaluelow\" does not exist in visit_detail;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":825,"QUERY_TEXT":"\r\n/*********\r\nPLAUSIBLE_VALUE_LOW\r\nget number of records and the proportion to total number of eligible records that fall below this threshold\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = NOTE\r\ncdmFieldName = note_date\r\nthresholdValueLow = @thresholdValueLow\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'NOTE.note_date' AS violating_field, NOTE.*\r\n\t\tfrom cdm.NOTE\r\n    where note_date < @thresholdValueLow\r\n\t) violated_rows\r\n) violated_row_count,\r\n(\r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.NOTE\r\n\twhere note_date is not null\r\n) denominator\r\n;\r\n","CATEGORY":"Plausibility","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: column \"thresholdvaluelow\" does not exist in note;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":826,"QUERY_TEXT":"\r\n/*********\r\nPLAUSIBLE_VALUE_LOW\r\nget number of records and the proportion to total number of eligible records that fall below this threshold\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = NOTE\r\ncdmFieldName = note_datetime\r\nthresholdValueLow = @thresholdValueLow\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'NOTE.note_datetime' AS violating_field, NOTE.*\r\n\t\tfrom cdm.NOTE\r\n    where note_datetime < @thresholdValueLow\r\n\t) violated_rows\r\n) violated_row_count,\r\n(\r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.NOTE\r\n\twhere note_datetime is not null\r\n) denominator\r\n;\r\n","CATEGORY":"Plausibility","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: column \"thresholdvaluelow\" does not exist in note;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":827,"QUERY_TEXT":"\r\n/*********\r\nPLAUSIBLE_VALUE_LOW\r\nget number of records and the proportion to total number of eligible records that fall below this threshold\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = NOTE_NLP\r\ncdmFieldName = nlp_datetime\r\nthresholdValueLow = @thresholdValueLow\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'NOTE_NLP.nlp_datetime' AS violating_field, NOTE_NLP.*\r\n\t\tfrom cdm.NOTE_NLP\r\n    where nlp_datetime < @thresholdValueLow\r\n\t) violated_rows\r\n) violated_row_count,\r\n(\r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.NOTE_NLP\r\n\twhere nlp_datetime is not null\r\n) denominator\r\n;\r\n","CATEGORY":"Plausibility","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: column \"thresholdvaluelow\" does not exist in note_nlp;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":828,"QUERY_TEXT":"\r\n/*********\r\nPLAUSIBLE_VALUE_LOW\r\nget number of records and the proportion to total number of eligible records that fall below this threshold\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = OBSERVATION\r\ncdmFieldName = observation_date\r\nthresholdValueLow = @thresholdValueLow\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'OBSERVATION.observation_date' AS violating_field, OBSERVATION.*\r\n\t\tfrom cdm.OBSERVATION\r\n    where observation_date < @thresholdValueLow\r\n\t) violated_rows\r\n) violated_row_count,\r\n(\r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.OBSERVATION\r\n\twhere observation_date is not null\r\n) denominator\r\n;\r\n","CATEGORY":"Plausibility","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: column \"thresholdvaluelow\" does not exist in observation;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":829,"QUERY_TEXT":"\r\n/*********\r\nPLAUSIBLE_VALUE_LOW\r\nget number of records and the proportion to total number of eligible records that fall below this threshold\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = OBSERVATION\r\ncdmFieldName = observation_datetime\r\nthresholdValueLow = @thresholdValueLow\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'OBSERVATION.observation_datetime' AS violating_field, OBSERVATION.*\r\n\t\tfrom cdm.OBSERVATION\r\n    where observation_datetime < @thresholdValueLow\r\n\t) violated_rows\r\n) violated_row_count,\r\n(\r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.OBSERVATION\r\n\twhere observation_datetime is not null\r\n) denominator\r\n;\r\n","CATEGORY":"Plausibility","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: column \"thresholdvaluelow\" does not exist in observation;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":830,"QUERY_TEXT":"\r\n/*********\r\nPLAUSIBLE_VALUE_LOW\r\nget number of records and the proportion to total number of eligible records that fall below this threshold\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = SPECIMEN\r\ncdmFieldName = specimen_date\r\nthresholdValueLow = @thresholdValueLow\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'SPECIMEN.specimen_date' AS violating_field, SPECIMEN.*\r\n\t\tfrom cdm.SPECIMEN\r\n    where specimen_date < @thresholdValueLow\r\n\t) violated_rows\r\n) violated_row_count,\r\n(\r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.SPECIMEN\r\n\twhere specimen_date is not null\r\n) denominator\r\n;\r\n","CATEGORY":"Plausibility","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: column \"thresholdvaluelow\" does not exist in specimen;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":831,"QUERY_TEXT":"\r\n/*********\r\nPLAUSIBLE_VALUE_LOW\r\nget number of records and the proportion to total number of eligible records that fall below this threshold\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = SPECIMEN\r\ncdmFieldName = specimen_datetime\r\nthresholdValueLow = @thresholdValueLow\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'SPECIMEN.specimen_datetime' AS violating_field, SPECIMEN.*\r\n\t\tfrom cdm.SPECIMEN\r\n    where specimen_datetime < @thresholdValueLow\r\n\t) violated_rows\r\n) violated_row_count,\r\n(\r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.SPECIMEN\r\n\twhere specimen_datetime is not null\r\n) denominator\r\n;\r\n","CATEGORY":"Plausibility","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: column \"thresholdvaluelow\" does not exist in specimen;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":832,"QUERY_TEXT":"\r\n/*********\r\nPLAUSIBLE_VALUE_LOW\r\nget number of records and the proportion to total number of eligible records that fall below this threshold\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = SPECIMEN\r\ncdmFieldName = quantity\r\nthresholdValueLow = @thresholdValueLow\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'SPECIMEN.quantity' AS violating_field, SPECIMEN.*\r\n\t\tfrom cdm.SPECIMEN\r\n    where quantity < @thresholdValueLow\r\n\t) violated_rows\r\n) violated_row_count,\r\n(\r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.SPECIMEN\r\n\twhere quantity is not null\r\n) denominator\r\n;\r\n","CATEGORY":"Plausibility","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: column \"thresholdvaluelow\" does not exist in specimen;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":833,"QUERY_TEXT":"\r\n/*********\r\nPLAUSIBLE_VALUE_LOW\r\nget number of records and the proportion to total number of eligible records that fall below this threshold\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = COST\r\ncdmFieldName = paid_dispensing_fee\r\nthresholdValueLow = @thresholdValueLow\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'COST.paid_dispensing_fee' AS violating_field, COST.*\r\n\t\tfrom cdm.COST\r\n    where paid_dispensing_fee < @thresholdValueLow\r\n\t) violated_rows\r\n) violated_row_count,\r\n(\r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.COST\r\n\twhere paid_dispensing_fee is not null\r\n) denominator\r\n;\r\n","CATEGORY":"Plausibility","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: column \"thresholdvaluelow\" does not exist in cost;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":834,"QUERY_TEXT":"\r\n/*********\r\nPLAUSIBLE_VALUE_LOW\r\nget number of records and the proportion to total number of eligible records that fall below this threshold\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = COST\r\ncdmFieldName = payer_plan_period_id\r\nthresholdValueLow = @thresholdValueLow\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'COST.payer_plan_period_id' AS violating_field, COST.*\r\n\t\tfrom cdm.COST\r\n    where payer_plan_period_id < @thresholdValueLow\r\n\t) violated_rows\r\n) violated_row_count,\r\n(\r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.COST\r\n\twhere payer_plan_period_id is not null\r\n) denominator\r\n;\r\n","CATEGORY":"Plausibility","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: column \"thresholdvaluelow\" does not exist in cost;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":835,"QUERY_TEXT":"\r\n/*********\r\nPLAUSIBLE_VALUE_LOW\r\nget number of records and the proportion to total number of eligible records that fall below this threshold\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = DRUG_ERA\r\ncdmFieldName = drug_era_start_date\r\nthresholdValueLow = @thresholdValueLow\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'DRUG_ERA.drug_era_start_date' AS violating_field, DRUG_ERA.*\r\n\t\tfrom cdm.DRUG_ERA\r\n    where drug_era_start_date < @thresholdValueLow\r\n\t) violated_rows\r\n) violated_row_count,\r\n(\r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.DRUG_ERA\r\n\twhere drug_era_start_date is not null\r\n) denominator\r\n;\r\n","CATEGORY":"Plausibility","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: column \"thresholdvaluelow\" does not exist in drug_era;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":836,"QUERY_TEXT":"\r\n/*********\r\nPLAUSIBLE_VALUE_LOW\r\nget number of records and the proportion to total number of eligible records that fall below this threshold\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = DRUG_ERA\r\ncdmFieldName = drug_era_end_date\r\nthresholdValueLow = @thresholdValueLow\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'DRUG_ERA.drug_era_end_date' AS violating_field, DRUG_ERA.*\r\n\t\tfrom cdm.DRUG_ERA\r\n    where drug_era_end_date < @thresholdValueLow\r\n\t) violated_rows\r\n) violated_row_count,\r\n(\r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.DRUG_ERA\r\n\twhere drug_era_end_date is not null\r\n) denominator\r\n;\r\n","CATEGORY":"Plausibility","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: column \"thresholdvaluelow\" does not exist in drug_era;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":837,"QUERY_TEXT":"\r\n/*********\r\nPLAUSIBLE_VALUE_LOW\r\nget number of records and the proportion to total number of eligible records that fall below this threshold\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = DRUG_ERA\r\ncdmFieldName = drug_exposure_count\r\nthresholdValueLow = @thresholdValueLow\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'DRUG_ERA.drug_exposure_count' AS violating_field, DRUG_ERA.*\r\n\t\tfrom cdm.DRUG_ERA\r\n    where drug_exposure_count < @thresholdValueLow\r\n\t) violated_rows\r\n) violated_row_count,\r\n(\r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.DRUG_ERA\r\n\twhere drug_exposure_count is not null\r\n) denominator\r\n;\r\n","CATEGORY":"Plausibility","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: column \"thresholdvaluelow\" does not exist in drug_era;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":838,"QUERY_TEXT":"\r\n/*********\r\nPLAUSIBLE_VALUE_LOW\r\nget number of records and the proportion to total number of eligible records that fall below this threshold\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = DRUG_ERA\r\ncdmFieldName = gap_days\r\nthresholdValueLow = @thresholdValueLow\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'DRUG_ERA.gap_days' AS violating_field, DRUG_ERA.*\r\n\t\tfrom cdm.DRUG_ERA\r\n    where gap_days < @thresholdValueLow\r\n\t) violated_rows\r\n) violated_row_count,\r\n(\r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.DRUG_ERA\r\n\twhere gap_days is not null\r\n) denominator\r\n;\r\n","CATEGORY":"Plausibility","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: column \"thresholdvaluelow\" does not exist in drug_era;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":839,"QUERY_TEXT":"\r\n/*********\r\nPLAUSIBLE_VALUE_LOW\r\nget number of records and the proportion to total number of eligible records that fall below this threshold\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = DOSE_ERA\r\ncdmFieldName = dose_value\r\nthresholdValueLow = @thresholdValueLow\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'DOSE_ERA.dose_value' AS violating_field, DOSE_ERA.*\r\n\t\tfrom cdm.DOSE_ERA\r\n    where dose_value < @thresholdValueLow\r\n\t) violated_rows\r\n) violated_row_count,\r\n(\r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.DOSE_ERA\r\n\twhere dose_value is not null\r\n) denominator\r\n;\r\n","CATEGORY":"Plausibility","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: column \"thresholdvaluelow\" does not exist in dose_era;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":840,"QUERY_TEXT":"\r\n/*********\r\nPLAUSIBLE_VALUE_LOW\r\nget number of records and the proportion to total number of eligible records that fall below this threshold\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = DOSE_ERA\r\ncdmFieldName = dose_era_start_date\r\nthresholdValueLow = @thresholdValueLow\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'DOSE_ERA.dose_era_start_date' AS violating_field, DOSE_ERA.*\r\n\t\tfrom cdm.DOSE_ERA\r\n    where dose_era_start_date < @thresholdValueLow\r\n\t) violated_rows\r\n) violated_row_count,\r\n(\r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.DOSE_ERA\r\n\twhere dose_era_start_date is not null\r\n) denominator\r\n;\r\n","CATEGORY":"Plausibility","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: column \"thresholdvaluelow\" does not exist in dose_era;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":841,"QUERY_TEXT":"\r\n/*********\r\nPLAUSIBLE_VALUE_LOW\r\nget number of records and the proportion to total number of eligible records that fall below this threshold\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = DOSE_ERA\r\ncdmFieldName = dose_era_end_date\r\nthresholdValueLow = @thresholdValueLow\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'DOSE_ERA.dose_era_end_date' AS violating_field, DOSE_ERA.*\r\n\t\tfrom cdm.DOSE_ERA\r\n    where dose_era_end_date < @thresholdValueLow\r\n\t) violated_rows\r\n) violated_row_count,\r\n(\r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.DOSE_ERA\r\n\twhere dose_era_end_date is not null\r\n) denominator\r\n;\r\n","CATEGORY":"Plausibility","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: column \"thresholdvaluelow\" does not exist in dose_era;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":842,"QUERY_TEXT":"\r\n/*********\r\nPLAUSIBLE_VALUE_LOW\r\nget number of records and the proportion to total number of eligible records that fall below this threshold\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = CONDITION_ERA\r\ncdmFieldName = condition_era_start_date\r\nthresholdValueLow = @thresholdValueLow\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'CONDITION_ERA.condition_era_start_date' AS violating_field, CONDITION_ERA.*\r\n\t\tfrom cdm.CONDITION_ERA\r\n    where condition_era_start_date < @thresholdValueLow\r\n\t) violated_rows\r\n) violated_row_count,\r\n(\r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.CONDITION_ERA\r\n\twhere condition_era_start_date is not null\r\n) denominator\r\n;\r\n","CATEGORY":"Plausibility","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: column \"thresholdvaluelow\" does not exist in condition_era;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":843,"QUERY_TEXT":"\r\n/*********\r\nPLAUSIBLE_VALUE_LOW\r\nget number of records and the proportion to total number of eligible records that fall below this threshold\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = CONDITION_ERA\r\ncdmFieldName = condition_era_end_date\r\nthresholdValueLow = @thresholdValueLow\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'CONDITION_ERA.condition_era_end_date' AS violating_field, CONDITION_ERA.*\r\n\t\tfrom cdm.CONDITION_ERA\r\n    where condition_era_end_date < @thresholdValueLow\r\n\t) violated_rows\r\n) violated_row_count,\r\n(\r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.CONDITION_ERA\r\n\twhere condition_era_end_date is not null\r\n) denominator\r\n;\r\n","CATEGORY":"Plausibility","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: column \"thresholdvaluelow\" does not exist in condition_era;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":844,"QUERY_TEXT":"\r\n/*********\r\nPLAUSIBLE_VALUE_LOW\r\nget number of records and the proportion to total number of eligible records that fall below this threshold\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = CONDITION_ERA\r\ncdmFieldName = condition_occurrence_count\r\nthresholdValueLow = @thresholdValueLow\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'CONDITION_ERA.condition_occurrence_count' AS violating_field, CONDITION_ERA.*\r\n\t\tfrom cdm.CONDITION_ERA\r\n    where condition_occurrence_count < @thresholdValueLow\r\n\t) violated_rows\r\n) violated_row_count,\r\n(\r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.CONDITION_ERA\r\n\twhere condition_occurrence_count is not null\r\n) denominator\r\n;\r\n","CATEGORY":"Plausibility","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: column \"thresholdvaluelow\" does not exist in condition_era;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":845,"QUERY_TEXT":"\r\n/*********\r\nPLAUSIBLE_VALUE_HIGH\r\nget number of records and the proportion to total number of eligible records that exceed this threshold\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = PERSON\r\ncdmFieldName = year_of_birth\r\nthresholdValueHigh = @thresholdValueHigh\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'PERSON.year_of_birth' AS violating_field, PERSON.*\r\n    from cdm.PERSON\r\n    where year_of_birth > @thresholdValueHigh\r\n\t) violated_rows\r\n) violated_row_count,\r\n(\r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.PERSON\r\n  where year_of_birth is not null\r\n) denominator\r\n;\r\n","CATEGORY":"Plausibility","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: column \"thresholdvaluehigh\" does not exist in person;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":846,"QUERY_TEXT":"\r\n/*********\r\nPLAUSIBLE_VALUE_HIGH\r\nget number of records and the proportion to total number of eligible records that exceed this threshold\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = PERSON\r\ncdmFieldName = month_of_birth\r\nthresholdValueHigh = @thresholdValueHigh\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'PERSON.month_of_birth' AS violating_field, PERSON.*\r\n    from cdm.PERSON\r\n    where month_of_birth > @thresholdValueHigh\r\n\t) violated_rows\r\n) violated_row_count,\r\n(\r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.PERSON\r\n  where month_of_birth is not null\r\n) denominator\r\n;\r\n","CATEGORY":"Plausibility","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: column \"thresholdvaluehigh\" does not exist in person;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":847,"QUERY_TEXT":"\r\n/*********\r\nPLAUSIBLE_VALUE_HIGH\r\nget number of records and the proportion to total number of eligible records that exceed this threshold\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = PERSON\r\ncdmFieldName = day_of_birth\r\nthresholdValueHigh = @thresholdValueHigh\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'PERSON.day_of_birth' AS violating_field, PERSON.*\r\n    from cdm.PERSON\r\n    where day_of_birth > @thresholdValueHigh\r\n\t) violated_rows\r\n) violated_row_count,\r\n(\r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.PERSON\r\n  where day_of_birth is not null\r\n) denominator\r\n;\r\n","CATEGORY":"Plausibility","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: column \"thresholdvaluehigh\" does not exist in person;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":848,"QUERY_TEXT":"\r\n/*********\r\nPLAUSIBLE_VALUE_HIGH\r\nget number of records and the proportion to total number of eligible records that exceed this threshold\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = PERSON\r\ncdmFieldName = birth_datetime\r\nthresholdValueHigh = @thresholdValueHigh\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'PERSON.birth_datetime' AS violating_field, PERSON.*\r\n    from cdm.PERSON\r\n    where birth_datetime > @thresholdValueHigh\r\n\t) violated_rows\r\n) violated_row_count,\r\n(\r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.PERSON\r\n  where birth_datetime is not null\r\n) denominator\r\n;\r\n","CATEGORY":"Plausibility","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: column \"thresholdvaluehigh\" does not exist in person;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":849,"QUERY_TEXT":"\r\n/*********\r\nPLAUSIBLE_VALUE_HIGH\r\nget number of records and the proportion to total number of eligible records that exceed this threshold\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = OBSERVATION_PERIOD\r\ncdmFieldName = observation_period_start_date\r\nthresholdValueHigh = @thresholdValueHigh\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'OBSERVATION_PERIOD.observation_period_start_date' AS violating_field, OBSERVATION_PERIOD.*\r\n    from cdm.OBSERVATION_PERIOD\r\n    where observation_period_start_date > @thresholdValueHigh\r\n\t) violated_rows\r\n) violated_row_count,\r\n(\r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.OBSERVATION_PERIOD\r\n  where observation_period_start_date is not null\r\n) denominator\r\n;\r\n","CATEGORY":"Plausibility","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: column \"thresholdvaluehigh\" does not exist in observation_period;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":850,"QUERY_TEXT":"\r\n/*********\r\nPLAUSIBLE_VALUE_HIGH\r\nget number of records and the proportion to total number of eligible records that exceed this threshold\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = OBSERVATION_PERIOD\r\ncdmFieldName = observation_period_end_date\r\nthresholdValueHigh = @thresholdValueHigh\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'OBSERVATION_PERIOD.observation_period_end_date' AS violating_field, OBSERVATION_PERIOD.*\r\n    from cdm.OBSERVATION_PERIOD\r\n    where observation_period_end_date > @thresholdValueHigh\r\n\t) violated_rows\r\n) violated_row_count,\r\n(\r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.OBSERVATION_PERIOD\r\n  where observation_period_end_date is not null\r\n) denominator\r\n;\r\n","CATEGORY":"Plausibility","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: column \"thresholdvaluehigh\" does not exist in observation_period;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":851,"QUERY_TEXT":"\r\n/*********\r\nPLAUSIBLE_VALUE_HIGH\r\nget number of records and the proportion to total number of eligible records that exceed this threshold\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = VISIT_OCCURRENCE\r\ncdmFieldName = visit_start_date\r\nthresholdValueHigh = @thresholdValueHigh\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'VISIT_OCCURRENCE.visit_start_date' AS violating_field, VISIT_OCCURRENCE.*\r\n    from cdm.VISIT_OCCURRENCE\r\n    where visit_start_date > @thresholdValueHigh\r\n\t) violated_rows\r\n) violated_row_count,\r\n(\r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.VISIT_OCCURRENCE\r\n  where visit_start_date is not null\r\n) denominator\r\n;\r\n","CATEGORY":"Plausibility","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: column \"thresholdvaluehigh\" does not exist in visit_occurrence;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":852,"QUERY_TEXT":"\r\n/*********\r\nPLAUSIBLE_VALUE_HIGH\r\nget number of records and the proportion to total number of eligible records that exceed this threshold\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = VISIT_OCCURRENCE\r\ncdmFieldName = visit_start_datetime\r\nthresholdValueHigh = @thresholdValueHigh\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'VISIT_OCCURRENCE.visit_start_datetime' AS violating_field, VISIT_OCCURRENCE.*\r\n    from cdm.VISIT_OCCURRENCE\r\n    where visit_start_datetime > @thresholdValueHigh\r\n\t) violated_rows\r\n) violated_row_count,\r\n(\r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.VISIT_OCCURRENCE\r\n  where visit_start_datetime is not null\r\n) denominator\r\n;\r\n","CATEGORY":"Plausibility","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: column \"thresholdvaluehigh\" does not exist in visit_occurrence;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":853,"QUERY_TEXT":"\r\n/*********\r\nPLAUSIBLE_VALUE_HIGH\r\nget number of records and the proportion to total number of eligible records that exceed this threshold\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = VISIT_OCCURRENCE\r\ncdmFieldName = visit_end_date\r\nthresholdValueHigh = @thresholdValueHigh\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'VISIT_OCCURRENCE.visit_end_date' AS violating_field, VISIT_OCCURRENCE.*\r\n    from cdm.VISIT_OCCURRENCE\r\n    where visit_end_date > @thresholdValueHigh\r\n\t) violated_rows\r\n) violated_row_count,\r\n(\r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.VISIT_OCCURRENCE\r\n  where visit_end_date is not null\r\n) denominator\r\n;\r\n","CATEGORY":"Plausibility","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: column \"thresholdvaluehigh\" does not exist in visit_occurrence;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":854,"QUERY_TEXT":"\r\n/*********\r\nPLAUSIBLE_VALUE_HIGH\r\nget number of records and the proportion to total number of eligible records that exceed this threshold\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = VISIT_OCCURRENCE\r\ncdmFieldName = visit_end_datetime\r\nthresholdValueHigh = @thresholdValueHigh\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'VISIT_OCCURRENCE.visit_end_datetime' AS violating_field, VISIT_OCCURRENCE.*\r\n    from cdm.VISIT_OCCURRENCE\r\n    where visit_end_datetime > @thresholdValueHigh\r\n\t) violated_rows\r\n) violated_row_count,\r\n(\r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.VISIT_OCCURRENCE\r\n  where visit_end_datetime is not null\r\n) denominator\r\n;\r\n","CATEGORY":"Plausibility","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: column \"thresholdvaluehigh\" does not exist in visit_occurrence;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":855,"QUERY_TEXT":"\r\n/*********\r\nPLAUSIBLE_VALUE_HIGH\r\nget number of records and the proportion to total number of eligible records that exceed this threshold\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = CONDITION_OCCURRENCE\r\ncdmFieldName = condition_start_date\r\nthresholdValueHigh = @thresholdValueHigh\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'CONDITION_OCCURRENCE.condition_start_date' AS violating_field, CONDITION_OCCURRENCE.*\r\n    from cdm.CONDITION_OCCURRENCE\r\n    where condition_start_date > @thresholdValueHigh\r\n\t) violated_rows\r\n) violated_row_count,\r\n(\r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.CONDITION_OCCURRENCE\r\n  where condition_start_date is not null\r\n) denominator\r\n;\r\n","CATEGORY":"Plausibility","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: column \"thresholdvaluehigh\" does not exist in condition_occurrence;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":856,"QUERY_TEXT":"\r\n/*********\r\nPLAUSIBLE_VALUE_HIGH\r\nget number of records and the proportion to total number of eligible records that exceed this threshold\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = CONDITION_OCCURRENCE\r\ncdmFieldName = condition_start_datetime\r\nthresholdValueHigh = @thresholdValueHigh\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'CONDITION_OCCURRENCE.condition_start_datetime' AS violating_field, CONDITION_OCCURRENCE.*\r\n    from cdm.CONDITION_OCCURRENCE\r\n    where condition_start_datetime > @thresholdValueHigh\r\n\t) violated_rows\r\n) violated_row_count,\r\n(\r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.CONDITION_OCCURRENCE\r\n  where condition_start_datetime is not null\r\n) denominator\r\n;\r\n","CATEGORY":"Plausibility","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: column \"thresholdvaluehigh\" does not exist in condition_occurrence;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":857,"QUERY_TEXT":"\r\n/*********\r\nPLAUSIBLE_VALUE_HIGH\r\nget number of records and the proportion to total number of eligible records that exceed this threshold\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = CONDITION_OCCURRENCE\r\ncdmFieldName = condition_end_date\r\nthresholdValueHigh = @thresholdValueHigh\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'CONDITION_OCCURRENCE.condition_end_date' AS violating_field, CONDITION_OCCURRENCE.*\r\n    from cdm.CONDITION_OCCURRENCE\r\n    where condition_end_date > @thresholdValueHigh\r\n\t) violated_rows\r\n) violated_row_count,\r\n(\r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.CONDITION_OCCURRENCE\r\n  where condition_end_date is not null\r\n) denominator\r\n;\r\n","CATEGORY":"Plausibility","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: column \"thresholdvaluehigh\" does not exist in condition_occurrence;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":858,"QUERY_TEXT":"\r\n/*********\r\nPLAUSIBLE_VALUE_HIGH\r\nget number of records and the proportion to total number of eligible records that exceed this threshold\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = CONDITION_OCCURRENCE\r\ncdmFieldName = condition_end_datetime\r\nthresholdValueHigh = @thresholdValueHigh\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'CONDITION_OCCURRENCE.condition_end_datetime' AS violating_field, CONDITION_OCCURRENCE.*\r\n    from cdm.CONDITION_OCCURRENCE\r\n    where condition_end_datetime > @thresholdValueHigh\r\n\t) violated_rows\r\n) violated_row_count,\r\n(\r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.CONDITION_OCCURRENCE\r\n  where condition_end_datetime is not null\r\n) denominator\r\n;\r\n","CATEGORY":"Plausibility","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: column \"thresholdvaluehigh\" does not exist in condition_occurrence;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":859,"QUERY_TEXT":"\r\n/*********\r\nPLAUSIBLE_VALUE_HIGH\r\nget number of records and the proportion to total number of eligible records that exceed this threshold\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = DRUG_EXPOSURE\r\ncdmFieldName = drug_exposure_start_date\r\nthresholdValueHigh = @thresholdValueHigh\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'DRUG_EXPOSURE.drug_exposure_start_date' AS violating_field, DRUG_EXPOSURE.*\r\n    from cdm.DRUG_EXPOSURE\r\n    where drug_exposure_start_date > @thresholdValueHigh\r\n\t) violated_rows\r\n) violated_row_count,\r\n(\r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.DRUG_EXPOSURE\r\n  where drug_exposure_start_date is not null\r\n) denominator\r\n;\r\n","CATEGORY":"Plausibility","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: column \"thresholdvaluehigh\" does not exist in drug_exposure;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":860,"QUERY_TEXT":"\r\n/*********\r\nPLAUSIBLE_VALUE_HIGH\r\nget number of records and the proportion to total number of eligible records that exceed this threshold\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = DRUG_EXPOSURE\r\ncdmFieldName = drug_exposure_start_datetime\r\nthresholdValueHigh = @thresholdValueHigh\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'DRUG_EXPOSURE.drug_exposure_start_datetime' AS violating_field, DRUG_EXPOSURE.*\r\n    from cdm.DRUG_EXPOSURE\r\n    where drug_exposure_start_datetime > @thresholdValueHigh\r\n\t) violated_rows\r\n) violated_row_count,\r\n(\r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.DRUG_EXPOSURE\r\n  where drug_exposure_start_datetime is not null\r\n) denominator\r\n;\r\n","CATEGORY":"Plausibility","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: column \"thresholdvaluehigh\" does not exist in drug_exposure;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":861,"QUERY_TEXT":"\r\n/*********\r\nPLAUSIBLE_VALUE_HIGH\r\nget number of records and the proportion to total number of eligible records that exceed this threshold\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = DRUG_EXPOSURE\r\ncdmFieldName = drug_exposure_end_date\r\nthresholdValueHigh = @thresholdValueHigh\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'DRUG_EXPOSURE.drug_exposure_end_date' AS violating_field, DRUG_EXPOSURE.*\r\n    from cdm.DRUG_EXPOSURE\r\n    where drug_exposure_end_date > @thresholdValueHigh\r\n\t) violated_rows\r\n) violated_row_count,\r\n(\r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.DRUG_EXPOSURE\r\n  where drug_exposure_end_date is not null\r\n) denominator\r\n;\r\n","CATEGORY":"Plausibility","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: column \"thresholdvaluehigh\" does not exist in drug_exposure;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":862,"QUERY_TEXT":"\r\n/*********\r\nPLAUSIBLE_VALUE_HIGH\r\nget number of records and the proportion to total number of eligible records that exceed this threshold\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = DRUG_EXPOSURE\r\ncdmFieldName = drug_exposure_end_datetime\r\nthresholdValueHigh = @thresholdValueHigh\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'DRUG_EXPOSURE.drug_exposure_end_datetime' AS violating_field, DRUG_EXPOSURE.*\r\n    from cdm.DRUG_EXPOSURE\r\n    where drug_exposure_end_datetime > @thresholdValueHigh\r\n\t) violated_rows\r\n) violated_row_count,\r\n(\r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.DRUG_EXPOSURE\r\n  where drug_exposure_end_datetime is not null\r\n) denominator\r\n;\r\n","CATEGORY":"Plausibility","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: column \"thresholdvaluehigh\" does not exist in drug_exposure;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":863,"QUERY_TEXT":"\r\n/*********\r\nPLAUSIBLE_VALUE_HIGH\r\nget number of records and the proportion to total number of eligible records that exceed this threshold\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = DRUG_EXPOSURE\r\ncdmFieldName = verbatim_end_date\r\nthresholdValueHigh = @thresholdValueHigh\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'DRUG_EXPOSURE.verbatim_end_date' AS violating_field, DRUG_EXPOSURE.*\r\n    from cdm.DRUG_EXPOSURE\r\n    where verbatim_end_date > @thresholdValueHigh\r\n\t) violated_rows\r\n) violated_row_count,\r\n(\r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.DRUG_EXPOSURE\r\n  where verbatim_end_date is not null\r\n) denominator\r\n;\r\n","CATEGORY":"Plausibility","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: column \"thresholdvaluehigh\" does not exist in drug_exposure;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":864,"QUERY_TEXT":"\r\n/*********\r\nPLAUSIBLE_VALUE_HIGH\r\nget number of records and the proportion to total number of eligible records that exceed this threshold\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = DRUG_EXPOSURE\r\ncdmFieldName = refills\r\nthresholdValueHigh = @thresholdValueHigh\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'DRUG_EXPOSURE.refills' AS violating_field, DRUG_EXPOSURE.*\r\n    from cdm.DRUG_EXPOSURE\r\n    where refills > @thresholdValueHigh\r\n\t) violated_rows\r\n) violated_row_count,\r\n(\r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.DRUG_EXPOSURE\r\n  where refills is not null\r\n) denominator\r\n;\r\n","CATEGORY":"Plausibility","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: column \"thresholdvaluehigh\" does not exist in drug_exposure;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":865,"QUERY_TEXT":"\r\n/*********\r\nPLAUSIBLE_VALUE_HIGH\r\nget number of records and the proportion to total number of eligible records that exceed this threshold\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = DRUG_EXPOSURE\r\ncdmFieldName = quantity\r\nthresholdValueHigh = @thresholdValueHigh\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'DRUG_EXPOSURE.quantity' AS violating_field, DRUG_EXPOSURE.*\r\n    from cdm.DRUG_EXPOSURE\r\n    where quantity > @thresholdValueHigh\r\n\t) violated_rows\r\n) violated_row_count,\r\n(\r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.DRUG_EXPOSURE\r\n  where quantity is not null\r\n) denominator\r\n;\r\n","CATEGORY":"Plausibility","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: column \"thresholdvaluehigh\" does not exist in drug_exposure;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":866,"QUERY_TEXT":"\r\n/*********\r\nPLAUSIBLE_VALUE_HIGH\r\nget number of records and the proportion to total number of eligible records that exceed this threshold\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = DRUG_EXPOSURE\r\ncdmFieldName = days_supply\r\nthresholdValueHigh = @thresholdValueHigh\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'DRUG_EXPOSURE.days_supply' AS violating_field, DRUG_EXPOSURE.*\r\n    from cdm.DRUG_EXPOSURE\r\n    where days_supply > @thresholdValueHigh\r\n\t) violated_rows\r\n) violated_row_count,\r\n(\r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.DRUG_EXPOSURE\r\n  where days_supply is not null\r\n) denominator\r\n;\r\n","CATEGORY":"Plausibility","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: column \"thresholdvaluehigh\" does not exist in drug_exposure;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":867,"QUERY_TEXT":"\r\n/*********\r\nPLAUSIBLE_VALUE_HIGH\r\nget number of records and the proportion to total number of eligible records that exceed this threshold\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = PROCEDURE_OCCURRENCE\r\ncdmFieldName = procedure_date\r\nthresholdValueHigh = @thresholdValueHigh\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'PROCEDURE_OCCURRENCE.procedure_date' AS violating_field, PROCEDURE_OCCURRENCE.*\r\n    from cdm.PROCEDURE_OCCURRENCE\r\n    where procedure_date > @thresholdValueHigh\r\n\t) violated_rows\r\n) violated_row_count,\r\n(\r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.PROCEDURE_OCCURRENCE\r\n  where procedure_date is not null\r\n) denominator\r\n;\r\n","CATEGORY":"Plausibility","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: column \"thresholdvaluehigh\" does not exist in procedure_occurrence;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":868,"QUERY_TEXT":"\r\n/*********\r\nPLAUSIBLE_VALUE_HIGH\r\nget number of records and the proportion to total number of eligible records that exceed this threshold\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = PROCEDURE_OCCURRENCE\r\ncdmFieldName = procedure_datetime\r\nthresholdValueHigh = @thresholdValueHigh\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'PROCEDURE_OCCURRENCE.procedure_datetime' AS violating_field, PROCEDURE_OCCURRENCE.*\r\n    from cdm.PROCEDURE_OCCURRENCE\r\n    where procedure_datetime > @thresholdValueHigh\r\n\t) violated_rows\r\n) violated_row_count,\r\n(\r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.PROCEDURE_OCCURRENCE\r\n  where procedure_datetime is not null\r\n) denominator\r\n;\r\n","CATEGORY":"Plausibility","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: column \"thresholdvaluehigh\" does not exist in procedure_occurrence;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":869,"QUERY_TEXT":"\r\n/*********\r\nPLAUSIBLE_VALUE_HIGH\r\nget number of records and the proportion to total number of eligible records that exceed this threshold\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = DEVICE_EXPOSURE\r\ncdmFieldName = device_exposure_start_date\r\nthresholdValueHigh = @thresholdValueHigh\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'DEVICE_EXPOSURE.device_exposure_start_date' AS violating_field, DEVICE_EXPOSURE.*\r\n    from cdm.DEVICE_EXPOSURE\r\n    where device_exposure_start_date > @thresholdValueHigh\r\n\t) violated_rows\r\n) violated_row_count,\r\n(\r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.DEVICE_EXPOSURE\r\n  where device_exposure_start_date is not null\r\n) denominator\r\n;\r\n","CATEGORY":"Plausibility","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: column \"thresholdvaluehigh\" does not exist in device_exposure;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":870,"QUERY_TEXT":"\r\n/*********\r\nPLAUSIBLE_VALUE_HIGH\r\nget number of records and the proportion to total number of eligible records that exceed this threshold\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = DEVICE_EXPOSURE\r\ncdmFieldName = device_exposure_start_datetime\r\nthresholdValueHigh = @thresholdValueHigh\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'DEVICE_EXPOSURE.device_exposure_start_datetime' AS violating_field, DEVICE_EXPOSURE.*\r\n    from cdm.DEVICE_EXPOSURE\r\n    where device_exposure_start_datetime > @thresholdValueHigh\r\n\t) violated_rows\r\n) violated_row_count,\r\n(\r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.DEVICE_EXPOSURE\r\n  where device_exposure_start_datetime is not null\r\n) denominator\r\n;\r\n","CATEGORY":"Plausibility","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: column \"thresholdvaluehigh\" does not exist in device_exposure;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":871,"QUERY_TEXT":"\r\n/*********\r\nPLAUSIBLE_VALUE_HIGH\r\nget number of records and the proportion to total number of eligible records that exceed this threshold\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = DEVICE_EXPOSURE\r\ncdmFieldName = device_exposure_end_date\r\nthresholdValueHigh = @thresholdValueHigh\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'DEVICE_EXPOSURE.device_exposure_end_date' AS violating_field, DEVICE_EXPOSURE.*\r\n    from cdm.DEVICE_EXPOSURE\r\n    where device_exposure_end_date > @thresholdValueHigh\r\n\t) violated_rows\r\n) violated_row_count,\r\n(\r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.DEVICE_EXPOSURE\r\n  where device_exposure_end_date is not null\r\n) denominator\r\n;\r\n","CATEGORY":"Plausibility","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: column \"thresholdvaluehigh\" does not exist in device_exposure;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":872,"QUERY_TEXT":"\r\n/*********\r\nPLAUSIBLE_VALUE_HIGH\r\nget number of records and the proportion to total number of eligible records that exceed this threshold\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = DEVICE_EXPOSURE\r\ncdmFieldName = device_exposure_end_datetime\r\nthresholdValueHigh = @thresholdValueHigh\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'DEVICE_EXPOSURE.device_exposure_end_datetime' AS violating_field, DEVICE_EXPOSURE.*\r\n    from cdm.DEVICE_EXPOSURE\r\n    where device_exposure_end_datetime > @thresholdValueHigh\r\n\t) violated_rows\r\n) violated_row_count,\r\n(\r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.DEVICE_EXPOSURE\r\n  where device_exposure_end_datetime is not null\r\n) denominator\r\n;\r\n","CATEGORY":"Plausibility","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: column \"thresholdvaluehigh\" does not exist in device_exposure;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":873,"QUERY_TEXT":"\r\n/*********\r\nPLAUSIBLE_VALUE_HIGH\r\nget number of records and the proportion to total number of eligible records that exceed this threshold\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = MEASUREMENT\r\ncdmFieldName = measurement_date\r\nthresholdValueHigh = @thresholdValueHigh\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'MEASUREMENT.measurement_date' AS violating_field, MEASUREMENT.*\r\n    from cdm.MEASUREMENT\r\n    where measurement_date > @thresholdValueHigh\r\n\t) violated_rows\r\n) violated_row_count,\r\n(\r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.MEASUREMENT\r\n  where measurement_date is not null\r\n) denominator\r\n;\r\n","CATEGORY":"Plausibility","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: column \"thresholdvaluehigh\" does not exist in measurement;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":874,"QUERY_TEXT":"\r\n/*********\r\nPLAUSIBLE_VALUE_HIGH\r\nget number of records and the proportion to total number of eligible records that exceed this threshold\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = VISIT_DETAIL\r\ncdmFieldName = visit_detail_start_date\r\nthresholdValueHigh = @thresholdValueHigh\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'VISIT_DETAIL.visit_detail_start_date' AS violating_field, VISIT_DETAIL.*\r\n    from cdm.VISIT_DETAIL\r\n    where visit_detail_start_date > @thresholdValueHigh\r\n\t) violated_rows\r\n) violated_row_count,\r\n(\r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.VISIT_DETAIL\r\n  where visit_detail_start_date is not null\r\n) denominator\r\n;\r\n","CATEGORY":"Plausibility","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: column \"thresholdvaluehigh\" does not exist in visit_detail;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":875,"QUERY_TEXT":"\r\n/*********\r\nPLAUSIBLE_VALUE_HIGH\r\nget number of records and the proportion to total number of eligible records that exceed this threshold\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = VISIT_DETAIL\r\ncdmFieldName = visit_detail_start_datetime\r\nthresholdValueHigh = @thresholdValueHigh\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'VISIT_DETAIL.visit_detail_start_datetime' AS violating_field, VISIT_DETAIL.*\r\n    from cdm.VISIT_DETAIL\r\n    where visit_detail_start_datetime > @thresholdValueHigh\r\n\t) violated_rows\r\n) violated_row_count,\r\n(\r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.VISIT_DETAIL\r\n  where visit_detail_start_datetime is not null\r\n) denominator\r\n;\r\n","CATEGORY":"Plausibility","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: column \"thresholdvaluehigh\" does not exist in visit_detail;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":876,"QUERY_TEXT":"\r\n/*********\r\nPLAUSIBLE_VALUE_HIGH\r\nget number of records and the proportion to total number of eligible records that exceed this threshold\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = VISIT_DETAIL\r\ncdmFieldName = visit_detail_end_date\r\nthresholdValueHigh = @thresholdValueHigh\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'VISIT_DETAIL.visit_detail_end_date' AS violating_field, VISIT_DETAIL.*\r\n    from cdm.VISIT_DETAIL\r\n    where visit_detail_end_date > @thresholdValueHigh\r\n\t) violated_rows\r\n) violated_row_count,\r\n(\r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.VISIT_DETAIL\r\n  where visit_detail_end_date is not null\r\n) denominator\r\n;\r\n","CATEGORY":"Plausibility","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: column \"thresholdvaluehigh\" does not exist in visit_detail;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":877,"QUERY_TEXT":"\r\n/*********\r\nPLAUSIBLE_VALUE_HIGH\r\nget number of records and the proportion to total number of eligible records that exceed this threshold\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = VISIT_DETAIL\r\ncdmFieldName = visit_detail_end_datetime\r\nthresholdValueHigh = @thresholdValueHigh\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'VISIT_DETAIL.visit_detail_end_datetime' AS violating_field, VISIT_DETAIL.*\r\n    from cdm.VISIT_DETAIL\r\n    where visit_detail_end_datetime > @thresholdValueHigh\r\n\t) violated_rows\r\n) violated_row_count,\r\n(\r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.VISIT_DETAIL\r\n  where visit_detail_end_datetime is not null\r\n) denominator\r\n;\r\n","CATEGORY":"Plausibility","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: column \"thresholdvaluehigh\" does not exist in visit_detail;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":878,"QUERY_TEXT":"\r\n/*********\r\nPLAUSIBLE_VALUE_HIGH\r\nget number of records and the proportion to total number of eligible records that exceed this threshold\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = NOTE\r\ncdmFieldName = note_date\r\nthresholdValueHigh = @thresholdValueHigh\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'NOTE.note_date' AS violating_field, NOTE.*\r\n    from cdm.NOTE\r\n    where note_date > @thresholdValueHigh\r\n\t) violated_rows\r\n) violated_row_count,\r\n(\r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.NOTE\r\n  where note_date is not null\r\n) denominator\r\n;\r\n","CATEGORY":"Plausibility","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: column \"thresholdvaluehigh\" does not exist in note;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":879,"QUERY_TEXT":"\r\n/*********\r\nPLAUSIBLE_VALUE_HIGH\r\nget number of records and the proportion to total number of eligible records that exceed this threshold\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = NOTE\r\ncdmFieldName = note_datetime\r\nthresholdValueHigh = @thresholdValueHigh\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'NOTE.note_datetime' AS violating_field, NOTE.*\r\n    from cdm.NOTE\r\n    where note_datetime > @thresholdValueHigh\r\n\t) violated_rows\r\n) violated_row_count,\r\n(\r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.NOTE\r\n  where note_datetime is not null\r\n) denominator\r\n;\r\n","CATEGORY":"Plausibility","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: column \"thresholdvaluehigh\" does not exist in note;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":880,"QUERY_TEXT":"\r\n/*********\r\nPLAUSIBLE_VALUE_HIGH\r\nget number of records and the proportion to total number of eligible records that exceed this threshold\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = NOTE_NLP\r\ncdmFieldName = nlp_datetime\r\nthresholdValueHigh = @thresholdValueHigh\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'NOTE_NLP.nlp_datetime' AS violating_field, NOTE_NLP.*\r\n    from cdm.NOTE_NLP\r\n    where nlp_datetime > @thresholdValueHigh\r\n\t) violated_rows\r\n) violated_row_count,\r\n(\r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.NOTE_NLP\r\n  where nlp_datetime is not null\r\n) denominator\r\n;\r\n","CATEGORY":"Plausibility","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: column \"thresholdvaluehigh\" does not exist in note_nlp;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":881,"QUERY_TEXT":"\r\n/*********\r\nPLAUSIBLE_VALUE_HIGH\r\nget number of records and the proportion to total number of eligible records that exceed this threshold\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = OBSERVATION\r\ncdmFieldName = observation_date\r\nthresholdValueHigh = @thresholdValueHigh\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'OBSERVATION.observation_date' AS violating_field, OBSERVATION.*\r\n    from cdm.OBSERVATION\r\n    where observation_date > @thresholdValueHigh\r\n\t) violated_rows\r\n) violated_row_count,\r\n(\r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.OBSERVATION\r\n  where observation_date is not null\r\n) denominator\r\n;\r\n","CATEGORY":"Plausibility","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: column \"thresholdvaluehigh\" does not exist in observation;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":882,"QUERY_TEXT":"\r\n/*********\r\nPLAUSIBLE_VALUE_HIGH\r\nget number of records and the proportion to total number of eligible records that exceed this threshold\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = OBSERVATION\r\ncdmFieldName = observation_datetime\r\nthresholdValueHigh = @thresholdValueHigh\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'OBSERVATION.observation_datetime' AS violating_field, OBSERVATION.*\r\n    from cdm.OBSERVATION\r\n    where observation_datetime > @thresholdValueHigh\r\n\t) violated_rows\r\n) violated_row_count,\r\n(\r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.OBSERVATION\r\n  where observation_datetime is not null\r\n) denominator\r\n;\r\n","CATEGORY":"Plausibility","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: column \"thresholdvaluehigh\" does not exist in observation;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":883,"QUERY_TEXT":"\r\n/*********\r\nPLAUSIBLE_VALUE_HIGH\r\nget number of records and the proportion to total number of eligible records that exceed this threshold\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = SPECIMEN\r\ncdmFieldName = specimen_date\r\nthresholdValueHigh = @thresholdValueHigh\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'SPECIMEN.specimen_date' AS violating_field, SPECIMEN.*\r\n    from cdm.SPECIMEN\r\n    where specimen_date > @thresholdValueHigh\r\n\t) violated_rows\r\n) violated_row_count,\r\n(\r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.SPECIMEN\r\n  where specimen_date is not null\r\n) denominator\r\n;\r\n","CATEGORY":"Plausibility","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: column \"thresholdvaluehigh\" does not exist in specimen;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":884,"QUERY_TEXT":"\r\n/*********\r\nPLAUSIBLE_VALUE_HIGH\r\nget number of records and the proportion to total number of eligible records that exceed this threshold\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = SPECIMEN\r\ncdmFieldName = specimen_datetime\r\nthresholdValueHigh = @thresholdValueHigh\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'SPECIMEN.specimen_datetime' AS violating_field, SPECIMEN.*\r\n    from cdm.SPECIMEN\r\n    where specimen_datetime > @thresholdValueHigh\r\n\t) violated_rows\r\n) violated_row_count,\r\n(\r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.SPECIMEN\r\n  where specimen_datetime is not null\r\n) denominator\r\n;\r\n","CATEGORY":"Plausibility","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: column \"thresholdvaluehigh\" does not exist in specimen;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":885,"QUERY_TEXT":"\r\n/*********\r\nPLAUSIBLE_VALUE_HIGH\r\nget number of records and the proportion to total number of eligible records that exceed this threshold\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = COST\r\ncdmFieldName = paid_dispensing_fee\r\nthresholdValueHigh = @thresholdValueHigh\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'COST.paid_dispensing_fee' AS violating_field, COST.*\r\n    from cdm.COST\r\n    where paid_dispensing_fee > @thresholdValueHigh\r\n\t) violated_rows\r\n) violated_row_count,\r\n(\r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.COST\r\n  where paid_dispensing_fee is not null\r\n) denominator\r\n;\r\n","CATEGORY":"Plausibility","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: column \"thresholdvaluehigh\" does not exist in cost;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":886,"QUERY_TEXT":"\r\n/*********\r\nPLAUSIBLE_VALUE_HIGH\r\nget number of records and the proportion to total number of eligible records that exceed this threshold\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = COST\r\ncdmFieldName = payer_plan_period_id\r\nthresholdValueHigh = @thresholdValueHigh\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'COST.payer_plan_period_id' AS violating_field, COST.*\r\n    from cdm.COST\r\n    where payer_plan_period_id > @thresholdValueHigh\r\n\t) violated_rows\r\n) violated_row_count,\r\n(\r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.COST\r\n  where payer_plan_period_id is not null\r\n) denominator\r\n;\r\n","CATEGORY":"Plausibility","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: column \"thresholdvaluehigh\" does not exist in cost;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":887,"QUERY_TEXT":"\r\n/*********\r\nPLAUSIBLE_VALUE_HIGH\r\nget number of records and the proportion to total number of eligible records that exceed this threshold\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = DRUG_ERA\r\ncdmFieldName = drug_era_start_date\r\nthresholdValueHigh = @thresholdValueHigh\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'DRUG_ERA.drug_era_start_date' AS violating_field, DRUG_ERA.*\r\n    from cdm.DRUG_ERA\r\n    where drug_era_start_date > @thresholdValueHigh\r\n\t) violated_rows\r\n) violated_row_count,\r\n(\r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.DRUG_ERA\r\n  where drug_era_start_date is not null\r\n) denominator\r\n;\r\n","CATEGORY":"Plausibility","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: column \"thresholdvaluehigh\" does not exist in drug_era;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":888,"QUERY_TEXT":"\r\n/*********\r\nPLAUSIBLE_VALUE_HIGH\r\nget number of records and the proportion to total number of eligible records that exceed this threshold\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = DRUG_ERA\r\ncdmFieldName = drug_era_end_date\r\nthresholdValueHigh = @thresholdValueHigh\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'DRUG_ERA.drug_era_end_date' AS violating_field, DRUG_ERA.*\r\n    from cdm.DRUG_ERA\r\n    where drug_era_end_date > @thresholdValueHigh\r\n\t) violated_rows\r\n) violated_row_count,\r\n(\r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.DRUG_ERA\r\n  where drug_era_end_date is not null\r\n) denominator\r\n;\r\n","CATEGORY":"Plausibility","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: column \"thresholdvaluehigh\" does not exist in drug_era;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":889,"QUERY_TEXT":"\r\n/*********\r\nPLAUSIBLE_VALUE_HIGH\r\nget number of records and the proportion to total number of eligible records that exceed this threshold\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = DOSE_ERA\r\ncdmFieldName = dose_era_start_date\r\nthresholdValueHigh = @thresholdValueHigh\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'DOSE_ERA.dose_era_start_date' AS violating_field, DOSE_ERA.*\r\n    from cdm.DOSE_ERA\r\n    where dose_era_start_date > @thresholdValueHigh\r\n\t) violated_rows\r\n) violated_row_count,\r\n(\r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.DOSE_ERA\r\n  where dose_era_start_date is not null\r\n) denominator\r\n;\r\n","CATEGORY":"Plausibility","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: column \"thresholdvaluehigh\" does not exist in dose_era;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":890,"QUERY_TEXT":"\r\n/*********\r\nPLAUSIBLE_VALUE_HIGH\r\nget number of records and the proportion to total number of eligible records that exceed this threshold\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = DOSE_ERA\r\ncdmFieldName = dose_era_end_date\r\nthresholdValueHigh = @thresholdValueHigh\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'DOSE_ERA.dose_era_end_date' AS violating_field, DOSE_ERA.*\r\n    from cdm.DOSE_ERA\r\n    where dose_era_end_date > @thresholdValueHigh\r\n\t) violated_rows\r\n) violated_row_count,\r\n(\r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.DOSE_ERA\r\n  where dose_era_end_date is not null\r\n) denominator\r\n;\r\n","CATEGORY":"Plausibility","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: column \"thresholdvaluehigh\" does not exist in dose_era;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":891,"QUERY_TEXT":"\r\n/*********\r\nPLAUSIBLE_VALUE_HIGH\r\nget number of records and the proportion to total number of eligible records that exceed this threshold\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = CONDITION_ERA\r\ncdmFieldName = condition_era_start_date\r\nthresholdValueHigh = @thresholdValueHigh\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'CONDITION_ERA.condition_era_start_date' AS violating_field, CONDITION_ERA.*\r\n    from cdm.CONDITION_ERA\r\n    where condition_era_start_date > @thresholdValueHigh\r\n\t) violated_rows\r\n) violated_row_count,\r\n(\r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.CONDITION_ERA\r\n  where condition_era_start_date is not null\r\n) denominator\r\n;\r\n","CATEGORY":"Plausibility","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: column \"thresholdvaluehigh\" does not exist in condition_era;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":892,"QUERY_TEXT":"\r\n/*********\r\nPLAUSIBLE_VALUE_HIGH\r\nget number of records and the proportion to total number of eligible records that exceed this threshold\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = CONDITION_ERA\r\ncdmFieldName = condition_era_end_date\r\nthresholdValueHigh = @thresholdValueHigh\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'CONDITION_ERA.condition_era_end_date' AS violating_field, CONDITION_ERA.*\r\n    from cdm.CONDITION_ERA\r\n    where condition_era_end_date > @thresholdValueHigh\r\n\t) violated_rows\r\n) violated_row_count,\r\n(\r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.CONDITION_ERA\r\n  where condition_era_end_date is not null\r\n) denominator\r\n;\r\n","CATEGORY":"Plausibility","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: column \"thresholdvaluehigh\" does not exist in condition_era;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":893,"QUERY_TEXT":"\r\n/*********\r\nPLAUSIBLE_TEMPORAL_AFTER\r\nget number of records and the proportion to total number of eligible records with datetimes that do not occur on or after their corresponding datetimes\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = OBSERVATION_PERIOD\r\ncdmFieldName = observation_period_start_date\r\ntemoralComparatorTableName = @temoralComparatorTableName\r\ntemporalComparatorFieldName = @temporalComparatorFieldName\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'OBSERVATION_PERIOD.observation_period_start_date' AS violating_field, OBSERVATION_PERIOD.*\r\n    from cdm.OBSERVATION_PERIOD\r\n\t\tjoin cdm.@temoralComparatorTableName\r\n\t\t\ton cdm.OBSERVATION_PERIOD.person_id = cdm.@temoralComparatorTableName.person_id\r\n    where @temporalComparatorFieldName > observation_period_start_date\r\n\t) violated_rows\r\n) violated_row_count,\r\n(\r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.OBSERVATION_PERIOD\r\n) denominator\r\n;\r\n","CATEGORY":"Plausibility","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: syntax error at or near \"@\" \nPosition: 377;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":894,"QUERY_TEXT":"\r\n/*********\r\nPLAUSIBLE_TEMPORAL_AFTER\r\nget number of records and the proportion to total number of eligible records with datetimes that do not occur on or after their corresponding datetimes\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = OBSERVATION_PERIOD\r\ncdmFieldName = observation_period_end_date\r\ntemoralComparatorTableName = @temoralComparatorTableName\r\ntemporalComparatorFieldName = @temporalComparatorFieldName\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'OBSERVATION_PERIOD.observation_period_end_date' AS violating_field, OBSERVATION_PERIOD.*\r\n    from cdm.OBSERVATION_PERIOD\r\n\t\tjoin cdm.@temoralComparatorTableName\r\n\t\t\ton cdm.OBSERVATION_PERIOD.person_id = cdm.@temoralComparatorTableName.person_id\r\n    where @temporalComparatorFieldName > observation_period_end_date\r\n\t) violated_rows\r\n) violated_row_count,\r\n(\r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.OBSERVATION_PERIOD\r\n) denominator\r\n;\r\n","CATEGORY":"Plausibility","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: syntax error at or near \"@\" \nPosition: 375;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":895,"QUERY_TEXT":"\r\n/*********\r\nPLAUSIBLE_TEMPORAL_AFTER\r\nget number of records and the proportion to total number of eligible records with datetimes that do not occur on or after their corresponding datetimes\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = VISIT_OCCURRENCE\r\ncdmFieldName = visit_start_date\r\ntemoralComparatorTableName = @temoralComparatorTableName\r\ntemporalComparatorFieldName = @temporalComparatorFieldName\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'VISIT_OCCURRENCE.visit_start_date' AS violating_field, VISIT_OCCURRENCE.*\r\n    from cdm.VISIT_OCCURRENCE\r\n\t\tjoin cdm.@temoralComparatorTableName\r\n\t\t\ton cdm.VISIT_OCCURRENCE.person_id = cdm.@temoralComparatorTableName.person_id\r\n    where @temporalComparatorFieldName > visit_start_date\r\n\t) violated_rows\r\n) violated_row_count,\r\n(\r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.VISIT_OCCURRENCE\r\n) denominator\r\n;\r\n","CATEGORY":"Plausibility","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: syntax error at or near \"@\" \nPosition: 358;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":896,"QUERY_TEXT":"\r\n/*********\r\nPLAUSIBLE_TEMPORAL_AFTER\r\nget number of records and the proportion to total number of eligible records with datetimes that do not occur on or after their corresponding datetimes\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = VISIT_OCCURRENCE\r\ncdmFieldName = visit_start_datetime\r\ntemoralComparatorTableName = @temoralComparatorTableName\r\ntemporalComparatorFieldName = @temporalComparatorFieldName\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'VISIT_OCCURRENCE.visit_start_datetime' AS violating_field, VISIT_OCCURRENCE.*\r\n    from cdm.VISIT_OCCURRENCE\r\n\t\tjoin cdm.@temoralComparatorTableName\r\n\t\t\ton cdm.VISIT_OCCURRENCE.person_id = cdm.@temoralComparatorTableName.person_id\r\n    where @temporalComparatorFieldName > visit_start_datetime\r\n\t) violated_rows\r\n) violated_row_count,\r\n(\r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.VISIT_OCCURRENCE\r\n) denominator\r\n;\r\n","CATEGORY":"Plausibility","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: syntax error at or near \"@\" \nPosition: 362;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":897,"QUERY_TEXT":"\r\n/*********\r\nPLAUSIBLE_TEMPORAL_AFTER\r\nget number of records and the proportion to total number of eligible records with datetimes that do not occur on or after their corresponding datetimes\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = VISIT_OCCURRENCE\r\ncdmFieldName = visit_end_date\r\ntemoralComparatorTableName = @temoralComparatorTableName\r\ntemporalComparatorFieldName = @temporalComparatorFieldName\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'VISIT_OCCURRENCE.visit_end_date' AS violating_field, VISIT_OCCURRENCE.*\r\n    from cdm.VISIT_OCCURRENCE\r\n\t\tjoin cdm.@temoralComparatorTableName\r\n\t\t\ton cdm.VISIT_OCCURRENCE.person_id = cdm.@temoralComparatorTableName.person_id\r\n    where @temporalComparatorFieldName > visit_end_date\r\n\t) violated_rows\r\n) violated_row_count,\r\n(\r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.VISIT_OCCURRENCE\r\n) denominator\r\n;\r\n","CATEGORY":"Plausibility","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: syntax error at or near \"@\" \nPosition: 356;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":898,"QUERY_TEXT":"\r\n/*********\r\nPLAUSIBLE_TEMPORAL_AFTER\r\nget number of records and the proportion to total number of eligible records with datetimes that do not occur on or after their corresponding datetimes\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = VISIT_OCCURRENCE\r\ncdmFieldName = visit_end_datetime\r\ntemoralComparatorTableName = @temoralComparatorTableName\r\ntemporalComparatorFieldName = @temporalComparatorFieldName\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'VISIT_OCCURRENCE.visit_end_datetime' AS violating_field, VISIT_OCCURRENCE.*\r\n    from cdm.VISIT_OCCURRENCE\r\n\t\tjoin cdm.@temoralComparatorTableName\r\n\t\t\ton cdm.VISIT_OCCURRENCE.person_id = cdm.@temoralComparatorTableName.person_id\r\n    where @temporalComparatorFieldName > visit_end_datetime\r\n\t) violated_rows\r\n) violated_row_count,\r\n(\r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.VISIT_OCCURRENCE\r\n) denominator\r\n;\r\n","CATEGORY":"Plausibility","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: syntax error at or near \"@\" \nPosition: 360;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":899,"QUERY_TEXT":"\r\n/*********\r\nPLAUSIBLE_TEMPORAL_AFTER\r\nget number of records and the proportion to total number of eligible records with datetimes that do not occur on or after their corresponding datetimes\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = CONDITION_OCCURRENCE\r\ncdmFieldName = condition_start_date\r\ntemoralComparatorTableName = @temoralComparatorTableName\r\ntemporalComparatorFieldName = @temporalComparatorFieldName\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'CONDITION_OCCURRENCE.condition_start_date' AS violating_field, CONDITION_OCCURRENCE.*\r\n    from cdm.CONDITION_OCCURRENCE\r\n\t\tjoin cdm.@temoralComparatorTableName\r\n\t\t\ton cdm.CONDITION_OCCURRENCE.person_id = cdm.@temoralComparatorTableName.person_id\r\n    where @temporalComparatorFieldName > condition_start_date\r\n\t) violated_rows\r\n) violated_row_count,\r\n(\r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.CONDITION_OCCURRENCE\r\n) denominator\r\n;\r\n","CATEGORY":"Plausibility","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: syntax error at or near \"@\" \nPosition: 374;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":900,"QUERY_TEXT":"\r\n/*********\r\nPLAUSIBLE_TEMPORAL_AFTER\r\nget number of records and the proportion to total number of eligible records with datetimes that do not occur on or after their corresponding datetimes\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = CONDITION_OCCURRENCE\r\ncdmFieldName = condition_start_datetime\r\ntemoralComparatorTableName = @temoralComparatorTableName\r\ntemporalComparatorFieldName = @temporalComparatorFieldName\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'CONDITION_OCCURRENCE.condition_start_datetime' AS violating_field, CONDITION_OCCURRENCE.*\r\n    from cdm.CONDITION_OCCURRENCE\r\n\t\tjoin cdm.@temoralComparatorTableName\r\n\t\t\ton cdm.CONDITION_OCCURRENCE.person_id = cdm.@temoralComparatorTableName.person_id\r\n    where @temporalComparatorFieldName > condition_start_datetime\r\n\t) violated_rows\r\n) violated_row_count,\r\n(\r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.CONDITION_OCCURRENCE\r\n) denominator\r\n;\r\n","CATEGORY":"Plausibility","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: syntax error at or near \"@\" \nPosition: 378;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":901,"QUERY_TEXT":"\r\n/*********\r\nPLAUSIBLE_TEMPORAL_AFTER\r\nget number of records and the proportion to total number of eligible records with datetimes that do not occur on or after their corresponding datetimes\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = CONDITION_OCCURRENCE\r\ncdmFieldName = condition_end_date\r\ntemoralComparatorTableName = @temoralComparatorTableName\r\ntemporalComparatorFieldName = @temporalComparatorFieldName\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'CONDITION_OCCURRENCE.condition_end_date' AS violating_field, CONDITION_OCCURRENCE.*\r\n    from cdm.CONDITION_OCCURRENCE\r\n\t\tjoin cdm.@temoralComparatorTableName\r\n\t\t\ton cdm.CONDITION_OCCURRENCE.person_id = cdm.@temoralComparatorTableName.person_id\r\n    where @temporalComparatorFieldName > condition_end_date\r\n\t) violated_rows\r\n) violated_row_count,\r\n(\r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.CONDITION_OCCURRENCE\r\n) denominator\r\n;\r\n","CATEGORY":"Plausibility","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: syntax error at or near \"@\" \nPosition: 372;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":902,"QUERY_TEXT":"\r\n/*********\r\nPLAUSIBLE_TEMPORAL_AFTER\r\nget number of records and the proportion to total number of eligible records with datetimes that do not occur on or after their corresponding datetimes\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = CONDITION_OCCURRENCE\r\ncdmFieldName = condition_end_datetime\r\ntemoralComparatorTableName = @temoralComparatorTableName\r\ntemporalComparatorFieldName = @temporalComparatorFieldName\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'CONDITION_OCCURRENCE.condition_end_datetime' AS violating_field, CONDITION_OCCURRENCE.*\r\n    from cdm.CONDITION_OCCURRENCE\r\n\t\tjoin cdm.@temoralComparatorTableName\r\n\t\t\ton cdm.CONDITION_OCCURRENCE.person_id = cdm.@temoralComparatorTableName.person_id\r\n    where @temporalComparatorFieldName > condition_end_datetime\r\n\t) violated_rows\r\n) violated_row_count,\r\n(\r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.CONDITION_OCCURRENCE\r\n) denominator\r\n;\r\n","CATEGORY":"Plausibility","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: syntax error at or near \"@\" \nPosition: 376;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":903,"QUERY_TEXT":"\r\n/*********\r\nPLAUSIBLE_TEMPORAL_AFTER\r\nget number of records and the proportion to total number of eligible records with datetimes that do not occur on or after their corresponding datetimes\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = DRUG_EXPOSURE\r\ncdmFieldName = drug_exposure_start_date\r\ntemoralComparatorTableName = @temoralComparatorTableName\r\ntemporalComparatorFieldName = @temporalComparatorFieldName\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'DRUG_EXPOSURE.drug_exposure_start_date' AS violating_field, DRUG_EXPOSURE.*\r\n    from cdm.DRUG_EXPOSURE\r\n\t\tjoin cdm.@temoralComparatorTableName\r\n\t\t\ton cdm.DRUG_EXPOSURE.person_id = cdm.@temoralComparatorTableName.person_id\r\n    where @temporalComparatorFieldName > drug_exposure_start_date\r\n\t) violated_rows\r\n) violated_row_count,\r\n(\r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.DRUG_EXPOSURE\r\n) denominator\r\n;\r\n","CATEGORY":"Plausibility","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: syntax error at or near \"@\" \nPosition: 357;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":904,"QUERY_TEXT":"\r\n/*********\r\nPLAUSIBLE_TEMPORAL_AFTER\r\nget number of records and the proportion to total number of eligible records with datetimes that do not occur on or after their corresponding datetimes\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = DRUG_EXPOSURE\r\ncdmFieldName = drug_exposure_start_datetime\r\ntemoralComparatorTableName = @temoralComparatorTableName\r\ntemporalComparatorFieldName = @temporalComparatorFieldName\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'DRUG_EXPOSURE.drug_exposure_start_datetime' AS violating_field, DRUG_EXPOSURE.*\r\n    from cdm.DRUG_EXPOSURE\r\n\t\tjoin cdm.@temoralComparatorTableName\r\n\t\t\ton cdm.DRUG_EXPOSURE.person_id = cdm.@temoralComparatorTableName.person_id\r\n    where @temporalComparatorFieldName > drug_exposure_start_datetime\r\n\t) violated_rows\r\n) violated_row_count,\r\n(\r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.DRUG_EXPOSURE\r\n) denominator\r\n;\r\n","CATEGORY":"Plausibility","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: syntax error at or near \"@\" \nPosition: 361;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":905,"QUERY_TEXT":"\r\n/*********\r\nPLAUSIBLE_TEMPORAL_AFTER\r\nget number of records and the proportion to total number of eligible records with datetimes that do not occur on or after their corresponding datetimes\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = DRUG_EXPOSURE\r\ncdmFieldName = drug_exposure_end_date\r\ntemoralComparatorTableName = @temoralComparatorTableName\r\ntemporalComparatorFieldName = @temporalComparatorFieldName\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'DRUG_EXPOSURE.drug_exposure_end_date' AS violating_field, DRUG_EXPOSURE.*\r\n    from cdm.DRUG_EXPOSURE\r\n\t\tjoin cdm.@temoralComparatorTableName\r\n\t\t\ton cdm.DRUG_EXPOSURE.person_id = cdm.@temoralComparatorTableName.person_id\r\n    where @temporalComparatorFieldName > drug_exposure_end_date\r\n\t) violated_rows\r\n) violated_row_count,\r\n(\r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.DRUG_EXPOSURE\r\n) denominator\r\n;\r\n","CATEGORY":"Plausibility","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: syntax error at or near \"@\" \nPosition: 355;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":906,"QUERY_TEXT":"\r\n/*********\r\nPLAUSIBLE_TEMPORAL_AFTER\r\nget number of records and the proportion to total number of eligible records with datetimes that do not occur on or after their corresponding datetimes\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = DRUG_EXPOSURE\r\ncdmFieldName = drug_exposure_end_datetime\r\ntemoralComparatorTableName = @temoralComparatorTableName\r\ntemporalComparatorFieldName = @temporalComparatorFieldName\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'DRUG_EXPOSURE.drug_exposure_end_datetime' AS violating_field, DRUG_EXPOSURE.*\r\n    from cdm.DRUG_EXPOSURE\r\n\t\tjoin cdm.@temoralComparatorTableName\r\n\t\t\ton cdm.DRUG_EXPOSURE.person_id = cdm.@temoralComparatorTableName.person_id\r\n    where @temporalComparatorFieldName > drug_exposure_end_datetime\r\n\t) violated_rows\r\n) violated_row_count,\r\n(\r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.DRUG_EXPOSURE\r\n) denominator\r\n;\r\n","CATEGORY":"Plausibility","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: syntax error at or near \"@\" \nPosition: 359;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":907,"QUERY_TEXT":"\r\n/*********\r\nPLAUSIBLE_TEMPORAL_AFTER\r\nget number of records and the proportion to total number of eligible records with datetimes that do not occur on or after their corresponding datetimes\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = DRUG_EXPOSURE\r\ncdmFieldName = verbatim_end_date\r\ntemoralComparatorTableName = @temoralComparatorTableName\r\ntemporalComparatorFieldName = @temporalComparatorFieldName\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'DRUG_EXPOSURE.verbatim_end_date' AS violating_field, DRUG_EXPOSURE.*\r\n    from cdm.DRUG_EXPOSURE\r\n\t\tjoin cdm.@temoralComparatorTableName\r\n\t\t\ton cdm.DRUG_EXPOSURE.person_id = cdm.@temoralComparatorTableName.person_id\r\n    where @temporalComparatorFieldName > verbatim_end_date\r\n\t) violated_rows\r\n) violated_row_count,\r\n(\r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.DRUG_EXPOSURE\r\n) denominator\r\n;\r\n","CATEGORY":"Plausibility","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: syntax error at or near \"@\" \nPosition: 350;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":908,"QUERY_TEXT":"\r\n/*********\r\nPLAUSIBLE_TEMPORAL_AFTER\r\nget number of records and the proportion to total number of eligible records with datetimes that do not occur on or after their corresponding datetimes\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = PROCEDURE_OCCURRENCE\r\ncdmFieldName = procedure_date\r\ntemoralComparatorTableName = @temoralComparatorTableName\r\ntemporalComparatorFieldName = @temporalComparatorFieldName\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'PROCEDURE_OCCURRENCE.procedure_date' AS violating_field, PROCEDURE_OCCURRENCE.*\r\n    from cdm.PROCEDURE_OCCURRENCE\r\n\t\tjoin cdm.@temoralComparatorTableName\r\n\t\t\ton cdm.PROCEDURE_OCCURRENCE.person_id = cdm.@temoralComparatorTableName.person_id\r\n    where @temporalComparatorFieldName > procedure_date\r\n\t) violated_rows\r\n) violated_row_count,\r\n(\r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.PROCEDURE_OCCURRENCE\r\n) denominator\r\n;\r\n","CATEGORY":"Plausibility","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: syntax error at or near \"@\" \nPosition: 368;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":909,"QUERY_TEXT":"\r\n/*********\r\nPLAUSIBLE_TEMPORAL_AFTER\r\nget number of records and the proportion to total number of eligible records with datetimes that do not occur on or after their corresponding datetimes\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = PROCEDURE_OCCURRENCE\r\ncdmFieldName = procedure_datetime\r\ntemoralComparatorTableName = @temoralComparatorTableName\r\ntemporalComparatorFieldName = @temporalComparatorFieldName\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'PROCEDURE_OCCURRENCE.procedure_datetime' AS violating_field, PROCEDURE_OCCURRENCE.*\r\n    from cdm.PROCEDURE_OCCURRENCE\r\n\t\tjoin cdm.@temoralComparatorTableName\r\n\t\t\ton cdm.PROCEDURE_OCCURRENCE.person_id = cdm.@temoralComparatorTableName.person_id\r\n    where @temporalComparatorFieldName > procedure_datetime\r\n\t) violated_rows\r\n) violated_row_count,\r\n(\r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.PROCEDURE_OCCURRENCE\r\n) denominator\r\n;\r\n","CATEGORY":"Plausibility","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: syntax error at or near \"@\" \nPosition: 372;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":910,"QUERY_TEXT":"\r\n/*********\r\nPLAUSIBLE_TEMPORAL_AFTER\r\nget number of records and the proportion to total number of eligible records with datetimes that do not occur on or after their corresponding datetimes\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = DEVICE_EXPOSURE\r\ncdmFieldName = device_exposure_start_date\r\ntemoralComparatorTableName = @temoralComparatorTableName\r\ntemporalComparatorFieldName = @temporalComparatorFieldName\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'DEVICE_EXPOSURE.device_exposure_start_date' AS violating_field, DEVICE_EXPOSURE.*\r\n    from cdm.DEVICE_EXPOSURE\r\n\t\tjoin cdm.@temoralComparatorTableName\r\n\t\t\ton cdm.DEVICE_EXPOSURE.person_id = cdm.@temoralComparatorTableName.person_id\r\n    where @temporalComparatorFieldName > device_exposure_start_date\r\n\t) violated_rows\r\n) violated_row_count,\r\n(\r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.DEVICE_EXPOSURE\r\n) denominator\r\n;\r\n","CATEGORY":"Plausibility","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: syntax error at or near \"@\" \nPosition: 365;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":911,"QUERY_TEXT":"\r\n/*********\r\nPLAUSIBLE_TEMPORAL_AFTER\r\nget number of records and the proportion to total number of eligible records with datetimes that do not occur on or after their corresponding datetimes\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = DEVICE_EXPOSURE\r\ncdmFieldName = device_exposure_start_datetime\r\ntemoralComparatorTableName = @temoralComparatorTableName\r\ntemporalComparatorFieldName = @temporalComparatorFieldName\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'DEVICE_EXPOSURE.device_exposure_start_datetime' AS violating_field, DEVICE_EXPOSURE.*\r\n    from cdm.DEVICE_EXPOSURE\r\n\t\tjoin cdm.@temoralComparatorTableName\r\n\t\t\ton cdm.DEVICE_EXPOSURE.person_id = cdm.@temoralComparatorTableName.person_id\r\n    where @temporalComparatorFieldName > device_exposure_start_datetime\r\n\t) violated_rows\r\n) violated_row_count,\r\n(\r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.DEVICE_EXPOSURE\r\n) denominator\r\n;\r\n","CATEGORY":"Plausibility","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: syntax error at or near \"@\" \nPosition: 369;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":912,"QUERY_TEXT":"\r\n/*********\r\nPLAUSIBLE_TEMPORAL_AFTER\r\nget number of records and the proportion to total number of eligible records with datetimes that do not occur on or after their corresponding datetimes\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = DEVICE_EXPOSURE\r\ncdmFieldName = device_exposure_end_date\r\ntemoralComparatorTableName = @temoralComparatorTableName\r\ntemporalComparatorFieldName = @temporalComparatorFieldName\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'DEVICE_EXPOSURE.device_exposure_end_date' AS violating_field, DEVICE_EXPOSURE.*\r\n    from cdm.DEVICE_EXPOSURE\r\n\t\tjoin cdm.@temoralComparatorTableName\r\n\t\t\ton cdm.DEVICE_EXPOSURE.person_id = cdm.@temoralComparatorTableName.person_id\r\n    where @temporalComparatorFieldName > device_exposure_end_date\r\n\t) violated_rows\r\n) violated_row_count,\r\n(\r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.DEVICE_EXPOSURE\r\n) denominator\r\n;\r\n","CATEGORY":"Plausibility","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: syntax error at or near \"@\" \nPosition: 363;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":913,"QUERY_TEXT":"\r\n/*********\r\nPLAUSIBLE_TEMPORAL_AFTER\r\nget number of records and the proportion to total number of eligible records with datetimes that do not occur on or after their corresponding datetimes\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = DEVICE_EXPOSURE\r\ncdmFieldName = device_exposure_end_datetime\r\ntemoralComparatorTableName = @temoralComparatorTableName\r\ntemporalComparatorFieldName = @temporalComparatorFieldName\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'DEVICE_EXPOSURE.device_exposure_end_datetime' AS violating_field, DEVICE_EXPOSURE.*\r\n    from cdm.DEVICE_EXPOSURE\r\n\t\tjoin cdm.@temoralComparatorTableName\r\n\t\t\ton cdm.DEVICE_EXPOSURE.person_id = cdm.@temoralComparatorTableName.person_id\r\n    where @temporalComparatorFieldName > device_exposure_end_datetime\r\n\t) violated_rows\r\n) violated_row_count,\r\n(\r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.DEVICE_EXPOSURE\r\n) denominator\r\n;\r\n","CATEGORY":"Plausibility","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: syntax error at or near \"@\" \nPosition: 367;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":914,"QUERY_TEXT":"\r\n/*********\r\nPLAUSIBLE_TEMPORAL_AFTER\r\nget number of records and the proportion to total number of eligible records with datetimes that do not occur on or after their corresponding datetimes\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = VISIT_DETAIL\r\ncdmFieldName = visit_detail_start_date\r\ntemoralComparatorTableName = @temoralComparatorTableName\r\ntemporalComparatorFieldName = @temporalComparatorFieldName\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'VISIT_DETAIL.visit_detail_start_date' AS violating_field, VISIT_DETAIL.*\r\n    from cdm.VISIT_DETAIL\r\n\t\tjoin cdm.@temoralComparatorTableName\r\n\t\t\ton cdm.VISIT_DETAIL.person_id = cdm.@temoralComparatorTableName.person_id\r\n    where @temporalComparatorFieldName > visit_detail_start_date\r\n\t) violated_rows\r\n) violated_row_count,\r\n(\r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.VISIT_DETAIL\r\n) denominator\r\n;\r\n","CATEGORY":"Plausibility","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: syntax error at or near \"@\" \nPosition: 353;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":915,"QUERY_TEXT":"\r\n/*********\r\nPLAUSIBLE_TEMPORAL_AFTER\r\nget number of records and the proportion to total number of eligible records with datetimes that do not occur on or after their corresponding datetimes\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = VISIT_DETAIL\r\ncdmFieldName = visit_detail_start_datetime\r\ntemoralComparatorTableName = @temoralComparatorTableName\r\ntemporalComparatorFieldName = @temporalComparatorFieldName\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'VISIT_DETAIL.visit_detail_start_datetime' AS violating_field, VISIT_DETAIL.*\r\n    from cdm.VISIT_DETAIL\r\n\t\tjoin cdm.@temoralComparatorTableName\r\n\t\t\ton cdm.VISIT_DETAIL.person_id = cdm.@temoralComparatorTableName.person_id\r\n    where @temporalComparatorFieldName > visit_detail_start_datetime\r\n\t) violated_rows\r\n) violated_row_count,\r\n(\r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.VISIT_DETAIL\r\n) denominator\r\n;\r\n","CATEGORY":"Plausibility","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: syntax error at or near \"@\" \nPosition: 357;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":916,"QUERY_TEXT":"\r\n/*********\r\nPLAUSIBLE_TEMPORAL_AFTER\r\nget number of records and the proportion to total number of eligible records with datetimes that do not occur on or after their corresponding datetimes\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = VISIT_DETAIL\r\ncdmFieldName = visit_detail_end_date\r\ntemoralComparatorTableName = @temoralComparatorTableName\r\ntemporalComparatorFieldName = @temporalComparatorFieldName\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'VISIT_DETAIL.visit_detail_end_date' AS violating_field, VISIT_DETAIL.*\r\n    from cdm.VISIT_DETAIL\r\n\t\tjoin cdm.@temoralComparatorTableName\r\n\t\t\ton cdm.VISIT_DETAIL.person_id = cdm.@temoralComparatorTableName.person_id\r\n    where @temporalComparatorFieldName > visit_detail_end_date\r\n\t) violated_rows\r\n) violated_row_count,\r\n(\r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.VISIT_DETAIL\r\n) denominator\r\n;\r\n","CATEGORY":"Plausibility","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: syntax error at or near \"@\" \nPosition: 351;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":917,"QUERY_TEXT":"\r\n/*********\r\nPLAUSIBLE_TEMPORAL_AFTER\r\nget number of records and the proportion to total number of eligible records with datetimes that do not occur on or after their corresponding datetimes\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = VISIT_DETAIL\r\ncdmFieldName = visit_detail_end_datetime\r\ntemoralComparatorTableName = @temoralComparatorTableName\r\ntemporalComparatorFieldName = @temporalComparatorFieldName\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'VISIT_DETAIL.visit_detail_end_datetime' AS violating_field, VISIT_DETAIL.*\r\n    from cdm.VISIT_DETAIL\r\n\t\tjoin cdm.@temoralComparatorTableName\r\n\t\t\ton cdm.VISIT_DETAIL.person_id = cdm.@temoralComparatorTableName.person_id\r\n    where @temporalComparatorFieldName > visit_detail_end_datetime\r\n\t) violated_rows\r\n) violated_row_count,\r\n(\r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.VISIT_DETAIL\r\n) denominator\r\n;\r\n","CATEGORY":"Plausibility","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: syntax error at or near \"@\" \nPosition: 355;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":918,"QUERY_TEXT":"\r\n/*********\r\nPLAUSIBLE_TEMPORAL_AFTER\r\nget number of records and the proportion to total number of eligible records with datetimes that do not occur on or after their corresponding datetimes\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = NOTE\r\ncdmFieldName = note_date\r\ntemoralComparatorTableName = @temoralComparatorTableName\r\ntemporalComparatorFieldName = @temporalComparatorFieldName\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'NOTE.note_date' AS violating_field, NOTE.*\r\n    from cdm.NOTE\r\n\t\tjoin cdm.@temoralComparatorTableName\r\n\t\t\ton cdm.NOTE.person_id = cdm.@temoralComparatorTableName.person_id\r\n    where @temporalComparatorFieldName > note_date\r\n\t) violated_rows\r\n) violated_row_count,\r\n(\r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.NOTE\r\n) denominator\r\n;\r\n","CATEGORY":"Plausibility","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: syntax error at or near \"@\" \nPosition: 315;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":919,"QUERY_TEXT":"\r\n/*********\r\nPLAUSIBLE_TEMPORAL_AFTER\r\nget number of records and the proportion to total number of eligible records with datetimes that do not occur on or after their corresponding datetimes\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = NOTE\r\ncdmFieldName = note_datetime\r\ntemoralComparatorTableName = @temoralComparatorTableName\r\ntemporalComparatorFieldName = @temporalComparatorFieldName\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'NOTE.note_datetime' AS violating_field, NOTE.*\r\n    from cdm.NOTE\r\n\t\tjoin cdm.@temoralComparatorTableName\r\n\t\t\ton cdm.NOTE.person_id = cdm.@temoralComparatorTableName.person_id\r\n    where @temporalComparatorFieldName > note_datetime\r\n\t) violated_rows\r\n) violated_row_count,\r\n(\r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.NOTE\r\n) denominator\r\n;\r\n","CATEGORY":"Plausibility","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: syntax error at or near \"@\" \nPosition: 319;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":920,"QUERY_TEXT":"\r\n/*********\r\nPLAUSIBLE_TEMPORAL_AFTER\r\nget number of records and the proportion to total number of eligible records with datetimes that do not occur on or after their corresponding datetimes\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = NOTE_NLP\r\ncdmFieldName = nlp_datetime\r\ntemoralComparatorTableName = @temoralComparatorTableName\r\ntemporalComparatorFieldName = @temporalComparatorFieldName\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'NOTE_NLP.nlp_datetime' AS violating_field, NOTE_NLP.*\r\n    from cdm.NOTE_NLP\r\n\t\tjoin cdm.@temoralComparatorTableName\r\n\t\t\ton cdm.NOTE_NLP.person_id = cdm.@temoralComparatorTableName.person_id\r\n    where @temporalComparatorFieldName > nlp_datetime\r\n\t) violated_rows\r\n) violated_row_count,\r\n(\r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.NOTE_NLP\r\n) denominator\r\n;\r\n","CATEGORY":"Plausibility","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: syntax error at or near \"@\" \nPosition: 330;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":921,"QUERY_TEXT":"\r\n/*********\r\nPLAUSIBLE_TEMPORAL_AFTER\r\nget number of records and the proportion to total number of eligible records with datetimes that do not occur on or after their corresponding datetimes\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = OBSERVATION\r\ncdmFieldName = observation_date\r\ntemoralComparatorTableName = @temoralComparatorTableName\r\ntemporalComparatorFieldName = @temporalComparatorFieldName\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'OBSERVATION.observation_date' AS violating_field, OBSERVATION.*\r\n    from cdm.OBSERVATION\r\n\t\tjoin cdm.@temoralComparatorTableName\r\n\t\t\ton cdm.OBSERVATION.person_id = cdm.@temoralComparatorTableName.person_id\r\n    where @temporalComparatorFieldName > observation_date\r\n\t) violated_rows\r\n) violated_row_count,\r\n(\r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.OBSERVATION\r\n) denominator\r\n;\r\n","CATEGORY":"Plausibility","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: syntax error at or near \"@\" \nPosition: 343;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":922,"QUERY_TEXT":"\r\n/*********\r\nPLAUSIBLE_TEMPORAL_AFTER\r\nget number of records and the proportion to total number of eligible records with datetimes that do not occur on or after their corresponding datetimes\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = OBSERVATION\r\ncdmFieldName = observation_datetime\r\ntemoralComparatorTableName = @temoralComparatorTableName\r\ntemporalComparatorFieldName = @temporalComparatorFieldName\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'OBSERVATION.observation_datetime' AS violating_field, OBSERVATION.*\r\n    from cdm.OBSERVATION\r\n\t\tjoin cdm.@temoralComparatorTableName\r\n\t\t\ton cdm.OBSERVATION.person_id = cdm.@temoralComparatorTableName.person_id\r\n    where @temporalComparatorFieldName > observation_datetime\r\n\t) violated_rows\r\n) violated_row_count,\r\n(\r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.OBSERVATION\r\n) denominator\r\n;\r\n","CATEGORY":"Plausibility","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: syntax error at or near \"@\" \nPosition: 347;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":923,"QUERY_TEXT":"\r\n/*********\r\nPLAUSIBLE_TEMPORAL_AFTER\r\nget number of records and the proportion to total number of eligible records with datetimes that do not occur on or after their corresponding datetimes\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = SPECIMEN\r\ncdmFieldName = specimen_date\r\ntemoralComparatorTableName = @temoralComparatorTableName\r\ntemporalComparatorFieldName = @temporalComparatorFieldName\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'SPECIMEN.specimen_date' AS violating_field, SPECIMEN.*\r\n    from cdm.SPECIMEN\r\n\t\tjoin cdm.@temoralComparatorTableName\r\n\t\t\ton cdm.SPECIMEN.person_id = cdm.@temoralComparatorTableName.person_id\r\n    where @temporalComparatorFieldName > specimen_date\r\n\t) violated_rows\r\n) violated_row_count,\r\n(\r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.SPECIMEN\r\n) denominator\r\n;\r\n","CATEGORY":"Plausibility","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: syntax error at or near \"@\" \nPosition: 331;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":924,"QUERY_TEXT":"\r\n/*********\r\nPLAUSIBLE_TEMPORAL_AFTER\r\nget number of records and the proportion to total number of eligible records with datetimes that do not occur on or after their corresponding datetimes\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = SPECIMEN\r\ncdmFieldName = specimen_datetime\r\ntemoralComparatorTableName = @temoralComparatorTableName\r\ntemporalComparatorFieldName = @temporalComparatorFieldName\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'SPECIMEN.specimen_datetime' AS violating_field, SPECIMEN.*\r\n    from cdm.SPECIMEN\r\n\t\tjoin cdm.@temoralComparatorTableName\r\n\t\t\ton cdm.SPECIMEN.person_id = cdm.@temoralComparatorTableName.person_id\r\n    where @temporalComparatorFieldName > specimen_datetime\r\n\t) violated_rows\r\n) violated_row_count,\r\n(\r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.SPECIMEN\r\n) denominator\r\n;\r\n","CATEGORY":"Plausibility","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: syntax error at or near \"@\" \nPosition: 335;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":925,"QUERY_TEXT":"\r\n/*********\r\nPLAUSIBLE_TEMPORAL_AFTER\r\nget number of records and the proportion to total number of eligible records with datetimes that do not occur on or after their corresponding datetimes\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = PAYER_PLAN_PERIOD\r\ncdmFieldName = payer_plan_period_end_date\r\ntemoralComparatorTableName = @temoralComparatorTableName\r\ntemporalComparatorFieldName = @temporalComparatorFieldName\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'PAYER_PLAN_PERIOD.payer_plan_period_end_date' AS violating_field, PAYER_PLAN_PERIOD.*\r\n    from cdm.PAYER_PLAN_PERIOD\r\n\t\tjoin cdm.@temoralComparatorTableName\r\n\t\t\ton cdm.PAYER_PLAN_PERIOD.person_id = cdm.@temoralComparatorTableName.person_id\r\n    where @temporalComparatorFieldName > payer_plan_period_end_date\r\n\t) violated_rows\r\n) violated_row_count,\r\n(\r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.PAYER_PLAN_PERIOD\r\n) denominator\r\n;\r\n","CATEGORY":"Plausibility","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: syntax error at or near \"@\" \nPosition: 371;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":926,"QUERY_TEXT":"\r\n/*********\r\nPLAUSIBLE_TEMPORAL_AFTER\r\nget number of records and the proportion to total number of eligible records with datetimes that do not occur on or after their corresponding datetimes\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = COST\r\ncdmFieldName = paid_dispensing_fee\r\ntemoralComparatorTableName = @temoralComparatorTableName\r\ntemporalComparatorFieldName = @temporalComparatorFieldName\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'COST.paid_dispensing_fee' AS violating_field, COST.*\r\n    from cdm.COST\r\n\t\tjoin cdm.@temoralComparatorTableName\r\n\t\t\ton cdm.COST.person_id = cdm.@temoralComparatorTableName.person_id\r\n    where @temporalComparatorFieldName > paid_dispensing_fee\r\n\t) violated_rows\r\n) violated_row_count,\r\n(\r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.COST\r\n) denominator\r\n;\r\n","CATEGORY":"Plausibility","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: syntax error at or near \"@\" \nPosition: 325;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":927,"QUERY_TEXT":"\r\n/*********\r\nPLAUSIBLE_TEMPORAL_AFTER\r\nget number of records and the proportion to total number of eligible records with datetimes that do not occur on or after their corresponding datetimes\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = COST\r\ncdmFieldName = payer_plan_period_id\r\ntemoralComparatorTableName = @temoralComparatorTableName\r\ntemporalComparatorFieldName = @temporalComparatorFieldName\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'COST.payer_plan_period_id' AS violating_field, COST.*\r\n    from cdm.COST\r\n\t\tjoin cdm.@temoralComparatorTableName\r\n\t\t\ton cdm.COST.person_id = cdm.@temoralComparatorTableName.person_id\r\n    where @temporalComparatorFieldName > payer_plan_period_id\r\n\t) violated_rows\r\n) violated_row_count,\r\n(\r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.COST\r\n) denominator\r\n;\r\n","CATEGORY":"Plausibility","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: syntax error at or near \"@\" \nPosition: 326;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":928,"QUERY_TEXT":"\r\n/*********\r\nPLAUSIBLE_TEMPORAL_AFTER\r\nget number of records and the proportion to total number of eligible records with datetimes that do not occur on or after their corresponding datetimes\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = DRUG_ERA\r\ncdmFieldName = drug_era_start_date\r\ntemoralComparatorTableName = @temoralComparatorTableName\r\ntemporalComparatorFieldName = @temporalComparatorFieldName\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'DRUG_ERA.drug_era_start_date' AS violating_field, DRUG_ERA.*\r\n    from cdm.DRUG_ERA\r\n\t\tjoin cdm.@temoralComparatorTableName\r\n\t\t\ton cdm.DRUG_ERA.person_id = cdm.@temoralComparatorTableName.person_id\r\n    where @temporalComparatorFieldName > drug_era_start_date\r\n\t) violated_rows\r\n) violated_row_count,\r\n(\r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.DRUG_ERA\r\n) denominator\r\n;\r\n","CATEGORY":"Plausibility","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: syntax error at or near \"@\" \nPosition: 337;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":929,"QUERY_TEXT":"\r\n/*********\r\nPLAUSIBLE_TEMPORAL_AFTER\r\nget number of records and the proportion to total number of eligible records with datetimes that do not occur on or after their corresponding datetimes\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = DRUG_ERA\r\ncdmFieldName = drug_era_end_date\r\ntemoralComparatorTableName = @temoralComparatorTableName\r\ntemporalComparatorFieldName = @temporalComparatorFieldName\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'DRUG_ERA.drug_era_end_date' AS violating_field, DRUG_ERA.*\r\n    from cdm.DRUG_ERA\r\n\t\tjoin cdm.@temoralComparatorTableName\r\n\t\t\ton cdm.DRUG_ERA.person_id = cdm.@temoralComparatorTableName.person_id\r\n    where @temporalComparatorFieldName > drug_era_end_date\r\n\t) violated_rows\r\n) violated_row_count,\r\n(\r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.DRUG_ERA\r\n) denominator\r\n;\r\n","CATEGORY":"Plausibility","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: syntax error at or near \"@\" \nPosition: 335;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":930,"QUERY_TEXT":"\r\n/*********\r\nPLAUSIBLE_TEMPORAL_AFTER\r\nget number of records and the proportion to total number of eligible records with datetimes that do not occur on or after their corresponding datetimes\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = DOSE_ERA\r\ncdmFieldName = dose_era_start_date\r\ntemoralComparatorTableName = @temoralComparatorTableName\r\ntemporalComparatorFieldName = @temporalComparatorFieldName\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'DOSE_ERA.dose_era_start_date' AS violating_field, DOSE_ERA.*\r\n    from cdm.DOSE_ERA\r\n\t\tjoin cdm.@temoralComparatorTableName\r\n\t\t\ton cdm.DOSE_ERA.person_id = cdm.@temoralComparatorTableName.person_id\r\n    where @temporalComparatorFieldName > dose_era_start_date\r\n\t) violated_rows\r\n) violated_row_count,\r\n(\r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.DOSE_ERA\r\n) denominator\r\n;\r\n","CATEGORY":"Plausibility","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: syntax error at or near \"@\" \nPosition: 337;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":931,"QUERY_TEXT":"\r\n/*********\r\nPLAUSIBLE_TEMPORAL_AFTER\r\nget number of records and the proportion to total number of eligible records with datetimes that do not occur on or after their corresponding datetimes\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = DOSE_ERA\r\ncdmFieldName = dose_era_end_date\r\ntemoralComparatorTableName = @temoralComparatorTableName\r\ntemporalComparatorFieldName = @temporalComparatorFieldName\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'DOSE_ERA.dose_era_end_date' AS violating_field, DOSE_ERA.*\r\n    from cdm.DOSE_ERA\r\n\t\tjoin cdm.@temoralComparatorTableName\r\n\t\t\ton cdm.DOSE_ERA.person_id = cdm.@temoralComparatorTableName.person_id\r\n    where @temporalComparatorFieldName > dose_era_end_date\r\n\t) violated_rows\r\n) violated_row_count,\r\n(\r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.DOSE_ERA\r\n) denominator\r\n;\r\n","CATEGORY":"Plausibility","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: syntax error at or near \"@\" \nPosition: 335;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":932,"QUERY_TEXT":"\r\n/*********\r\nPLAUSIBLE_TEMPORAL_AFTER\r\nget number of records and the proportion to total number of eligible records with datetimes that do not occur on or after their corresponding datetimes\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = CONDITION_ERA\r\ncdmFieldName = condition_era_start_date\r\ntemoralComparatorTableName = @temoralComparatorTableName\r\ntemporalComparatorFieldName = @temporalComparatorFieldName\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'CONDITION_ERA.condition_era_start_date' AS violating_field, CONDITION_ERA.*\r\n    from cdm.CONDITION_ERA\r\n\t\tjoin cdm.@temoralComparatorTableName\r\n\t\t\ton cdm.CONDITION_ERA.person_id = cdm.@temoralComparatorTableName.person_id\r\n    where @temporalComparatorFieldName > condition_era_start_date\r\n\t) violated_rows\r\n) violated_row_count,\r\n(\r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.CONDITION_ERA\r\n) denominator\r\n;\r\n","CATEGORY":"Plausibility","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: syntax error at or near \"@\" \nPosition: 357;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"CHECK_ID":933,"QUERY_TEXT":"\r\n/*********\r\nPLAUSIBLE_TEMPORAL_AFTER\r\nget number of records and the proportion to total number of eligible records with datetimes that do not occur on or after their corresponding datetimes\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = CONDITION_ERA\r\ncdmFieldName = condition_era_end_date\r\ntemoralComparatorTableName = @temoralComparatorTableName\r\ntemporalComparatorFieldName = @temporalComparatorFieldName\r\n**********/\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'CONDITION_ERA.condition_era_end_date' AS violating_field, CONDITION_ERA.*\r\n    from cdm.CONDITION_ERA\r\n\t\tjoin cdm.@temoralComparatorTableName\r\n\t\t\ton cdm.CONDITION_ERA.person_id = cdm.@temoralComparatorTableName.person_id\r\n    where @temporalComparatorFieldName > condition_era_end_date\r\n\t) violated_rows\r\n) violated_row_count,\r\n(\r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.CONDITION_ERA\r\n) denominator\r\n;\r\n","CATEGORY":"Plausibility","ERROR":"Error executing SQL:\njava.sql.SQLException: [Amazon](500310) Invalid operation: syntax error at or near \"@\" \nPosition: 355;\nAn error report has been created at  D:/git/DataQualityDashboard/errorReport.txt"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":934,"QUERY_TEXT":"\r\n/*********\r\nPLAUSIBLE_DURING_LIFE\r\nget number of events that occur after death event (PLAUSIBLE_DURING_LIFE == Yes)\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = OBSERVATION_PERIOD\r\ncdmFieldName = observation_period_start_date\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'OBSERVATION_PERIOD.observation_period_start_date' AS violating_field, OBSERVATION_PERIOD.*\r\n    from cdm.OBSERVATION_PERIOD\r\n    join cdm.death on cdm.OBSERVATION_PERIOD.person_id = cdm.death.person_id\r\n    where observation_period_start_date > death_date\r\n\t) violated_rows\r\n) violated_row_count,\r\n(\r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.OBSERVATION_PERIOD\r\n\twhere person_id in\r\n\t( select person_id from cdm.death )\r\n) denominator\r\n;\r\n","CATEGORY":"Plausibility"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":935,"QUERY_TEXT":"\r\n/*********\r\nPLAUSIBLE_DURING_LIFE\r\nget number of events that occur after death event (PLAUSIBLE_DURING_LIFE == Yes)\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = OBSERVATION_PERIOD\r\ncdmFieldName = observation_period_end_date\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'OBSERVATION_PERIOD.observation_period_end_date' AS violating_field, OBSERVATION_PERIOD.*\r\n    from cdm.OBSERVATION_PERIOD\r\n    join cdm.death on cdm.OBSERVATION_PERIOD.person_id = cdm.death.person_id\r\n    where observation_period_end_date > death_date\r\n\t) violated_rows\r\n) violated_row_count,\r\n(\r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.OBSERVATION_PERIOD\r\n\twhere person_id in\r\n\t( select person_id from cdm.death )\r\n) denominator\r\n;\r\n","CATEGORY":"Plausibility"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":936,"QUERY_TEXT":"\r\n/*********\r\nPLAUSIBLE_DURING_LIFE\r\nget number of events that occur after death event (PLAUSIBLE_DURING_LIFE == Yes)\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = VISIT_OCCURRENCE\r\ncdmFieldName = visit_start_date\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'VISIT_OCCURRENCE.visit_start_date' AS violating_field, VISIT_OCCURRENCE.*\r\n    from cdm.VISIT_OCCURRENCE\r\n    join cdm.death on cdm.VISIT_OCCURRENCE.person_id = cdm.death.person_id\r\n    where visit_start_date > death_date\r\n\t) violated_rows\r\n) violated_row_count,\r\n(\r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.VISIT_OCCURRENCE\r\n\twhere person_id in\r\n\t( select person_id from cdm.death )\r\n) denominator\r\n;\r\n","CATEGORY":"Plausibility"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":937,"QUERY_TEXT":"\r\n/*********\r\nPLAUSIBLE_DURING_LIFE\r\nget number of events that occur after death event (PLAUSIBLE_DURING_LIFE == Yes)\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = VISIT_OCCURRENCE\r\ncdmFieldName = visit_start_datetime\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'VISIT_OCCURRENCE.visit_start_datetime' AS violating_field, VISIT_OCCURRENCE.*\r\n    from cdm.VISIT_OCCURRENCE\r\n    join cdm.death on cdm.VISIT_OCCURRENCE.person_id = cdm.death.person_id\r\n    where visit_start_datetime > death_date\r\n\t) violated_rows\r\n) violated_row_count,\r\n(\r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.VISIT_OCCURRENCE\r\n\twhere person_id in\r\n\t( select person_id from cdm.death )\r\n) denominator\r\n;\r\n","CATEGORY":"Plausibility"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":938,"QUERY_TEXT":"\r\n/*********\r\nPLAUSIBLE_DURING_LIFE\r\nget number of events that occur after death event (PLAUSIBLE_DURING_LIFE == Yes)\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = VISIT_OCCURRENCE\r\ncdmFieldName = visit_end_date\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'VISIT_OCCURRENCE.visit_end_date' AS violating_field, VISIT_OCCURRENCE.*\r\n    from cdm.VISIT_OCCURRENCE\r\n    join cdm.death on cdm.VISIT_OCCURRENCE.person_id = cdm.death.person_id\r\n    where visit_end_date > death_date\r\n\t) violated_rows\r\n) violated_row_count,\r\n(\r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.VISIT_OCCURRENCE\r\n\twhere person_id in\r\n\t( select person_id from cdm.death )\r\n) denominator\r\n;\r\n","CATEGORY":"Plausibility"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":939,"QUERY_TEXT":"\r\n/*********\r\nPLAUSIBLE_DURING_LIFE\r\nget number of events that occur after death event (PLAUSIBLE_DURING_LIFE == Yes)\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = VISIT_OCCURRENCE\r\ncdmFieldName = visit_end_datetime\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'VISIT_OCCURRENCE.visit_end_datetime' AS violating_field, VISIT_OCCURRENCE.*\r\n    from cdm.VISIT_OCCURRENCE\r\n    join cdm.death on cdm.VISIT_OCCURRENCE.person_id = cdm.death.person_id\r\n    where visit_end_datetime > death_date\r\n\t) violated_rows\r\n) violated_row_count,\r\n(\r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.VISIT_OCCURRENCE\r\n\twhere person_id in\r\n\t( select person_id from cdm.death )\r\n) denominator\r\n;\r\n","CATEGORY":"Plausibility"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":940,"QUERY_TEXT":"\r\n/*********\r\nPLAUSIBLE_DURING_LIFE\r\nget number of events that occur after death event (PLAUSIBLE_DURING_LIFE == Yes)\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = CONDITION_OCCURRENCE\r\ncdmFieldName = condition_start_date\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'CONDITION_OCCURRENCE.condition_start_date' AS violating_field, CONDITION_OCCURRENCE.*\r\n    from cdm.CONDITION_OCCURRENCE\r\n    join cdm.death on cdm.CONDITION_OCCURRENCE.person_id = cdm.death.person_id\r\n    where condition_start_date > death_date\r\n\t) violated_rows\r\n) violated_row_count,\r\n(\r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.CONDITION_OCCURRENCE\r\n\twhere person_id in\r\n\t( select person_id from cdm.death )\r\n) denominator\r\n;\r\n","CATEGORY":"Plausibility"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":941,"QUERY_TEXT":"\r\n/*********\r\nPLAUSIBLE_DURING_LIFE\r\nget number of events that occur after death event (PLAUSIBLE_DURING_LIFE == Yes)\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = CONDITION_OCCURRENCE\r\ncdmFieldName = condition_start_datetime\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'CONDITION_OCCURRENCE.condition_start_datetime' AS violating_field, CONDITION_OCCURRENCE.*\r\n    from cdm.CONDITION_OCCURRENCE\r\n    join cdm.death on cdm.CONDITION_OCCURRENCE.person_id = cdm.death.person_id\r\n    where condition_start_datetime > death_date\r\n\t) violated_rows\r\n) violated_row_count,\r\n(\r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.CONDITION_OCCURRENCE\r\n\twhere person_id in\r\n\t( select person_id from cdm.death )\r\n) denominator\r\n;\r\n","CATEGORY":"Plausibility"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":942,"QUERY_TEXT":"\r\n/*********\r\nPLAUSIBLE_DURING_LIFE\r\nget number of events that occur after death event (PLAUSIBLE_DURING_LIFE == Yes)\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = CONDITION_OCCURRENCE\r\ncdmFieldName = condition_end_date\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'CONDITION_OCCURRENCE.condition_end_date' AS violating_field, CONDITION_OCCURRENCE.*\r\n    from cdm.CONDITION_OCCURRENCE\r\n    join cdm.death on cdm.CONDITION_OCCURRENCE.person_id = cdm.death.person_id\r\n    where condition_end_date > death_date\r\n\t) violated_rows\r\n) violated_row_count,\r\n(\r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.CONDITION_OCCURRENCE\r\n\twhere person_id in\r\n\t( select person_id from cdm.death )\r\n) denominator\r\n;\r\n","CATEGORY":"Plausibility"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":943,"QUERY_TEXT":"\r\n/*********\r\nPLAUSIBLE_DURING_LIFE\r\nget number of events that occur after death event (PLAUSIBLE_DURING_LIFE == Yes)\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = CONDITION_OCCURRENCE\r\ncdmFieldName = condition_end_datetime\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'CONDITION_OCCURRENCE.condition_end_datetime' AS violating_field, CONDITION_OCCURRENCE.*\r\n    from cdm.CONDITION_OCCURRENCE\r\n    join cdm.death on cdm.CONDITION_OCCURRENCE.person_id = cdm.death.person_id\r\n    where condition_end_datetime > death_date\r\n\t) violated_rows\r\n) violated_row_count,\r\n(\r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.CONDITION_OCCURRENCE\r\n\twhere person_id in\r\n\t( select person_id from cdm.death )\r\n) denominator\r\n;\r\n","CATEGORY":"Plausibility"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":944,"QUERY_TEXT":"\r\n/*********\r\nPLAUSIBLE_DURING_LIFE\r\nget number of events that occur after death event (PLAUSIBLE_DURING_LIFE == Yes)\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = DRUG_EXPOSURE\r\ncdmFieldName = drug_exposure_start_date\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'DRUG_EXPOSURE.drug_exposure_start_date' AS violating_field, DRUG_EXPOSURE.*\r\n    from cdm.DRUG_EXPOSURE\r\n    join cdm.death on cdm.DRUG_EXPOSURE.person_id = cdm.death.person_id\r\n    where drug_exposure_start_date > death_date\r\n\t) violated_rows\r\n) violated_row_count,\r\n(\r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.DRUG_EXPOSURE\r\n\twhere person_id in\r\n\t( select person_id from cdm.death )\r\n) denominator\r\n;\r\n","CATEGORY":"Plausibility"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":945,"QUERY_TEXT":"\r\n/*********\r\nPLAUSIBLE_DURING_LIFE\r\nget number of events that occur after death event (PLAUSIBLE_DURING_LIFE == Yes)\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = DRUG_EXPOSURE\r\ncdmFieldName = drug_exposure_start_datetime\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'DRUG_EXPOSURE.drug_exposure_start_datetime' AS violating_field, DRUG_EXPOSURE.*\r\n    from cdm.DRUG_EXPOSURE\r\n    join cdm.death on cdm.DRUG_EXPOSURE.person_id = cdm.death.person_id\r\n    where drug_exposure_start_datetime > death_date\r\n\t) violated_rows\r\n) violated_row_count,\r\n(\r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.DRUG_EXPOSURE\r\n\twhere person_id in\r\n\t( select person_id from cdm.death )\r\n) denominator\r\n;\r\n","CATEGORY":"Plausibility"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":946,"QUERY_TEXT":"\r\n/*********\r\nPLAUSIBLE_DURING_LIFE\r\nget number of events that occur after death event (PLAUSIBLE_DURING_LIFE == Yes)\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = DRUG_EXPOSURE\r\ncdmFieldName = drug_exposure_end_date\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'DRUG_EXPOSURE.drug_exposure_end_date' AS violating_field, DRUG_EXPOSURE.*\r\n    from cdm.DRUG_EXPOSURE\r\n    join cdm.death on cdm.DRUG_EXPOSURE.person_id = cdm.death.person_id\r\n    where drug_exposure_end_date > death_date\r\n\t) violated_rows\r\n) violated_row_count,\r\n(\r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.DRUG_EXPOSURE\r\n\twhere person_id in\r\n\t( select person_id from cdm.death )\r\n) denominator\r\n;\r\n","CATEGORY":"Plausibility"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":947,"QUERY_TEXT":"\r\n/*********\r\nPLAUSIBLE_DURING_LIFE\r\nget number of events that occur after death event (PLAUSIBLE_DURING_LIFE == Yes)\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = DRUG_EXPOSURE\r\ncdmFieldName = drug_exposure_end_datetime\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'DRUG_EXPOSURE.drug_exposure_end_datetime' AS violating_field, DRUG_EXPOSURE.*\r\n    from cdm.DRUG_EXPOSURE\r\n    join cdm.death on cdm.DRUG_EXPOSURE.person_id = cdm.death.person_id\r\n    where drug_exposure_end_datetime > death_date\r\n\t) violated_rows\r\n) violated_row_count,\r\n(\r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.DRUG_EXPOSURE\r\n\twhere person_id in\r\n\t( select person_id from cdm.death )\r\n) denominator\r\n;\r\n","CATEGORY":"Plausibility"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":948,"QUERY_TEXT":"\r\n/*********\r\nPLAUSIBLE_DURING_LIFE\r\nget number of events that occur after death event (PLAUSIBLE_DURING_LIFE == Yes)\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = DRUG_EXPOSURE\r\ncdmFieldName = verbatim_end_date\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'DRUG_EXPOSURE.verbatim_end_date' AS violating_field, DRUG_EXPOSURE.*\r\n    from cdm.DRUG_EXPOSURE\r\n    join cdm.death on cdm.DRUG_EXPOSURE.person_id = cdm.death.person_id\r\n    where verbatim_end_date > death_date\r\n\t) violated_rows\r\n) violated_row_count,\r\n(\r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.DRUG_EXPOSURE\r\n\twhere person_id in\r\n\t( select person_id from cdm.death )\r\n) denominator\r\n;\r\n","CATEGORY":"Plausibility"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":949,"QUERY_TEXT":"\r\n/*********\r\nPLAUSIBLE_DURING_LIFE\r\nget number of events that occur after death event (PLAUSIBLE_DURING_LIFE == Yes)\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = PROCEDURE_OCCURRENCE\r\ncdmFieldName = procedure_date\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'PROCEDURE_OCCURRENCE.procedure_date' AS violating_field, PROCEDURE_OCCURRENCE.*\r\n    from cdm.PROCEDURE_OCCURRENCE\r\n    join cdm.death on cdm.PROCEDURE_OCCURRENCE.person_id = cdm.death.person_id\r\n    where procedure_date > death_date\r\n\t) violated_rows\r\n) violated_row_count,\r\n(\r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.PROCEDURE_OCCURRENCE\r\n\twhere person_id in\r\n\t( select person_id from cdm.death )\r\n) denominator\r\n;\r\n","CATEGORY":"Plausibility"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":950,"QUERY_TEXT":"\r\n/*********\r\nPLAUSIBLE_DURING_LIFE\r\nget number of events that occur after death event (PLAUSIBLE_DURING_LIFE == Yes)\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = PROCEDURE_OCCURRENCE\r\ncdmFieldName = procedure_datetime\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'PROCEDURE_OCCURRENCE.procedure_datetime' AS violating_field, PROCEDURE_OCCURRENCE.*\r\n    from cdm.PROCEDURE_OCCURRENCE\r\n    join cdm.death on cdm.PROCEDURE_OCCURRENCE.person_id = cdm.death.person_id\r\n    where procedure_datetime > death_date\r\n\t) violated_rows\r\n) violated_row_count,\r\n(\r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.PROCEDURE_OCCURRENCE\r\n\twhere person_id in\r\n\t( select person_id from cdm.death )\r\n) denominator\r\n;\r\n","CATEGORY":"Plausibility"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":951,"QUERY_TEXT":"\r\n/*********\r\nPLAUSIBLE_DURING_LIFE\r\nget number of events that occur after death event (PLAUSIBLE_DURING_LIFE == Yes)\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = DEVICE_EXPOSURE\r\ncdmFieldName = device_exposure_start_date\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'DEVICE_EXPOSURE.device_exposure_start_date' AS violating_field, DEVICE_EXPOSURE.*\r\n    from cdm.DEVICE_EXPOSURE\r\n    join cdm.death on cdm.DEVICE_EXPOSURE.person_id = cdm.death.person_id\r\n    where device_exposure_start_date > death_date\r\n\t) violated_rows\r\n) violated_row_count,\r\n(\r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.DEVICE_EXPOSURE\r\n\twhere person_id in\r\n\t( select person_id from cdm.death )\r\n) denominator\r\n;\r\n","CATEGORY":"Plausibility"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":952,"QUERY_TEXT":"\r\n/*********\r\nPLAUSIBLE_DURING_LIFE\r\nget number of events that occur after death event (PLAUSIBLE_DURING_LIFE == Yes)\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = DEVICE_EXPOSURE\r\ncdmFieldName = device_exposure_start_datetime\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'DEVICE_EXPOSURE.device_exposure_start_datetime' AS violating_field, DEVICE_EXPOSURE.*\r\n    from cdm.DEVICE_EXPOSURE\r\n    join cdm.death on cdm.DEVICE_EXPOSURE.person_id = cdm.death.person_id\r\n    where device_exposure_start_datetime > death_date\r\n\t) violated_rows\r\n) violated_row_count,\r\n(\r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.DEVICE_EXPOSURE\r\n\twhere person_id in\r\n\t( select person_id from cdm.death )\r\n) denominator\r\n;\r\n","CATEGORY":"Plausibility"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":953,"QUERY_TEXT":"\r\n/*********\r\nPLAUSIBLE_DURING_LIFE\r\nget number of events that occur after death event (PLAUSIBLE_DURING_LIFE == Yes)\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = DEVICE_EXPOSURE\r\ncdmFieldName = device_exposure_end_date\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'DEVICE_EXPOSURE.device_exposure_end_date' AS violating_field, DEVICE_EXPOSURE.*\r\n    from cdm.DEVICE_EXPOSURE\r\n    join cdm.death on cdm.DEVICE_EXPOSURE.person_id = cdm.death.person_id\r\n    where device_exposure_end_date > death_date\r\n\t) violated_rows\r\n) violated_row_count,\r\n(\r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.DEVICE_EXPOSURE\r\n\twhere person_id in\r\n\t( select person_id from cdm.death )\r\n) denominator\r\n;\r\n","CATEGORY":"Plausibility"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":954,"QUERY_TEXT":"\r\n/*********\r\nPLAUSIBLE_DURING_LIFE\r\nget number of events that occur after death event (PLAUSIBLE_DURING_LIFE == Yes)\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = DEVICE_EXPOSURE\r\ncdmFieldName = device_exposure_end_datetime\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'DEVICE_EXPOSURE.device_exposure_end_datetime' AS violating_field, DEVICE_EXPOSURE.*\r\n    from cdm.DEVICE_EXPOSURE\r\n    join cdm.death on cdm.DEVICE_EXPOSURE.person_id = cdm.death.person_id\r\n    where device_exposure_end_datetime > death_date\r\n\t) violated_rows\r\n) violated_row_count,\r\n(\r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.DEVICE_EXPOSURE\r\n\twhere person_id in\r\n\t( select person_id from cdm.death )\r\n) denominator\r\n;\r\n","CATEGORY":"Plausibility"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":955,"QUERY_TEXT":"\r\n/*********\r\nPLAUSIBLE_DURING_LIFE\r\nget number of events that occur after death event (PLAUSIBLE_DURING_LIFE == Yes)\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = VISIT_DETAIL\r\ncdmFieldName = visit_detail_start_date\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'VISIT_DETAIL.visit_detail_start_date' AS violating_field, VISIT_DETAIL.*\r\n    from cdm.VISIT_DETAIL\r\n    join cdm.death on cdm.VISIT_DETAIL.person_id = cdm.death.person_id\r\n    where visit_detail_start_date > death_date\r\n\t) violated_rows\r\n) violated_row_count,\r\n(\r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.VISIT_DETAIL\r\n\twhere person_id in\r\n\t( select person_id from cdm.death )\r\n) denominator\r\n;\r\n","CATEGORY":"Plausibility"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":956,"QUERY_TEXT":"\r\n/*********\r\nPLAUSIBLE_DURING_LIFE\r\nget number of events that occur after death event (PLAUSIBLE_DURING_LIFE == Yes)\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = VISIT_DETAIL\r\ncdmFieldName = visit_detail_start_datetime\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'VISIT_DETAIL.visit_detail_start_datetime' AS violating_field, VISIT_DETAIL.*\r\n    from cdm.VISIT_DETAIL\r\n    join cdm.death on cdm.VISIT_DETAIL.person_id = cdm.death.person_id\r\n    where visit_detail_start_datetime > death_date\r\n\t) violated_rows\r\n) violated_row_count,\r\n(\r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.VISIT_DETAIL\r\n\twhere person_id in\r\n\t( select person_id from cdm.death )\r\n) denominator\r\n;\r\n","CATEGORY":"Plausibility"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":957,"QUERY_TEXT":"\r\n/*********\r\nPLAUSIBLE_DURING_LIFE\r\nget number of events that occur after death event (PLAUSIBLE_DURING_LIFE == Yes)\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = VISIT_DETAIL\r\ncdmFieldName = visit_detail_end_date\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'VISIT_DETAIL.visit_detail_end_date' AS violating_field, VISIT_DETAIL.*\r\n    from cdm.VISIT_DETAIL\r\n    join cdm.death on cdm.VISIT_DETAIL.person_id = cdm.death.person_id\r\n    where visit_detail_end_date > death_date\r\n\t) violated_rows\r\n) violated_row_count,\r\n(\r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.VISIT_DETAIL\r\n\twhere person_id in\r\n\t( select person_id from cdm.death )\r\n) denominator\r\n;\r\n","CATEGORY":"Plausibility"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":958,"QUERY_TEXT":"\r\n/*********\r\nPLAUSIBLE_DURING_LIFE\r\nget number of events that occur after death event (PLAUSIBLE_DURING_LIFE == Yes)\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = VISIT_DETAIL\r\ncdmFieldName = visit_detail_end_datetime\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'VISIT_DETAIL.visit_detail_end_datetime' AS violating_field, VISIT_DETAIL.*\r\n    from cdm.VISIT_DETAIL\r\n    join cdm.death on cdm.VISIT_DETAIL.person_id = cdm.death.person_id\r\n    where visit_detail_end_datetime > death_date\r\n\t) violated_rows\r\n) violated_row_count,\r\n(\r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.VISIT_DETAIL\r\n\twhere person_id in\r\n\t( select person_id from cdm.death )\r\n) denominator\r\n;\r\n","CATEGORY":"Plausibility"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":959,"QUERY_TEXT":"\r\n/*********\r\nPLAUSIBLE_DURING_LIFE\r\nget number of events that occur after death event (PLAUSIBLE_DURING_LIFE == Yes)\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = DRUG_ERA\r\ncdmFieldName = drug_era_start_date\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'DRUG_ERA.drug_era_start_date' AS violating_field, DRUG_ERA.*\r\n    from cdm.DRUG_ERA\r\n    join cdm.death on cdm.DRUG_ERA.person_id = cdm.death.person_id\r\n    where drug_era_start_date > death_date\r\n\t) violated_rows\r\n) violated_row_count,\r\n(\r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.DRUG_ERA\r\n\twhere person_id in\r\n\t( select person_id from cdm.death )\r\n) denominator\r\n;\r\n","CATEGORY":"Plausibility"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":960,"QUERY_TEXT":"\r\n/*********\r\nPLAUSIBLE_DURING_LIFE\r\nget number of events that occur after death event (PLAUSIBLE_DURING_LIFE == Yes)\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = DOSE_ERA\r\ncdmFieldName = dose_era_start_date\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'DOSE_ERA.dose_era_start_date' AS violating_field, DOSE_ERA.*\r\n    from cdm.DOSE_ERA\r\n    join cdm.death on cdm.DOSE_ERA.person_id = cdm.death.person_id\r\n    where dose_era_start_date > death_date\r\n\t) violated_rows\r\n) violated_row_count,\r\n(\r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.DOSE_ERA\r\n\twhere person_id in\r\n\t( select person_id from cdm.death )\r\n) denominator\r\n;\r\n","CATEGORY":"Plausibility"},{"NUM_VIOLATED_ROWS":0,"PCT_VIOLATED_ROWS":0,"CHECK_ID":961,"QUERY_TEXT":"\r\n/*********\r\nPLAUSIBLE_DURING_LIFE\r\nget number of events that occur after death event (PLAUSIBLE_DURING_LIFE == Yes)\r\n\r\nParameters used in this template:\r\ncdmDatabaseSchema = cdm\r\ncdmTableName = CONDITION_ERA\r\ncdmFieldName = condition_era_start_date\r\n**********/\r\n\r\n\r\nSELECT num_violated_rows, CASE WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows END  AS pct_violated_rows\r\nFROM\r\n(\r\n\tSELECT COUNT(violated_rows.violating_field) AS num_violated_rows\r\n\tFROM\r\n\t(\r\n\t\tSELECT 'CONDITION_ERA.condition_era_start_date' AS violating_field, CONDITION_ERA.*\r\n    from cdm.CONDITION_ERA\r\n    join cdm.death on cdm.CONDITION_ERA.person_id = cdm.death.person_id\r\n    where condition_era_start_date > death_date\r\n\t) violated_rows\r\n) violated_row_count,\r\n(\r\n\tSELECT COUNT(*) AS num_rows\r\n\tFROM cdm.CONDITION_ERA\r\n\twhere person_id in\r\n\t( select person_id from cdm.death )\r\n) denominator\r\n;\r\n","CATEGORY":"Plausibility"}],"Metadata":["cdm"],"Overview":{"countTotal":[961],"countPassed":[543],"countFailed":[418],"percentPassed":[57],"percentFailed":[43],"countTotalPlausibility":[172],"countTotalConformance":[463],"countTotalCompleteness":[326],"countFailedPlausibility":[144],"countFailedConformance":[62],"countFailedCompleteness":[212],"countPassedPlausibility":[28],"countPassedConformance":[401],"countPassedCompleteness":[114]}}
